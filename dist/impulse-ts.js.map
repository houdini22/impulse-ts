{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/harmony module decorator","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = output.data[row][col] * Math.log(predictions.data[row][col] + epsilon);\n    }\n  }\n\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < oldY.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < oldY.cols; col += 1) {\n      data[row][col] = 1 / (1 + Math.exp(-oldY.data[row][col]));\n    }\n  }\n  const s = new Matrix(oldY.rows, oldY.cols, data);\n  return new Matrix(\n    oldY.rows,\n    oldY.cols,\n    elementWiseMultiply(elementWiseMultiply(oldY, s), subtractFromNumber(s, 1)).data\n  );\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\nimport { constants } from \"crypto\";\nimport defaultCoreCipherList = module;\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-8;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictedOutput = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    const error = getComputation()\n      .execute(\n        \"add\",\n        getComputation().execute(\n          \"multiply\",\n          correctOutput,\n          //@ts-ignore\n          getComputation().execute(\"log\", predictedOutput).transpose()\n        ) as Matrix,\n        getComputation().execute(\n          \"multiply\",\n          getComputation().execute(\"subtractFromNumber\", correctOutput, 1) as Matrix,\n          //@ts-ignore\n          getComputation().execute(\"logMinusOne\", predictedOutput).transpose() as Matrix\n        ) as Matrix\n      )\n      //@ts-ignore\n      .sum();\n    const cost =\n      (-1 / numberOfExamples) * error + this.regularization / ((penalty / 2) * inputDataset.getNumberOfExamples());\n\n    for (let col = 0; col < predictedOutput.cols; col += 1) {\n      const index1 = predictedOutput.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let sigma = getComputation().execute(\"subtract\", predictions, Y) as Matrix;\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const dZ = this.layers[layer].backpropagation(sigma);\n      this.layers[layer].getBackPropagation().propagate(X, m, regularization, dZ);\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return 0;\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = getComputation().execute(\"multiply\", sigma, previousActivations) as Matrix;\n    this.layer.gW = getComputation().execute(\"multiplyNumber\", this.layer.gW, 1 / numberOfExamples) as Matrix;\n    this.layer.gb = getComputation().execute(\n      \"multiplyNumber\",\n      sigma.rowwiseSum().transpose(),\n      1 / numberOfExamples\n    ) as Matrix;\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      return getComputation().execute(\"multiply\", this.layer.W.transpose(), sigma) as Matrix;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.setPreviousLayer(this.lastLayer);\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n    this.dZ = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  setPreviousLayer(layer: Layers): void {\n    this.previousLayer = layer;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n\n  abstract backpropagation(delta: Matrix): Matrix;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    const prevLayer = this.previousLayer as Layers;\n\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.height, this.width);\n    this.sW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.sb.resize(this.height, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dW.resize(this.height, this.width);\n    this.dW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.db.resize(this.height, 1);\n    this.db = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dZ.resize(this.height, this.width);\n    this.dZ = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    this.gW = getComputation().execute(\"multiply\", this.A.transpose(), this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return 1.0 / m;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return this.dZ;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n\n  backpropagation(delta: Matrix) {\n    this.dZ = getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.gW, 2) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected = getComputation().execute(\"divideNumber\", layer.sW, 1 - Math.pow(this.beta2, this.t)) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected,\n          getComputation().execute(\"sqrt\", sCorrected) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected2 = getComputation().execute(\"divideNumber\", layer.sb, 1 - Math.pow(this.beta2, t)) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected2,\n          getComputation().execute(\"sqrt\", sCorrected2) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W.transpose(),\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gW, layer.gW) as Matrix,\n        1.0 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.sW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.sb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.sb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta) as Matrix\n    ) as Matrix;\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.vW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.vb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, forward, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 100} s.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback.call(null, {\n          iteration: i,\n        });\n      }\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["AbstractComputation","name","func","this","kernels","Error","args","apply","elementWiseDivide","m1","m2","rows","cols","data","row","col","Matrix","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","sum","logisticActivation","logisticLoss","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","logisticBackpropagation","sigma","oldY","s","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","multiply","Array","i","subtract","fillRandom","parameter","random","fillZeros","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","gpu","require","GPU","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","currentComputation","setComputation","type","getComputation","resize","generateData","arr","Float32Array","length","Number","NaN","t","push","oldData","newData","result","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","numberOfElements","AbstractTrainer","network","optimizer","regularization","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","numberOfExamples","getNumberOfExamples","accuracy","getLayers","forEach","layer","predictedOutput","forward","correctOutput","cost","colMaxCoeffIndex","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","hmd","create","children","set","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","LayerType","Network","dimensions","size","layers","input","X","Y","dZ","backpropagation","getBackPropagation","propagate","loss","path","resultJSON","getType","getSize","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","previousActivations","A","gW","gb","rowwiseSum","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","layerClass","callback","lastLayer","firstLayerTransition","transition","setPreviousLayer","configure","setBackPropagation","addLayer","AbstractLayer","vW","vb","sW","sb","dW","db","backPropagation","activation","width","height","depth","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","softmax","delta","LogisticLayer","logistic","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","dataset","AbstractOptimizer","OptimizerAdam","beta1","beta2","adam","vCorrected","sCorrected","vCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerMomentum","momentum","beta","MiniBatchTrainer","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","CallbackDatabaseModifier","example","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","Trainer","DatasetModifier","Computation","DatasetDataset","DatasetBuilderSource"],"sourceRoot":""}