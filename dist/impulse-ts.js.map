{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/./build/Debug/impulseTsToolkit.node","webpack://impulse-ts/external \"path\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/webpack/runtime/node module decorator","webpack://impulse-ts/webpack/runtime/publicPath","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx"],"sourcesContent":["\ntry {\n  process.dlopen(module, __dirname + require(\"path\").sep + __webpack_public_path__ + \"73d7aeeb6bdf583b875e0021222e9df1.node\");\n} catch (error) {\n  throw new Error('node-loader:\\n' + error);\n}\n","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","import {\n  MatrixMultiply,\n  MatrixElementWiseAdd,\n  MatrixElementWiseSubtract,\n  MatrixElementWiseMultiply,\n  MatrixElementWiseDivide,\n} from \"impulseTsToolkit\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0) {\n    this.resize(rows, cols);\n  }\n\n  resize(rows, cols) {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(rows * cols);\n  }\n\n  forEach(callback: Function) {\n    for (let i = 0; i < this.rows * this.cols; i++) {\n      const newValue = callback(this.data[i]);\n      this.data[i] = newValue !== undefined ? newValue : this.data[i];\n    }\n    return this;\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\"DIMENSIONS error.\");\n  }\n\n  const result = new Matrix(m1.rows, m2.cols);\n  result.data = MatrixMultiply(\n    m1.data,\n    m1.rows,\n    m1.cols,\n    m2.data,\n    m2.rows,\n    m2.cols\n  );\n\n  return result;\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const result = new Matrix(m1.rows, m2.cols);\n  result.data = MatrixElementWiseAdd(\n    m1.data,\n    m1.rows,\n    m1.cols,\n    m2.data,\n    m2.rows,\n    m2.cols\n  );\n\n  return result;\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix) => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const result = new Matrix(m1.rows, m2.cols);\n  result.data = MatrixElementWiseSubtract(\n    m1.data,\n    m1.rows,\n    m1.cols,\n    m2.data,\n    m2.rows,\n    m2.cols\n  );\n\n  return result;\n};\n\nexport const resize = (m1: Matrix, rows: number, cols: number): void => {\n  m1.resize(rows, cols);\n};\n\nexport const fillRandom = (m1: Matrix, i: number): void => {\n  m1.forEach(() => Math.random() * Math.sqrt(2.0 / i));\n};\n\nexport const forEach = (\n  m1: Matrix,\n  callback: (x: number) => number\n): Matrix => {\n  return m1.forEach(callback);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const result = new Matrix(m1.rows, m1.cols);\n  result.data = MatrixElementWiseMultiply(\n    m1.data,\n    m1.rows,\n    m1.cols,\n    m2.data,\n    m2.rows,\n    m2.cols\n  );\n\n  return result;\n};\n\nexport const sum = (m: Matrix): number => {\n  let sum = 0.0;\n\n  m.forEach((x) => {\n    sum += x;\n  });\n\n  return sum;\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const colwise = (\n  m: Matrix,\n  callback: (colVector: Matrix) => number\n): Matrix => {\n  const result = new Matrix(1, m.cols);\n  for (let col = 0; col < m.cols; col++) {\n    const rowMatrix = new Matrix(m.rows, 1);\n    for (let row = 0; row < m.rows; row++) {\n      rowMatrix.data[row] = m.data[row * m.cols + col];\n    }\n    result.data[col] = callback(rowMatrix);\n  }\n  return result;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix) => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const result = new Matrix(m1.rows, m1.cols);\n  result.data = MatrixElementWiseDivide(\n    m1.data,\n    m1.rows,\n    m1.cols,\n    m2.data,\n    m2.rows,\n    m2.cols\n  );\n\n  return result;\n};\n\nexport const replicateRows = (m: Matrix, numRows: number) => {\n  const result = new Matrix(numRows, m.cols);\n  for (let row = 0; row < result.rows; row++) {\n    for (let col = 0; col < result.cols; col++) {\n      const index = row * result.cols + col;\n      result.data[index] = m.data[col];\n    }\n  }\n  return result;\n};\n","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, subtract } from \"./math/matrix\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = subtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      // delta = layer.backpropagation.propagate(X, m, regularization, delta)\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n}\n\nexport { Builder1D };\nexport default Builder1D;\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected previousLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.previousLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.previousLayer);\n    }\n\n    layer.configure();\n\n    this.network.addLayer(layer);\n    this.previousLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import { SoftmaxLayer, LogisticLayer } from \"./layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic,\n  softmax,\n}\n\nexport type Layers = LogisticLayer | SoftmaxLayer;\nexport type Layers1D = LogisticLayer | SoftmaxLayer;\nexport type Layers2D = null;\n","import { add, Matrix, multiply } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = add(multiply(this.W, input), this.b);\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  abstract transition(previousLayer: Layers);\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, resize } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    resize(this.W, this.height, this.width);\n    fillRandom(this.W, this.width);\n\n    resize(this.b, this.height, 1);\n    fillRandom(this.b, this.width);\n\n    resize(this.gW, this.height, this.width);\n    resize(this.gb, this.height, 1);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers) {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import {\n  colwise,\n  elementWiseDivide,\n  forEach,\n  Matrix,\n  replicateRows,\n  subtract,\n  sum,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    const t = m.forEach((x) => Math.exp(x));\n    const divider = replicateRows(\n      colwise(t, (colVector) => {\n        return sum(colVector);\n      }),\n      t.rows\n    );\n    return elementWiseDivide(t, divider);\n  }\n\n  derivative(): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    const loss = subtract(\n      output,\n      forEach(predictions, (x) => Math.log(x))\n    );\n    return sum(loss);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { add, elementWiseMultiply, forEach, Matrix, sum } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return forEach(m, (x) => {\n      return 1.0 / (1.0 + Math.exp(-x));\n    });\n  }\n\n  derivative(): Matrix {\n    return elementWiseMultiply(\n      this.A,\n      forEach(this.A, (x) => {\n        return 1.0 - x;\n      })\n    );\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    const loss: Matrix = add(\n      elementWiseMultiply(\n        output,\n        forEach(predictions, (x) => {\n          return Math.log(x);\n        })\n      ),\n      elementWiseMultiply(\n        forEach(output, (x) => {\n          return 1.0 - x;\n        }),\n        forEach(predictions, (x) => {\n          return Math.log(1.0 - x);\n        })\n      )\n    );\n\n    return sum(loss);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n"],"names":["process","dlopen","module","__dirname","error","Error","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","id","loaded","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","nmd","paths","children","p","Matrix","rows","cols","this","resize","data","Array","callback","i","newValue","multiply","m1","m2","result","MatrixMultiply","add","MatrixElementWiseAdd","subtract","MatrixElementWiseSubtract","fillRandom","forEach","Math","random","sqrt","elementWiseMultiply","MatrixElementWiseMultiply","sum","m","x","Network","dimensions","layer","size","layers","push","input","output","forward","X","Y","predictions","regularization","reverse","Builder1D","setWidth","AbstractBuilder","dimension","network","type","previousLayer","firstLayerTransition","transition","configure","addLayer","LayerType","AbstractLayer","W","b","A","Z","gW","gb","activation","width","height","depth","AbstractLayer1D","is1D","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","SoftmaxLayer","t","exp","MatrixElementWiseDivide","elementWiseDivide","numRows","row","col","index","replicateRows","rowMatrix","colwise","softmax","loss","log","LogisticLayer","logistic"],"sourceRoot":""}