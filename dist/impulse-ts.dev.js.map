{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/builder3d.tsx","webpack://impulse-ts/./src/typescript/dataset/Dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/abstract3d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationto3dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtoconv.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtomaxpool.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/factory.tsx","webpack://impulse-ts/./src/typescript/layer/conv.tsx","webpack://impulse-ts/./src/typescript/layer/fullyconnected.tsx","webpack://impulse-ts/./src/typescript/layer/index.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/maxpool.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/trainer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/minibatch.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/adam.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/gradientdescent.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.tsx"],"sourcesContent":["import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/factory\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    // @ts-ignore\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(\n      BackpropagationFactory.create(this.lastLayer, layer)\n    );\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { ConvLayer } from \"../layer/conv\";\nimport { MaxPoolLayer } from \"../layer/maxpool\";\n\nclass Builder3D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setSize(this.dimensions);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder3D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            layerClass = ConvLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {});\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder3D };\n","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize: number = 0;\n  public numberOfExamples: number = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = Number(arr[example][dataIndex] || 0);\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    const data = [];\n    for (let dataIndex = 0; dataIndex < this.exampleSize; dataIndex += 1) {\n      data[dataIndex] = [];\n      data[dataIndex][0] = this.data.data[index][dataIndex];\n    }\n\n    return new Matrix(this.exampleSize, 1, data);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix {\n    return this.data.block(0, offset, this.data.rows, batchSize);\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./Dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { elementWiseAdd, Matrix, multiply, penalty } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vB: Matrix;\n  public cB: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vB = new Matrix();\n    this.cB = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(\n      multiply(this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return penalty(this.W);\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(this.height, this.width);\n    this.cW = setZeros(this.cW);\n\n    this.cB.resize(this.height, 1);\n    this.cB = setZeros(this.cB);\n\n    this.vW.resize(this.height, this.width);\n    this.vW = setZeros(this.vW);\n\n    this.vB.resize(this.height, 1);\n    this.vB = setZeros(this.cB);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./abstract\";\nimport { Dimension } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure() {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: AbstractLayer): AbstractLayer3D {\n    if (previousLayer.is3D()) {\n      this.setSize([\n        previousLayer.getOutputWidth(),\n        previousLayer.getOutputHeight(),\n        previousLayer.getOutputDepth(),\n      ]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension) {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n  }\n\n  getSize(): Dimension {\n    return [\n      this.getOutputWidth(),\n      this.getOutputHeight(),\n      this.getOutputDepth(),\n    ];\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport {\n  elementWiseAdd,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  Matrix,\n  multiply,\n} from \"../../math/matrix\";\nimport { elementWiseDivideNumber } from \"../../math/matrix\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = multiply(sigma, previousActivations.transpose().conjugate());\n    this.layer.gW = elementWiseAdd(\n      elementWiseDivideNumber(delta, numberOfExamples),\n      elementWiseMultiplyNumber(this.layer.W, regularization / numberOfExamples)\n    );\n    this.layer.gb = elementWiseDivideNumber(\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return elementWiseMultiply(\n        multiply(this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation1dto1d\";\nimport { Backpropagation3Dto1D } from \"./backpropagationto3dto1d\";\nimport { BackpropagationToMaxPool } from \"./backpropagationtomaxpool\";\nimport { BackpropagationToConv } from \"./backpropagationtoconv\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers) {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (\n        previousLayer.is1D() ||\n        previousLayer.getType() == LayerType.fullyconnected\n      ) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import {\n  Matrix,\n  fillRandom,\n  setZeros,\n  reluActivation,\n  reluDerivative,\n  im2col,\n  elementWiseAdd,\n  multiply,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\n\nclass ConvLayer extends AbstractLayer3D {\n  protected numFilters: number = 32;\n  protected filterSize: number = 4;\n  protected padding: number = 1;\n  protected stride: number = 1;\n\n  configure() {\n    this.W.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.W = fillRandom(this.W, this.width * this.height * this.depth);\n\n    this.b.resize(this.numFilters, 1);\n    this.b = fillRandom(this.b, 0.01);\n\n    this.gW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.cW = setZeros(this.gb);\n\n    this.cB.resize(this.numFilters, 1);\n    this.cB = setZeros(this.cB);\n\n    this.vW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.vW = setZeros(this.vW);\n\n    this.vB.resize(this.numFilters, 1);\n    this.vB = setZeros(this.vB);\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = elementWiseAdd(\n        multiply(this.W, conv),\n        this.b.replicate(1, input.cols)\n      ).rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { ConvLayer };\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure() {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\n          \"Invalid usage. Cannot fully connect with previous non maxpool layer.\"\n        );\n      }\n    } else {\n      throw new Error(\n        \"Invalid usage. Cannot fully connect with previous 1D layer.\"\n      );\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { SoftmaxLayer } from \"./softmax\";\nimport { LogisticLayer } from \"./logistic\";\nimport { TanhLayer } from \"./tanh\";\nimport { ReluLayer } from \"./relu\";\nimport { SoftplusLayer } from \"./softplus\";\nimport { ConvLayer } from \"./conv\";\nimport { FullyConnectedLayer } from \"./fullyconnected\";\nimport { MaxPoolLayer } from \"./maxpool\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n};\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return logisticDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix, maxpool } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\nimport { BackpropagationToMaxPool } from \"./backpropagation/backpropagationtomaxpool\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize: number;\n  stride: number;\n\n  configure() {\n    this.backPropagation = new BackpropagationToMaxPool(\n      this,\n      this.previousLayer\n    );\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix, reluActivation, reluDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix, softplusActivation, softplusDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softplusActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return softplusDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix, tanhActivation, tanhDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return tanhActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return tanhDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows, cols): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    const kernel = gpu\n      .createKernel(function (a) {\n        return a[this.thread.y][this.thread.x];\n      })\n      .setOutput([this.cols, this.rows]);\n\n    return new Matrix(this.cols, this.rows, kernel(this.data) as number[][]);\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row][col] = tmp.data[row][0];\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      // @ts-ignore\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const sum = (m: Matrix): number => {\n  return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols =\n    ((width - kernel_w + 2 * pad_w) / stride_w + 1) *\n    ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = setZeros(new Matrix(rows, cols));\n\n  for (\n    let boundingY = -pad_h;\n    boundingY + kernel_h <= height + pad_h;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = -pad_w;\n      boundingX + kernel_w <= width + pad_w;\n      boundingX += stride_w\n    ) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (\n              boundingY + y >= 0 &&\n              boundingX + x >= 0 &&\n              boundingX + x < width &&\n              boundingY + y < height\n            ) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[\n                  (y + boundingY) * width + boundingX + x + inputOffset\n                ][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = setZeros(\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  );\n\n  for (\n    let boundingY = 0;\n    boundingY + kernel_h <= height;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = 0;\n      boundingX + kernel_w <= width;\n      boundingX += stride_w\n    ) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(\n              _max,\n              input.data[\n                inputOffset + (y + boundingY) * width + boundingX + x\n              ][0]\n            );\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { Dataset } from \"./dataset/Dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      delta = layer.getBackPropagation().propagate(X, m, regularization, delta);\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number) {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        dimensions: [\n          layer.getOutputHeight(),\n          layer.getOutputWidth(),\n          layer.getOutputDepth(),\n        ],\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import Network from \"../network\";\nimport { AbstractOptimizer } from \"./optimizer/abstract\";\nimport { Dataset } from \"../dataset/Dataset\";\n\nexport abstract class AbstractTrainer {\n  network: Network = null;\n  optimizer: AbstractOptimizer = null;\n  regularization: number = 0;\n  iterations: number = 1000;\n  learningRate: number = 0.1;\n  verbose: boolean = true;\n  verboseStep: number = 1;\n  stepCallback: Function = () => null;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: Function): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset) {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (\n      let batch = 0, offset = 0;\n      batch < numberOfExamples;\n      batch += batchSize, offset += 1\n    ) {\n      const predictedOutput = this.network.forward(\n        inputDataset.getBatch(offset, batchSize)\n      );\n      const correctOutput = outputDataset.getBatch(offset, batchSize);\n\n      const miniBatchSize = correctOutput.cols;\n\n      let loss = this.network.loss(correctOutput, predictedOutput);\n      let error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss +\n          (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = predictedOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    const result = {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n\n    return result;\n  }\n}\n","import { AbstractTrainer } from \"./abstract\";\nimport { Dataset } from \"../dataset/Dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize: number = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset) {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += this.batchSize, offset += this.batchSize\n      ) {\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input);\n\n        this.network.backward(input, output, forward, this.regularization);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.setT(++t);\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset + 1} / ${Math.ceil(\n              numberOfExamples / this.batchSize\n            )} | Time: ${endIterationTime - startIterationTime} ms.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${endTime - startTime} ms.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback({\n          iteration: i,\n        });\n      }\n    }\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize: number = 0;\n  protected t: number = 0;\n  protected learningRate: number = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers);\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseAdd,\n  elementWiseDivide,\n  elementWiseDivideNumber,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n  sqrt,\n} from \"../../math/matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number) {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n    const epsilon = 1e-8;\n\n    layer.vW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const wCorrected = elementWiseDivideNumber(\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    );\n\n    layer.cW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const sCorrected = sqrt(\n      elementWiseMultiplyNumber(layer.cW, 1 - Math.pow(beta2, t))\n    );\n\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(wCorrected, sCorrected),\n        learningRate\n      )\n    );\n\n    layer.vB = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vB, beta1),\n      elementWiseMultiplyNumber(layer.gb, 1 - beta1)\n    );\n    const wCorrected2 = elementWiseDivideNumber(\n      layer.vB,\n      1 - Math.pow(beta1, t)\n    );\n    layer.cB = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cB, beta2),\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(layer.gb, layer.gb),\n        1 - beta2\n      )\n    );\n    const sCorrected2 = sqrt(\n      elementWiseDivideNumber(layer.cB, 1 - Math.pow(beta2, t))\n    );\n\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(\n        elementWiseDivide(wCorrected2, sCorrected2),\n        learningRate\n      )\n    );\n  }\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n} from \"../../math/matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number) {\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(layer.gW, learningRate)\n    );\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(layer.gb, learningRate)\n    );\n  }\n}\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/conv\";\nimport { MaxPoolLayer } from \"./layer/maxpool\";\nimport { FullyConnectedLayer } from \"./layer/fullyconnected\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"fs\");","module.exports = require(\"gpu.js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Builder1D } from \"./builder/builder1d\";\nimport { Builder3D } from \"./builder/builder3d\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/matrix\";\nimport {\n  multiply as matrixMultiply,\n  sum as matrixSum,\n  fillRandom as matrixFillRandom,\n  elementWiseMultiply as matrixElementWiseMultiply,\n  elementWiseDivide as matrixElementWiseDivide,\n  elementWiseAdd as matrixElementWiseAdd,\n  elementWiseSubtract as matrixElementWiseSubtract,\n} from \"./math/matrix\";\nimport { DatasetBuilder } from \"./dataset/DatasetBuilder\";\nimport { OptimizerAdam } from \"./trainer/optimizer/adam\";\nimport { OptimizerGradientDescent } from \"./trainer/optimizer/gradientdescent\";\nimport { MiniBatchTrainer } from \"./trainer/minibatch\";\n\nconst Builders = { Builder1D, Builder3D };\nconst Math = {\n  Matrix,\n  matrixMultiply,\n  matrixSum,\n  matrixFillRandom,\n  matrixElementWiseMultiply,\n  matrixElementWiseDivide,\n  matrixElementWiseAdd,\n  matrixElementWiseSubtract,\n};\nconst Layers = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst Dataset = {\n  DatasetBuilder,\n};\nconst Optimizers = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainers = {\n  MiniBatchTrainer,\n};\n\nexport { Builders, Math, Layers, Dataset, Optimizers, Trainers };\n"],"names":["Network","BackpropagationFactory","AbstractBuilder","dimension","dimensions","network","type","callback","layer","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","fs","LogisticLayer","ReluLayer","SoftmaxLayer","SoftplusLayer","TanhLayer","Builder1D","setWidth","jsonPath","Promise","resolve","reject","readFile","err","data","json","JSON","parse","toString","builder","forEach","layerData","layerClass","createLayer","setSize","getNetwork","getLayers","i","W","b","ConvLayer","MaxPoolLayer","Builder3D","setFilterSize","setStride","setNumFilters","setPadding","Matrix","Dataset","exampleSize","numberOfExamples","arr","example","dataIndex","Number","index","offset","batchSize","block","rows","csvtojson","DatasetBuilder","csvPath","noheader","output","fromFile","then","length","dataset","elementWiseAdd","multiply","penalty","AbstractLayer","A","Z","gW","gb","vW","cW","vB","cB","backPropagation","input","replicate","cols","activation","value","width","height","depth","previousLayer","fillRandom","setZeros","AbstractLayer1D","resize","is1D","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setDepth","AbstractBackPropagation","elementWiseMultiply","elementWiseMultiplyNumber","elementWiseDivideNumber","Backpropagation1Dto1D","regularization","sigma","previousActivations","delta","transpose","conjugate","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToConv","BackpropagationToMaxPool","LayerType","getType","conv","maxpool","fullyconnected","reluActivation","reluDerivative","im2col","numFilters","filterSize","padding","stride","size","result","col","tmp","rollToColMatrix","setCol","m","predictions","Error","FullyConnectedLayer","logisticActivation","logisticDerivative","logisticLoss","logistic","pool","relu","softmaxActivation","softmaxLoss","softmax","softplusActivation","softplusDerivative","softplus","tanhActivation","tanhDerivative","tanh","GPU","gpu","mode","generateData","row","Array","Float32Array","ArrayBuffer","view","DataView","num","setFloat64","sum","oldData","newData","kernel","createKernel","a","thread","y","x","setOutput","maxIndex","max","Infinity","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","m1","m2","constants","setConstants","elementWiseSubtract","parameter","Math","random","sqrt","number","elementWiseDivide","exp","divider","colwiseSum","log","kernel2","kernel3","pow","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","inputOffset","resultWidth","resultHeight","resultDepth","_max","outputOffset","layers","push","forward","X","Y","reverse","getBackPropagation","propagate","loss","error","path","resultJSON","weights","stringify","writeFile","console","AbstractTrainer","optimizer","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","numBatches","ceil","cost","accuracy","batch","predictedOutput","getBatch","correctOutput","miniBatchSize","index1","colMaxCoeffIndex","index2","MiniBatchTrainer","startTime","Date","getTime","t","startIterationTime","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractOptimizer","OptimizerAdam","adam","beta1","beta2","epsilon","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","matrixMultiply","matrixSum","matrixFillRandom","matrixElementWiseMultiply","matrixElementWiseDivide","matrixElementWiseAdd","matrixElementWiseSubtract","Builders","Layers","Optimizers","Trainers"],"sourceRoot":""}