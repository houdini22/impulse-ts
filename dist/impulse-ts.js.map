{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].backpropagation(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = sigma.dot(previousActivations.transpose()).divide(numberOfExamples);\n    this.layer.gW = this.layer.gW.add(this.layer.W.multiply(regularization).divide(numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        console.log(\n          this.layer.W.rows,\n          this.layer.W.cols,\n          sigma.rows,\n          sigma.cols,\n          this.layer.gW.rows,\n          this.layer.gW.cols\n        );\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n\n  abstract backpropagation(delta: Matrix): Matrix;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    const max = m.max();\n    return m\n      .forEach((num) => num - max)\n      .exp()\n      .divide(m.rowwiseSum().replicate(1, m.cols).transpose());\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m\n      .exp()\n      .subtract(m.multiply(-1).exp())\n      .divide(m.exp().add(m.multiply(-1).exp()));\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  backpropagation(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  backpropagation(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.gW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.gb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.gW.multiply(this.beta2).add(layer.gW.multiply(1 - this.beta2));\n    layer.sb = layer.gb.multiply(this.beta2).add(layer.gb.multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - this.beta1);\n    const vbCorrected = layer.vb.divide(1 - this.beta1);\n\n    const sWcorrected = layer.sW.divide(1 - this.beta2);\n    const sbCorrected = layer.sb.divide(1 - this.beta2);\n\n    layer.W = layer.W.subtract(vWCorrected.multiply(learningRate).divide(sWcorrected.add(1e-8)));\n    layer.b = layer.b.subtract(vbCorrected.multiply(learningRate).divide(sbCorrected.add(1e-8)));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW).sqrt());\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db).sqrt());\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(X: Matrix, Y: Matrix): CostResult {\n    const numberOfExamples = X.cols;\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(X);\n    const correctOutput = Y;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = Y.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * X.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input.data, output.data);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdagrad, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","LayerType","Network","dimensions","this","layer","size","layers","push","input","output","forEach","forward","X","Y","predictions","regularization","m","cols","sigma","subtract","length","getBackPropagation","propagate","backpropagation","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractBackPropagation","previousLayer","AbstractComputation","name","func","kernels","Error","args","apply","gpu","GPU","mode","elementWiseDivide","m1","m2","rows","kernel","createKernel","a","thread","x","y","setOutput","Matrix","divideNumber","num","constants","number","setConstants","softmaxActivation","Math","exp","divider","colwiseSum","replicate","softmaxLoss","log","elementWiseMultiply","sum","logisticActivation","logisticLoss","kernel2","kernel3","add","tanhActivation","reluActivation","max","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","i","fillRandom","parameter","random","fillZeros","multiplyNumber","transpose","ComputationGPU","addKernel","row","col","firstMatrix","sub","toMultiply2","toMultiply1","subtractFromNumber","logisticBackpropagation","oldY","multiply","minusOne","reluBackpropagation","Array","logMinusOne","addNumber","ComputationCPU","currentComputation","getComputation","resize","generateData","arr","Float32Array","Number","NaN","t","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","numberOfElements","cb","Backpropagation1Dto1D","numberOfExamples","previousActivations","A","gW","divide","gb","rowwiseSum","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","vb","sW","sb","dW","db","backPropagation","activation","width","height","depth","AbstractLayer1D","setRandom","setZeros","setWidth","is3D","setHeight","SoftmaxLayer","softmax","delta","fraction","LogisticLayer","logistic","TanhLayer","tanh","ReluLayer","setMax","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","dataset","AbstractOptimizer","learningRate","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWcorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerAdagrad","adadelta","OptimizerMomentum","momentum","beta","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","accuracy","correctOutput","cost","colMaxCoeffIndex","MiniBatchTrainer","inputDataset","outputDataset","getNumberOfExamples","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","Trainer","AbstractDatasetModifier","CallbackDatabaseModifier","example","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","TrainerTrainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource"],"sourceRoot":""}