{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/Dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows, cols): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols).map(() => {\n        return 0;\n      });\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols).map(() => {\n        return 0;\n      });\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    const oldData = this.data;\n    const kernel = gpu\n      .createKernel(function (a) {\n        return a[this.thread.y][this.thread.x];\n      })\n      .setOutput([this.cols, this.rows]);\n\n    this.resize(this.cols, this.rows);\n    this.generateData(kernel(oldData) as number[][]);\n\n    return this;\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\"DIMENSIONS error.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data));\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data));\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data));\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel());\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel());\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data));\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data));\n};\n\nexport const sum = (m: Matrix): number => {\n  return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data));\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data));\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data));\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(predictions.data))\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data));\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { Dataset } from \"./dataset/Dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      delta = layer.getBackPropagation().propagate(X, m, regularization, delta);\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        dimensions: [\n          layer.getOutputHeight(),\n          layer.getOutputWidth(),\n          layer.getOutputDepth(),\n        ],\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../main\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\nexport default Builder1D;\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer;\nexport type Layers1D = LogisticLayer | SoftmaxLayer | TanhLayer;\nexport type Layers3D = null;\n","import { elementWiseAdd, Matrix, multiply } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(\n      multiply(this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): void {\n    this.previousLayer = previousLayer;\n  }\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractBackPropagation } from \"./abstract\";\nimport {\n  elementWiseAdd,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  Matrix,\n  multiply,\n} from \"../../math/matrix\";\nimport { elementWiseDivideNumber } from \"../../math/matrix\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = multiply(sigma, previousActivations.transpose().conjugate());\n    this.layer.gW = elementWiseAdd(\n      elementWiseDivideNumber(delta.rowwiseSum(), numberOfExamples),\n      elementWiseMultiplyNumber(this.layer.W, regularization / numberOfExamples)\n    );\n    this.layer.gb = elementWiseDivideNumber(\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return elementWiseMultiply(\n        multiply(this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { Layers } from \"../../types\";\nimport {Matrix} from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n      input: Matrix,\n      numberOfExamples: number,\n      regularization: number,\n      sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation/backpropagation1dto1d\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n\n    this.backPropagation = new Backpropagation1Dto1D(this, this.previousLayer);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers) {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return logisticDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix, tanhActivation, tanhDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return tanhActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return tanhDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix, reluActivation, reluDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix, softplusActivation, softplusDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softplusActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return softplusDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize: number = 0;\n  public numberOfExamples: number = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = Number(arr[example][dataIndex] || 0);\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    const data = [];\n    for (let dataIndex = 0; dataIndex < this.exampleSize; dataIndex += 1) {\n      data[dataIndex] = [];\n      data[dataIndex][0] = this.data.data[index][dataIndex];\n    }\n\n    return new Matrix(this.exampleSize, 1, data);\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./Dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","gpu","require","GPU","mode","Matrix","rows","cols","data","this","resize","generateData","row","Array","map","arr","col","Float32Array","result","ArrayBuffer","view","DataView","forEach","num","i","setFloat64","sum","oldData","newData","kernel","createKernel","a","thread","y","x","setOutput","multiply","m1","m2","Error","b","constants","setConstants","elementWiseAdd","elementWiseSubtract","fillRandom","parameter","Math","random","sqrt","setZeros","elementWiseMultiply","m","elementWiseDivide","elementWiseDivideNumber","number","Network","dimensions","layer","size","layers","push","input","output","forward","X","Y","predictions","regularization","delta","reverse","getBackPropagation","propagate","length","loss","path","resultJSON","type","getType","getOutputHeight","getOutputWidth","getOutputDepth","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","error","Builder1D","jsonPath","json","parse","toString","builder","layerData","layerClass","LogisticLayer","SoftmaxLayer","ReluLayer","SoftplusLayer","TanhLayer","createLayer","setSize","network","getNetwork","getLayers","setWidth","AbstractBuilder","dimension","callback","lastLayer","firstLayerTransition","transition","configure","addLayer","LayerType","AbstractLayer","A","Z","gW","gb","backPropagation","replicate","activation","width","height","depth","previousLayer","Backpropagation1Dto1D","numberOfExamples","sigma","previousActivations","transpose","conjugate","rowwiseSum","derivative","AbstractLayer1D","is1D","getSize","is3D","setHeight","exp","divider","colwiseSum","softmaxActivation","softmax","log","softmaxLoss","logisticActivation","logisticDerivative","logistic","kernel2","kernel3","logisticLoss","tanhActivation","pow","tanhDerivative","tanh","max","reluActivation","reluDerivative","relu","softplusActivation","softplusDerivative","softplus","Dataset","exampleSize","example","dataIndex","Number","index","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset"],"sourceRoot":""}