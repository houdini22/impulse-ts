{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/Dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import {GPU, input} from \"gpu.js\";\n\nexport const gpu = new GPU({mode: \"gpu\"});\n\nexport class Matrix {\n    public rows = 0;\n    public cols = 0;\n    public data = null;\n\n    constructor(rows = 0, cols = 0, data = null) {\n        this.resize(rows, cols);\n        if (data) {\n            this.generateData(data);\n        }\n    }\n\n    resize(rows, cols): Matrix {\n        this.rows = rows;\n        this.cols = cols;\n        this.data = Float64Array.from(new Array(rows));\n        for (let row = 0; row < this.rows; row += 1) {\n            this.data[row] = Float64Array.from(new Array(cols));\n        }\n\n        return this;\n    }\n\n    generateData(arr: number[][]): Matrix {\n        this.data = Float64Array.from(new Array(arr.length));\n        for (let row = 0; row < arr.length; row += 1) {\n            this.data[row] = Float64Array.from(new Array(arr[0].length));\n        }\n        return this;\n    }\n\n    toBuffer(): ArrayBuffer {\n        const result = new ArrayBuffer(this.rows * this.cols * 64);\n        const view = new DataView(result, 0, this.rows * this.cols * 64);\n        this.data.forEach((num, i) => {\n            view.setFloat64(i, num);\n        })\n        return result;\n    }\n\n    sum(): number {\n        let sum = 0.0;\n        for (let row = 0; row < this.rows; row += 1) {\n            for (let col = 0; col < this.cols; col += 1) {\n                sum += this.data[row][col];\n            }\n        }\n        return sum;\n    }\n\n    colwiseSum(): Matrix {\n        const data = new Array(this.rows);\n        for (let row = 0; row < this.rows; row += 1) {\n            let sum = 0.0;\n            for (let col = 0; col < this.cols; col += 1) {\n                sum += this.data[row][col];\n            }\n            data[row] = sum;\n        }\n        return new Matrix(this.rows, 1, data)\n    }\n\n    replicate(rows: number, cols: number): Matrix {\n        for (let row = 0; row < this.rows; row += 1) {\n\n        }\n        return this;\n    }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n    if (m1.cols !== m2.rows) {\n        throw new Error(\"DIMENSIONS error.\");\n    }\n\n    const gpu = new GPU();\n    const kernel = gpu.createKernel(function (a, b) {\n        let sum = 0;\n        for (let i = 0; i < this.constants.cols; i++) {\n            sum += a[this.thread.x][i] * b[i][this.thread.y];\n        }\n        return sum;\n    }).setOutput([m1.rows, m2.cols]).setConstants({\n        cols: m1.rows,\n    });\n\n    const data = kernel(m1.data, m2.data);\n    return new Matrix(m1.rows, m2.cols, Array.from(data));\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n    if (m1.rows !== m2.rows) {\n        throw new Error(\"ROWS number not equal.\");\n    }\n    if (m1.cols !== m2.cols) {\n        throw new Error(\"COLS number not equal.\");\n    }\n\n    const gpu = new GPU();\n    const kernel = gpu.createKernel(function (a, b) {\n        return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    }).setOutput([m1.rows, m2.cols])\n    const data = kernel(m1.data, m2.data);\n    const result = new Matrix(m1.rows, m2.cols, Array.from(data));\n\n    return result;\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n    if (m1.rows !== m2.rows) {\n        throw new Error(\"ROWS number not equal.\");\n    }\n    if (m1.cols !== m2.cols) {\n        throw new Error(\"COLS number not equal.\");\n    }\n\n    const gpu = new GPU();\n    const kernel = gpu.createKernel(function (a, b) {\n        return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    }).setOutput([m1.rows, m2.cols])\n    const data = kernel(m1.data, m2.data);\n    const result = new Matrix(m1.rows, m2.cols, Array.from(data));\n\n    return result;\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n    const kernel = gpu.createKernel(function () {\n        return Math.random() * Math.sqrt(2.0 / this.constants.parameter);\n    }).setOutput([m1.rows, m1.cols]).setConstants({\n        parameter\n    })\n    const data = kernel();\n    const result = new Matrix(m1.rows, m1.cols, Array.from(data));\n\n    return result;\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n    const kernel = gpu.createKernel(function () {\n        return 0.0;\n    }).setOutput([m1.rows, m1.cols])\n    const data = kernel();\n    const result = new Matrix(m1.rows, m1.cols, Array.from(data));\n\n    return result;\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n    if (m1.rows !== m2.rows) {\n        throw new Error(\"ROWS number not equal.\");\n    }\n    if (m1.cols !== m2.cols) {\n        throw new Error(\"COLS number not equal.\");\n    }\n\n    const kernel = gpu.createKernel(function (a, b) {\n        return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    }).setOutput([m1.rows, m2.cols])\n    const data = kernel(m1.data, m2.data);\n    const result = new Matrix(m1.rows, m2.cols, Array.from(data));\n\n    return result;\n};\n\nexport const sum = (m: Matrix): number => {\n    return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n    return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n    if (m1.rows !== m2.rows) {\n        throw new Error(\"ROWS number not equal.\");\n    }\n    if (m1.cols !== m2.cols) {\n        throw new Error(\"COLS number not equal.\");\n    }\n\n    const kernel = gpu.createKernel(function (a, b) {\n        return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    }).setOutput([m1.rows, m2.cols])\n    const data = kernel(m1.data, m2.data);\n    const result = new Matrix(m1.rows, m2.cols, Array.from(data));\n\n    return result;\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n    const kernel = gpu.createKernel(function (a) {\n        return Math.exp(a[this.thread.x][this.thread.y]);\n    }).setOutput([m.rows, m.cols]);\n    const data = new Matrix(m.rows, m.cols, Array.from(kernel(m.data)));\n    const divider = new Matrix(m.rows, 1, data.colwiseSum().data).replicate(m.rows, 1);\n    const result = new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n    return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n    const kernel = gpu.createKernel(function (a) {\n        return Math.log(a[this.thread.x][this.thread.y]);\n    }).setOutput([predictions.rows, predictions.cols]);\n    const data = kernel(predictions.data);\n    const result = new Matrix(output.rows, output.cols, elementWiseMultiply(output, data).data);\n    return result.sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n    const kernel = gpu.createKernel(function (a) {\n        return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    }).setOutput([m.rows, m.cols]);\n    const data = kernel(m.data);\n    const result = new Matrix(m.rows, m.cols, Array.from(data));\n    return result;\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n    const kernel = gpu.createKernel(function (a) {\n        return a[this.thread.x][this.thread.y] * (1.0 - a[this.thread.x][this.thread.y]);\n    }).setOutput([m.rows, m.cols]);\n    const data = kernel(m.data);\n    const result = new Matrix(m.rows, m.cols, Array.from(data));\n    return result;\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n    const kernel = gpu.createKernel(function (a) {\n        return Math.log(a[this.thread.x][this.thread.y]);\n    }).setOutput([output.rows, output.cols]);\n    const predictionsLog = new Matrix(output.rows, output.cols, kernel(input(output.data, [output.rows, output.cols])) as number[]);\n\n    const kernel2 = gpu.createKernel(function (a) {\n        return 1.0 - a[this.thread.x][this.thread.y];\n    }).setOutput([output.rows, output.cols]);\n    const outputOne = new Matrix(output.rows, output.cols, kernel2(output.data) as number[]);\n\n    const kernel4 = gpu.createKernel(function (a) {\n        return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    }).setOutput([predictions.rows, predictions.cols]);\n    const predictionsMinusLog = new Matrix(predictions.rows, predictions.cols, kernel4(predictions.data) as number[]);\n\n    const toAdd = elementWiseMultiply(output, predictionsLog);\n    const toAdd2 = elementWiseMultiply(outputOne, predictionsMinusLog);\n    return elementWiseAdd(toAdd, toAdd2).sum()\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport {Dataset} from \"./dataset/Dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      // delta = layer.backpropagation.propagate(X, m, regularization, delta)\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        dimensions: [\n          layer.getOutputHeight(),\n          layer.getOutputWidth(),\n          layer.getOutputDepth(),\n        ],\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n}\n\nexport { Builder1D };\nexport default Builder1D;\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected previousLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.previousLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.previousLayer);\n    }\n\n    layer.configure();\n\n    this.network.addLayer(layer);\n    this.previousLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import { SoftmaxLayer, LogisticLayer } from \"./layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n}\n\nexport type Layers = LogisticLayer | SoftmaxLayer;\nexport type Layers1D = LogisticLayer | SoftmaxLayer;\nexport type Layers2D = null;\n","import { elementWiseAdd, Matrix, multiply } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(multiply(this.W, input), this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  abstract transition(previousLayer: Layers);\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers) {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(): Matrix {\n    return logisticDerivative(this.A);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import {Matrix} from \"../math/matrix\";\n\nexport class Dataset {\n    public exampleSize: number = 0;\n    public numberOfExamples: number = 0;\n    public data: Matrix = null;\n\n    constructor(exampleSize: number, numberOfExamples: number, arr: number[][]) {\n        this.exampleSize = exampleSize;\n        this.numberOfExamples = numberOfExamples\n        const data = [];\n\n        for (let example = 0; example < numberOfExamples; example += 1) {\n            for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n                data.push(arr[example][dataIndex] || 0);\n            }\n        }\n\n        this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n\n    exampleAt(index: number): Matrix {\n        const data = [[]];\n        for (let dataIndex = 0; dataIndex < this.exampleSize; dataIndex += 1) {\n            data[0][dataIndex] = this.data[dataIndex * index];\n        }\n\n        return new Matrix(this.exampleSize, 1, data);\n    }\n}\n","import * as csvtojson from 'csvtojson'\nimport { Dataset } from './Dataset'\n\nexport class DatasetBuilder {\n    static fromCSV(csvPath: string): Promise<Dataset> {\n        return new Promise((resolve) => {\n            csvtojson({\n                noheader: true,\n                output: \"csv\"\n            })\n                .fromFile(csvPath)\n                .then((arr)=>{\n                    const numberOfExamples = arr.length;\n                    const exampleSize = arr[0].length;\n\n                    const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n                    resolve(dataset);\n                })\n        });\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","gpu","GPU","mode","Matrix","rows","cols","data","this","resize","generateData","Float64Array","from","Array","row","arr","length","result","ArrayBuffer","view","DataView","forEach","num","i","setFloat64","sum","col","multiply","m1","m2","Error","createKernel","a","b","constants","thread","x","y","setOutput","setConstants","kernel","elementWiseAdd","elementWiseSubtract","fillRandom","parameter","Math","random","sqrt","setZeros","elementWiseMultiply","m","elementWiseDivide","Network","dimensions","layer","size","layers","push","input","output","forward","X","Y","predictions","regularization","reverse","loss","path","resultJSON","type","getType","getOutputHeight","getOutputWidth","getOutputDepth","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","error","Builder1D","setWidth","AbstractBuilder","dimension","network","callback","previousLayer","firstLayerTransition","transition","configure","addLayer","LayerType","AbstractLayer","A","Z","gW","gb","replicate","activation","width","height","depth","AbstractLayer1D","is1D","getSize","is3D","setHeight","SoftmaxLayer","exp","divider","colwiseSum","softmaxActivation","softmax","log","softmaxLoss","LogisticLayer","logisticActivation","logistic","predictionsLog","kernel2","outputOne","kernel4","predictionsMinusLog","toAdd","toAdd2","logisticLoss","Dataset","exampleSize","numberOfExamples","example","dataIndex","index","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset"],"sourceRoot":""}