{"version":3,"file":"impulse-ts.js","mappings":"mBACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,ogBCHhD,IAAMC,EAAM,ICFkBC,QAAQ,UDEtBC,KAAI,CAAEC,KAAM,QAEtBC,EAAb,WAKE,aAAyD,IAA7CC,EAA6C,uDAAtC,EAAGC,EAAmC,uDAA5B,EAAGC,EAAyB,uDAAN,KAAM,wBAJ3C,GAI2C,cAH3C,GAG2C,cAF3C,MAGZC,KAAKC,OAAOJ,EAAMC,GACdC,GACFC,KAAKE,aAAaH,G,QARxB,O,EAAA,G,EAAA,qBAYE,SAAOF,EAAMC,GACXE,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,KAAO,GACZ,IAAK,IAAII,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxCH,KAAKD,KAAKI,GAAO,IAAIC,MAAMJ,KAAKF,MAGlC,OAAOE,OApBX,0BAuBE,SAAaK,GACXL,KAAKD,KAAO,GACZ,IAAK,IAAII,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxCH,KAAKD,KAAKI,GAAO,IAAIC,MAAMJ,KAAKF,MAElC,IAAK,IAAIQ,EAAM,EAAGA,EAAMN,KAAKF,KAAMQ,GAAO,EACxC,IAAK,IAAIH,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EAChB,iBAAbE,EAAIC,GACbN,KAAKD,KAAKI,GAAKG,GAAOD,EAAIC,GACjBD,EAAIC,aAAgBC,aAC7BP,KAAKD,KAAKI,GAAKG,GAAOD,EAAIC,GAAKH,GAE/BH,KAAKD,KAAKI,GAAKG,GAAO,EAI5B,OAAON,OAvCX,sBA0CE,WACE,IAAMQ,EAAS,IAAIC,YAAYT,KAAKH,KAAOG,KAAKF,KAAO,IACjDY,EAAO,IAAIC,SAASH,EAAQ,EAAGR,KAAKH,KAAOG,KAAKF,KAAO,IAI7D,OAHAE,KAAKD,KAAKa,SAAQ,SAACC,EAAKC,GACtBJ,EAAKK,WAAWD,EAAGD,MAEdL,IAhDX,iBAmDE,WAEE,IADA,IAAIQ,EAAM,EACDb,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxC,IAAK,IAAIG,EAAM,EAAGA,EAAMN,KAAKF,KAAMQ,GAAO,EACxCU,GAAOhB,KAAKD,KAAKI,GAAKG,GAG1B,OAAOU,IA1DX,wBA6DE,WAEE,IADA,IAAMjB,EAAO,GACJO,EAAM,EAAGA,EAAMN,KAAKF,KAAMQ,GAAO,EAAG,CAE3C,IADA,IAAIU,EAAM,EACDb,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxCa,GAAOhB,KAAKD,KAAKI,GAAKG,GAExBP,EAAKO,GAAO,CAACU,GAEf,OAAO,IAAIpB,EAAO,EAAGI,KAAKF,KAAMC,KAtEpC,wBAyEE,WAEE,IADA,IAAMA,EAAO,GACJI,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EAAG,CAE3C,IADA,IAAIa,EAAM,EACDV,EAAM,EAAGA,EAAMN,KAAKH,KAAMS,GAAO,EACxCU,GAAOhB,KAAKD,KAAKI,GAAKG,GAExBP,EAAKI,GAAO,CAACa,GAEf,OAAO,IAAIpB,EAAOI,KAAKH,KAAM,EAAGE,KAlFpC,uBAqFE,SAAUF,EAAcC,GACtB,IAAMmB,EAAUjB,KAAKD,KACfmB,EAAU,GACZV,EAAS,KACb,GAAa,IAATX,GAA4B,IAAdG,KAAKF,MAAcA,EAAO,EAAG,CAC7CU,EAAS,IAAIZ,EAAOI,KAAKH,KAAMC,GAC/B,IAAK,IAAIK,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EAAG,CAC3Ce,EAAQf,GAAO,GACf,IAAK,IAAIG,EAAM,EAAGA,EAAMR,EAAMQ,GAAO,EACnCY,EAAQf,GAAKG,GAAOW,EAAQd,GAAK,SAGhC,GAAa,IAATL,GAA4B,IAAdE,KAAKH,MAAcA,EAAO,EAAG,CACpDW,EAAS,IAAIZ,EAAOC,EAAMG,KAAKF,MAC/B,IAAK,IAAIK,EAAM,EAAGA,EAAMN,EAAMM,GAAO,EAAG,CACtCe,EAAQf,GAAO,GACf,IAAK,IAAIG,EAAM,EAAGA,EAAMN,KAAKF,KAAMQ,GAAO,EACxCY,EAAQf,GAAKG,GAAOW,EAAQ,GAAGX,IAIrC,OAAIE,GACFA,EAAON,aAAagB,GACbV,GAEFR,OA9GX,uBAiHE,WACE,IAAMmB,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAOA,EAAErB,KAAKsB,OAAOC,GAAGvB,KAAKsB,OAAOE,MAErCC,UAAU,CAACzB,KAAKF,KAAME,KAAKH,OAE9B,OAAO,IAAID,EAAOI,KAAKF,KAAME,KAAKH,KAAMsB,EAAOnB,KAAKD,SAxHxD,uBA2HE,WACE,OAAOC,OA5HX,8BA+HE,SAAiBM,GAIf,IAHA,IAAIoB,GAAY,EACZC,GAAM,IAEDxB,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACpCH,KAAKD,KAAKI,GAAKG,GAAOqB,IACxBA,EAAM3B,KAAKD,KAAKI,GAAKG,GACrBoB,EAAWvB,GAIf,OAAOuB,IA1IX,mBA6IE,SACEE,EACAC,EACAC,EACAC,GAIA,IAFA,IAAMhC,EAAO,GAGPI,EAAMyB,EAAUI,EAAS,EAC7B7B,EAAMH,KAAKH,MAAQM,EAAMyB,EAAWE,EACpC3B,GAAO,EAAG6B,GAAU,EACpB,CACAjC,EAAKI,GAAO,IAAIC,MAAM2B,GACtB,IACE,IAAIzB,EAAMuB,EAAUI,EAAS,EAC7B3B,EAAMN,KAAKF,MAAQQ,EAAMuB,EAAWE,EACpCzB,GAAO,EAAG2B,GAAU,EAEpBlC,EAAKiC,GAAQC,GAAUjC,KAAKD,KAAKI,GAAKG,GAI1C,OAAO,IAAIV,EAAOkC,EAAWC,EAAWhC,KApK5C,iBAuKE,SAAIO,GAEF,IADA,IAAMP,EAAO,GACJI,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxCJ,EAAKI,GAAO,CAACH,KAAKD,KAAKI,GAAKG,IAE9B,OAAO,IAAIV,EAAOI,KAAKH,KAAM,EAAGE,KA5KpC,oBA+KE,SAAOO,EAAa4B,GAClB,IAAK,IAAI/B,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EACxCH,KAAKD,KAAKI,GAAKG,GAAO4B,EAAInC,KAAKI,GAAK,GAEtC,OAAOH,OAnLX,6BAsLE,WAIE,IAHA,IAAMD,EAAO,GAEToC,EAAO,EACFhC,EAAM,EAAGA,EAAMH,KAAKH,KAAMM,GAAO,EAAG,CAC3CJ,EAAKI,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMN,KAAKF,KAAMQ,GAAO,EACxCP,EAAKoC,KAAQ,GAAKnC,KAAKD,KAAKI,GAAKG,GAIrC,OAAO,IAAIV,EAAOI,KAAKH,KAAOG,KAAKF,KAAM,EAAGC,Q,iBAjMhD,KAqMaqC,EAAW,SAACC,EAAYC,GACnC,GAAID,EAAGvC,OAASwC,EAAGzC,KACjB,MAAM,IAAI0C,MAAJ,oCACyBF,EAAGvC,KAD5B,wBACgDwC,EAAGzC,KADnD,MAKR,IAAMsB,EAAS3B,EACZ4B,cAAa,SAAUC,EAAGmB,GAEzB,IADA,IAAIxB,EAAM,EACDF,EAAI,EAAGA,EAAId,KAAKyC,UAAU3C,KAAMgB,IACvCE,GAAOK,EAAErB,KAAKsB,OAAOE,GAAGV,GAAK0B,EAAE1B,GAAGd,KAAKsB,OAAOC,GAEhD,OAAOP,KAERS,UAAU,CAACY,EAAGxC,KAAMyC,EAAGxC,OACvB4C,aAAa,CACZ5C,KAAMuC,EAAGxC,OAGb,OAAO,IAAID,EAAOyC,EAAGxC,KAAMyC,EAAGxC,KAAMqB,EAAOkB,EAAGtC,KAAMuC,EAAGvC,QAG5C4C,EAAiB,SAACN,EAAYC,GACzC,GAAID,EAAGxC,OAASyC,EAAGzC,KACjB,MAAM,IAAI0C,MAAM,0BAElB,GAAIF,EAAGvC,OAASwC,EAAGxC,KACjB,MAAM,IAAIyC,MAAM,0BAGlB,IAAMpB,EAAS3B,EACZ4B,cAAa,SAAUC,EAAGmB,GACzB,OAAOnB,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKiB,EAAExC,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,MAEvEE,UAAU,CAACY,EAAGxC,KAAMyC,EAAGxC,OAE1B,OAAO,IAAIF,EAAOyC,EAAGxC,KAAMyC,EAAGxC,KAAMqB,EAAOkB,EAAGtC,KAAMuC,EAAGvC,QAG5C6C,EAAsB,SAACP,EAAYC,GAC9C,GAAID,EAAGxC,OAASyC,EAAGzC,KACjB,MAAM,IAAI0C,MAAM,0BAElB,GAAIF,EAAGvC,OAASwC,EAAGxC,KACjB,MAAM,IAAIyC,MAAM,0BAGlB,IAAMpB,EAAS3B,EACZ4B,cAAa,SAAUC,EAAGmB,GACzB,OAAOnB,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKiB,EAAExC,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,MAEvEE,UAAU,CAACY,EAAGxC,KAAMyC,EAAGxC,OAE1B,OAAO,IAAIF,EAAOyC,EAAGxC,KAAMyC,EAAGxC,KAAMqB,EAAOkB,EAAGtC,KAAMuC,EAAGvC,QAG5C8C,EAAa,SAACR,EAAYS,GACrC,IAAM3B,EAAS3B,EACZ4B,cAAa,WAEZ,OAAQ2B,KAAKC,SAAW,IAAOD,KAAKE,KAAK,EAAMjD,KAAKyC,UAAUK,cAE/DrB,UAAU,CAACY,EAAGxC,KAAMwC,EAAGvC,OACvB4C,aAAa,CACZI,UAAAA,IAGJ,OAAO,IAAIlD,EAAOyC,EAAGxC,KAAMwC,EAAGvC,KAAMqB,MAGzB+B,EAAW,SAACb,GACvB,IAAMlB,EAAS3B,EACZ4B,cAAa,WACZ,OAAO,KAERK,UAAU,CAACY,EAAGxC,KAAMwC,EAAGvC,OAC1B,OAAO,IAAIF,EAAOyC,EAAGxC,KAAMwC,EAAGvC,KAAMqB,MAYzBgC,EAAsB,SAACd,EAAYC,GAC9C,GAAID,EAAGxC,OAASyC,EAAGzC,KACjB,MAAM,IAAI0C,MAAM,0BAElB,GAAIF,EAAGvC,OAASwC,EAAGxC,KACjB,MAAM,IAAIyC,MAAM,0BAGlB,IAAMpB,EAAS3B,EACZ4B,cAAa,SAAUC,EAAGmB,GACzB,OAAOnB,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKiB,EAAExC,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,MAEvEE,UAAU,CAACY,EAAGxC,KAAMyC,EAAGxC,OAE1B,OAAO,IAAIF,EAAOyC,EAAGxC,KAAMyC,EAAGxC,KAAMqB,EAAOkB,EAAGtC,KAAMuC,EAAGvC,QAG5CqD,EAA4B,SAACf,EAAYxB,GACpD,IAAMM,EAAS3B,EACZ4B,cAAa,SAAUC,GAEtB,OAAOA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKvB,KAAKyC,UAAUY,UAEzD5B,UAAU,CAACY,EAAGxC,KAAMwC,EAAGvC,OACvB4C,aAAa,CACZW,OAAQxC,IAGZ,OAAO,IAAIjB,EAAOyC,EAAGxC,KAAMwC,EAAGvC,KAAMqB,EAAOkB,EAAGtC,QAWnCuD,EAAoB,SAACjB,EAAYC,GAC5C,GAAID,EAAGxC,OAASyC,EAAGzC,KACjB,MAAM,IAAI0C,MAAM,0BAElB,GAAIF,EAAGvC,OAASwC,EAAGxC,KACjB,MAAM,IAAIyC,MAAM,0BAGlB,IAAMpB,EAAS3B,EACZ4B,cAAa,SAAUC,EAAGmB,GACzB,OAAOnB,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKiB,EAAExC,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,MAEvEE,UAAU,CAACY,EAAGxC,KAAMyC,EAAGxC,OAE1B,OAAO,IAAIF,EAAOyC,EAAGxC,KAAMyC,EAAGxC,KAAMqB,EAAOkB,EAAGtC,KAAMuC,EAAGvC,QAG5CwD,EAA0B,SAAClB,EAAYxB,GAClD,IAAMM,EAAS3B,EACZ4B,cAAa,SAAUC,GAEtB,OAAOA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKvB,KAAKyC,UAAUY,UAEzD5B,UAAU,CAACY,EAAGxC,KAAMwC,EAAGvC,OACvB4C,aAAa,CACZW,OAAQxC,IAGZ,OAAO,IAAIjB,EAAOyC,EAAGxC,KAAMwC,EAAGvC,KAAMqB,EAAOkB,EAAGtC,QA0HnCyD,EAAiB,SAACC,GAC7B,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAKpB,IAAI,EAAKN,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAEnDE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,QAGhC2D,EAAiB,SAACD,GAC7B,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAIA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAK,EAC7B,EAEF,KAERE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,QA8BhCkD,EAAO,SAACQ,GACnB,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAKE,KAAK5B,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAK,SAEpDE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,QAmBhC4D,EAAS,SACpBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAUA,IARA,IAIIC,EAAmB,EAEjB9D,EAAS0C,EAAS,IAAItD,EANfqE,EAAWD,EAAWH,IAE/BE,EAAQE,EAAW,EAAIE,GAASE,EAAW,KAC3CP,EAASE,EAAW,EAAIE,GAASE,EAAW,KAM1CG,GAAaL,EACjBK,EAAYP,GAAYF,EAASI,EACjCK,GAAaH,EAEb,IACE,IAAII,GAAaL,EACjBK,EAAYP,GAAYF,EAAQI,EAChCK,GAAaH,EACb,CAEA,IADA,IAAII,EAAmB,EACdC,EAAU,EAAGA,EAAUb,EAAUa,IAExC,IADA,IAAMC,EAAcb,EAASC,EAAQW,EAC5BnD,EAAI,EAAGA,EAAIyC,EAAUzC,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIyC,EAAUzC,IAE1B+C,EAAYhD,GAAK,GACjBiD,EAAYhD,GAAK,GACjBgD,EAAYhD,EAAIuC,GAChBQ,EAAYhD,EAAIuC,IAEhBtD,EAAOT,KAAK0E,GAAkBH,GAC5BV,EAAM7D,MACHwB,EAAIgD,GAAaR,EAAQS,EAAYhD,EAAImD,GAC1C,IAENF,IAINH,IAGJ,OAAO9D,GAGIoE,EAAU,SACrBhB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAG,EACAC,GAWA,IATA,IAAMQ,GAAed,EAAQE,GAAYI,EAAW,EAC9CS,GAAgBhB,EAASE,GAAYI,EAAW,EAGlDE,EAAmB,EACjB9D,EAAS0C,EACb,IAAItD,EAAOiF,EAAcC,EAJPjB,EAImC,IAIjDU,EAAY,EAChBA,EAAYP,GAAYF,EACxBS,GAAaH,EAEb,IACE,IAAII,EAAY,EAChBA,EAAYP,GAAYF,EACxBS,GAAaH,EACb,CACA,IAAK,IAAIK,EAAU,EAAGA,EAAUb,EAAUa,IAAW,CAInD,IAHA,IAAIK,GAAO,IACLJ,EAAcb,EAASC,EAAQW,EAC/BM,EAAeH,EAAcC,EAAeJ,EACzCnD,EAAI,EAAGA,EAAIyC,EAAUzC,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIyC,EAAUzC,IAC5BuD,EAAOhC,KAAKpB,IACVoD,EACAnB,EAAM7D,KACJ4E,GAAepD,EAAIgD,GAAaR,EAAQS,EAAYhD,GACpD,IAIRhB,EAAOT,KAAKiF,EAAeV,GAAkB,GAAKS,EAEpDT,IAGJ,OAAO,IAAI1E,GEhpBb,MAAM,EAA+BH,QAAQ,M,8RCmF7C,QA9EMwF,WAKJ,WAAYC,I,4FAAuB,6BAJH,MAIG,cAHZ,GAGY,gBAFR,IAGzBlF,KAAKkF,WAAaA,E,6CAGpB,SAASC,GACPnF,KAAKoF,OACLpF,KAAKqF,OAAOC,KAAKH,K,uBAGnB,WACE,OAAOnF,KAAKqF,S,qBAGd,SAAQzB,GACN,IAAI2B,EAAS3B,EAMb,OAJA5D,KAAKqF,OAAOzE,SAAQ,SAACuE,GACnBI,EAASJ,EAAMK,QAAQD,MAGlBA,I,sBAGT,SAASE,EAAWC,EAAWC,EAAqBC,GAClD,IAAMnC,EHmSU,SAACA,GACnB,OAAOA,EAAE3D,KGpSGA,CAAK2F,GAEXI,EAAQjD,EAAoB+C,EAAaD,GAE7C1F,KAAKqF,OAAOS,UAAUlF,SAAQ,SAACuE,GAC7BU,EAAQV,EAAMY,qBAAqBC,UAAUP,EAAGhC,EAAGmC,EAAgBC,Q,kBAIvE,SAAKN,EAAgBI,GACnB,OAAO3F,KAAKqF,OAAOrF,KAAKqF,OAAOY,OAAS,GAAGC,KAAKX,EAAQI,K,mBAG1D,SAAMlC,GACJ,OAAOzD,KAAKqF,OAAOrF,KAAKqF,OAAOY,OAAS,GAAGE,MAAM1C,K,kBAGnD,SAAK2C,GACH,IAAMC,EAAa,CACjBnB,WAAYlF,KAAKkF,WACjBG,OAAQ,IAGVrF,KAAKqF,OAAOzE,SAAQ,SAACuE,GACnBkB,EAAWhB,OAAOC,KAAK,CACrBgB,KAAMnB,EAAMoB,UACZnB,KAAMD,EAAMqB,UACZC,QAAS,CACPC,EAAGvB,EAAMuB,EAAE3G,KACXyC,EAAG2C,EAAM3C,EAAEzC,WAKjB,IAAMS,EAASmG,KAAKC,UAAUP,GAE9B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,UAAaZ,EAAM5F,GAAQ,SAACyG,GACtBA,IACFC,QAAQf,MAAMc,GACdF,KAEFD,EAAQtG,c,mBAvEVyE,GCUC,IAAKkC,E,kIAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,OAAAA,EAAAA,QAAAA,UAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,KCZL,IAAeC,EAIpB,WAAYjC,EAAekC,I,4FAAuB,wBAHxB,MAGwB,uBAFhB,MAGhCrH,KAAKmF,MAAQA,EACbnF,KAAKqH,cAAgBA,G,++BCClB,IAAMC,EAAb,a,kOAAA,U,QAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,wBACE,SACE1D,EACA2D,EACA3B,EACA4B,GAEA,IAAMC,EACmB,OAAvBzH,KAAKqH,cAAyBrH,KAAKqH,cAAcK,EAAI9D,EACjDiC,EAAQzD,EAASoF,EAAOC,EAAoBE,YAAYC,aAS9D,OARA5H,KAAKmF,MAAM0C,GAAKlF,EACdY,EAAwBsC,EAAO0B,GAC/BnE,EAA0BpD,KAAKmF,MAAMuB,EAAGd,EAAiB2B,IAE3DvH,KAAKmF,MAAM2C,GAAKvE,EACdiE,EAAMO,aACNR,GAEyB,OAAvBvH,KAAKqH,cACAlE,EACLf,EAASpC,KAAKmF,MAAMuB,EAAEiB,YAAaH,GACnCxH,KAAKqH,cAAcW,WAAWhI,KAAKqH,cAAcK,IAG9C,IAAI9H,O,iBAxBf,GAA2CwH,G,++BCPpC,IAAMa,EAAb,a,kOAAA,U,QAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,wBACE,SACErE,EACA2D,EACA3B,EACA4B,GAEA,OAAOA,O,iBAPX,GAA2CJ,G,0mCCCpC,IAAMc,EAAb,a,kOAAA,U,QAAA,G,EAAA,E,+YAAA,oKACsC,MADtC,S,EAAA,G,EAAA,wBAGE,SACEtE,EACA2D,EACA3B,EACA4B,GAcA,IAZA,IAAMW,EAAYnI,KAAKqH,cACjB7G,EAAS0C,EAAS,IAAItD,EAAOuI,EAAUC,EAAEvI,KAAMsI,EAAUC,EAAEtI,OAE3DuI,EAAaF,EAAUG,gBACvBC,EAASJ,EAAUK,YACnBC,EAAaN,EAAUO,WACvBC,EAAcR,EAAUS,YAExBC,GADaV,EAAUW,WACTX,EAAUY,kBACxBC,EAAeb,EAAUc,kBACzBC,EAAcf,EAAUgB,iBAErB1F,EAAI,EAAGA,EAAI8D,EAAkB9D,IACpC,IAAK,IAAI2F,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAYpC,IAXA,IAEMC,EAAahB,EAASe,EAGxBvE,GAAO,IACLJ,EAAcgE,EAAcF,EAAaW,EACzCpE,EAAegE,EAAeH,EAAcO,EAC9CI,EAAO,EACPC,EAAO,EAEFlI,EAAI,EAAGmI,EAXEnB,EAASc,EAWS9H,EAAI8G,EAAY9G,IAAKmI,IACvD,IACE,IAAIlI,EAAI,EAAGmI,EAASJ,EACpB/H,EAAI6G,EACJ7G,IAAKmI,IAGH5E,EACAoD,EAAUC,EAAErI,KAAK4E,EAAc+E,EAASjB,EAAakB,GACnDlG,KAGFsB,EACEoD,EAAUC,EAAErI,KACV4E,EAAc+E,EAASjB,EAAakB,GACpClG,GACJ+F,EAAOG,EACPF,EAAOC,GAKblJ,EAAOT,KAAK4E,EAAc8E,EAAOhB,EAAae,GAAM/F,GAClD+D,EAAMxC,EAAeqE,EAAIR,EAAcS,GAAG7F,GAMpD,OAAOjD,O,iBAjEX,GAA8C4G,G,knCCAvC,IAAMwC,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,sKACsC,MADtC,S,EAAA,G,EAAA,wBAGE,SACEhG,EACA2D,EACA3B,EACA4B,GAEA,IAAMH,EAAgBrH,KAAKqH,cAErBwC,EAAUxC,EAAcyC,aACxBvB,EAASlB,EAAcmB,YACvBH,EAAahB,EAAciB,gBAC3BO,EAAcxB,EAAc0B,iBAC5BC,EAAe3B,EAAc4B,kBAC7BC,EAAc7B,EAAc8B,iBAC5BV,EAAapB,EAAcqB,WAC3BC,EAActB,EAAcuB,YAC5BmB,EAAa1C,EAAcyB,WAE3BkB,EAAY9G,EAChB,IAAItD,GACD6I,EAAa,EAAIoB,IAAYlB,EAAc,EAAIkB,GAAWE,EAC3DxC,IAIE/G,EAAS,IAAIZ,EACjB6I,EAAaE,EAAcoB,EAC3BxC,GAGYF,EAAcW,WAAWX,EAAcK,GAErDL,EAAcQ,GAAK3E,EAASmE,EAAcQ,IAC1CR,EAAcS,GAAK5E,EAASmE,EAAcS,IAE1C,IAAK,IAAIrE,EAAI,EAAGA,EAAI8D,EAAkB9D,IAAK,CACzC,IAAK,IAAI2F,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAOpC,IANA,IAAMW,EAAY1B,EAASc,EAErBE,EAAahB,EAASe,EAInBY,EAAI,EAAGA,EAAIH,EAAYG,IAC9B,IACE,IAAI3I,EAAI,EAAG4I,EAAWF,EAAWG,GAAeP,EAChDtI,EAAI8G,EACJ9G,IAAK4I,IAAYC,IAEjB,IACE,IAAI5I,EAAI,EAAG6I,EAAad,EAAYe,GAAiBT,EACrDrI,EAAI6G,EACJ7G,IAAK6I,IAAcC,IACnB,CACAN,EACEE,GACGzB,EAAa,EAAIoB,IACjBlB,EAAc,EAAIkB,GACnBM,GAAY1B,EAAa,EAAIoB,GAC7BQ,GACF5G,IACA4D,EAAcX,EAAE3G,KAAKqJ,GACnBc,EAAI7B,EAAaA,EAAa9G,EAAI8G,EAAa7G,GAEjDgG,EAAM4B,EAAIP,EAAcG,EAAeK,EAAIR,EAAcS,GACvD7F,GAGJ,IAAI8G,EAAI,EACO,GAAXV,EACFU,EACElD,EAAce,EAAErI,KACdmK,EAAIzB,EAAaE,EACfwB,EAAW1B,EACX4B,GACF5G,GAGF2G,GAAe,GACfE,GAAiB,GACjBF,EAAczB,GACd2B,EAAgB7B,IAEhB8B,EACElD,EAAce,EAAErI,KACdmK,EAAIzB,EAAaE,EACfyB,EAAc3B,EACd6B,GACF7G,IAIR4D,EAAcQ,GAAG9H,KAAKqJ,GACpBc,EAAI7B,EAAaA,EAAa9G,EAAI8G,EAAa7G,IAE9C+I,EACC/C,EACE4B,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GACrD7F,GACJ8D,EAKRF,EAAcS,GAAG/H,KAAKqJ,GAAG,IACvB5B,EAAM4B,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GAAG7F,GAC9D8D,EAKR,GAAIsC,EAAU,EAEZ,IAAK,IAAIT,EAAI,EAAGA,EAAIW,EAAYX,IAC9B,IAAK,IAAIC,GAAKQ,EAAStI,EAAI,EAAG8H,EAAIV,EAAckB,EAASR,IAAK9H,IAC5D,IAAK,IAAI+H,GAAKO,EAASrI,EAAI,EAAG8H,EAAIb,EAAaoB,EAASP,IAAK9H,IACvD8H,GAAK,GAAKD,GAAK,GAAKC,EAAIb,GAAcY,EAAIV,IAC5CnI,EAAO4I,EAAIX,EAAaE,EAAcU,EAAIZ,EAAaa,GAAG7F,GACxDuG,EACEZ,GACGX,EAAa,EAAIoB,IACjBlB,EAAc,EAAIkB,GACnBtI,GAAKkH,EAAa,EAAIoB,GACtBrI,GACFiC,IAQhB,OAAIoG,EAAU,EACLrJ,EAGFwJ,O,iBA7IX,GAA2C5C,G,uKCEpC,IAAMoD,GAAb,yB,4FAAA,S,QAAA,O,EAAA,E,EAAA,qBACE,SAAcnD,EAAuBlC,GACnC,GAAqB,MAAjBkC,EAAuB,CACzB,GAAIlC,EAAMsF,OACR,OAAO,IAAInD,EAAsBnC,EAAOkC,GACnC,GAAIlC,EAAMoB,WAAaY,EAAUuD,KACtC,OAAO,IAAIzC,EAAsB9C,EAAOkC,OAErC,CACL,GAAIA,EAAcd,WAAaY,EAAUvC,QACvC,OAAO,IAAIsD,EAAyB/C,EAAOkC,GACtC,GAAIA,EAAcd,WAAaY,EAAUuD,KAC9C,OAAO,IAAId,GAAsBzE,EAAOkC,GACnC,GACLA,EAAcoD,QACdpD,EAAcd,WAAaY,EAAUwD,eAErC,OAAO,IAAIrD,EAAsBnC,EAAOkC,GAG5C,OAAO,QApBX,M,eAAA,M,WAAA,K,oSCFeuD,GAAAA,WAKb,WAAYC,I,4FAAsB,8BAJA,MAIA,oBAHJ,MAGI,kBAFL,MAG3B7K,KAAKkF,WAAa2F,EAClB7K,KAAK8K,QAAU,IAAI7F,EAAQ4F,G,gDAG7B,SAAYvE,EAAcyE,GAExB,IAAM5F,EAAQ,IAAImB,EAEM,mBAAbyE,GACTA,EAAS5F,GAGY,OAAnBnF,KAAKgL,UACPhL,KAAKiL,qBAAqB9F,GAE1BA,EAAM+F,WAAWlL,KAAKgL,WAGxB7F,EAAMgG,YACNhG,EAAMiG,mBACJZ,GAAuBa,OAAOrL,KAAKgL,UAAW7F,IAGhDnF,KAAK8K,QAAQQ,SAASnG,GACtBnF,KAAKgL,UAAY7F,I,wBAGnB,WACE,OAAOnF,KAAK8K,a,oBAlCDF,G,oSCAAW,GAAAA,WAkBb,c,4FAAc,yBANY,GAMZ,iBALa,GAKb,gBAJY,GAIZ,wBAHoB,MAGpB,0BAFuC,MAGnDvL,KAAK0G,EAAI,IAAI9G,EACbI,KAAKwC,EAAI,IAAI5C,EACbI,KAAK0H,EAAI,IAAI9H,EACbI,KAAKoI,EAAI,IAAIxI,EACbI,KAAK6H,GAAK,IAAIjI,EACdI,KAAK8H,GAAK,IAAIlI,EACdI,KAAKwL,GAAK,IAAI5L,EACdI,KAAKyL,GAAK,IAAI7L,EACdI,KAAK0L,GAAK,IAAI9L,EACdI,KAAK2L,GAAK,IAAI/L,E,uDAGhB,SAAmBgM,GAEjB,OADA5L,KAAK4L,gBAAkBA,EAChB5L,O,gCAGT,WACE,OAAOA,KAAK4L,kB,qBAGd,SAAQhI,GAMN,OALA5D,KAAKoI,EAAIzF,EACPP,EAASpC,KAAK0G,EAAG9C,GACjB5D,KAAKwC,EAAEqJ,UAAU,EAAGjI,EAAM9D,OAE5BE,KAAK0H,EAAI1H,KAAK8L,WAAW9L,KAAKoI,GACvBpI,KAAK0H,I,sBAGd,SAASnI,GACPS,KAAK+D,MAAQxE,I,sBAGf,WACE,OAAOS,KAAK+D,Q,uBAGd,SAAUxE,GACRS,KAAK8D,OAASvE,I,uBAGhB,WACE,OAAOS,KAAK8D,S,sBAGd,SAASvE,GACPS,KAAK+L,MAAQxM,I,sBAGf,WACE,OAAOS,KAAK+L,Q,wBAed,SAAW1E,GAET,OADArH,KAAKqH,cAAgBA,EACdrH,O,qBAiBT,WACE,OZyZoByD,EYzZLzD,KAAK0G,EZ0ZhBvF,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAKiJ,IAAI3K,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAI,MAElDE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACjB,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OAAqBiB,MAN3C,IAACyC,EAChBtC,O,oBYngBOoK,G,q6CCAAU,GAAAA,SAAAA,I,6yBACa,G,wCAE1B,WACEjM,KAAK0G,EAAEzG,OAAOD,KAAK8D,OAAQ9D,KAAK+D,OAChC/D,KAAK0G,EAAI7D,EAAW7C,KAAK0G,EAAG1G,KAAK+D,OAEjC/D,KAAKwC,EAAEvC,OAAOD,KAAK8D,OAAQ,GAC3B9D,KAAKwC,EAAIK,EAAW7C,KAAKwC,EAAGxC,KAAK+D,OAEjC/D,KAAK6H,GAAG5H,OAAOD,KAAK8D,OAAQ9D,KAAK+D,OACjC/D,KAAK6H,GAAK3E,EAASlD,KAAK6H,IAExB7H,KAAK8H,GAAG7H,OAAOD,KAAK8D,OAAQ,GAC5B9D,KAAK8H,GAAK5E,EAASlD,KAAK8H,IAExB9H,KAAKyL,GAAGxL,OAAOD,KAAK8D,OAAQ9D,KAAK+D,OACjC/D,KAAKyL,GAAKvI,EAASlD,KAAKyL,IAExBzL,KAAK2L,GAAG1L,OAAOD,KAAK8D,OAAQ,GAC5B9D,KAAK2L,GAAKzI,EAASlD,KAAK2L,IAExB3L,KAAKwL,GAAGvL,OAAOD,KAAK8D,OAAQ9D,KAAK+D,OACjC/D,KAAKwL,GAAKtI,EAASlD,KAAKwL,IAExBxL,KAAK0L,GAAGzL,OAAOD,KAAK8D,OAAQ,GAC5B9D,KAAK0L,GAAKxI,EAASlD,KAAK2L,M,kBAG1B,WACE,OAAO,I,kBAGT,WACE,OAAO,I,wBAGT,SAAWtE,GAaT,OAZIA,EAAcoD,OAChBzK,KAAKkM,SAAS7E,EAAcb,WACnBa,EAAc8E,QACvBnM,KAAKkM,SACH7E,EAAc0B,iBACZ1B,EAAc4B,kBACd5B,EAAc8B,kBAIpB,gDAAiB9B,GAEVrH,O,qBAGT,SAAQT,GACNS,KAAKoM,UAAU7M,EAAM,M,qBAGvB,WACE,OAAOS,KAAK8D,S,4BAGd,WACE,OAAO9D,KAAK+D,Q,6BAGd,WACE,OAAO/D,KAAK8D,S,4BAGd,WACE,OAAO,O,oBAtEImI,CAAwBV,I,6/BCAjCc,GAAAA,SAAAA,I,4uBACJ,SAAW5I,GACT,OdkW6B,SAACA,GAChC,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAKuJ,IAAIjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAE9CE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OAClBC,EAAO,IAAIH,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OAC3CwM,EAAU,IAAI3M,EAAO,EAAG6D,EAAE3D,KAAMC,EAAKyM,aAAazM,MAAM8L,UAC5DpI,EAAE5D,KACF,GAOF,OALe,IAAID,EACjB6D,EAAE5D,KACF4D,EAAE3D,KACFwD,EAAkBvD,EAAMwM,GAASxM,MchX1B0M,CAAkBhJ,K,wBAG3B,SAAWA,GACT,MAAM,IAAIlB,MAAM,wB,qBAGlB,WACE,OAAO4E,EAAUuF,U,kBAGnB,SAAKnH,EAAgBI,GACnB,OdyWuB,SAACJ,EAAgBI,GAC1C,IAAMxE,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAK4J,IAAItL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAE9CE,UAAU,CAACkE,EAAY9F,KAAM8F,EAAY7F,OAC5C,OAAO,IAAIF,EACT2F,EAAO1F,KACP0F,EAAOzF,KACPqD,EACEoC,EACA,IAAI3F,EACF2F,EAAO1F,KACP0F,EAAOzF,KACPqB,EAAOwE,EAAY5F,QAErBA,MACFiB,Mc1XO4L,CAAYrH,EAAQI,K,mBAG7B,SAAMlC,GACJ,OAAQ,EAAMA,O,oBAlBZ4I,CAAqBJ,I,6/BCKrBY,GAAAA,SAAAA,I,4uBACJ,SAAWpJ,GACT,OfoY8B,SAACA,GACjC,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO,GAAO,EAAM0B,KAAKuJ,KAAKjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,QAE5DE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,Oe1YlC+M,CAAmBrJ,K,wBAG5B,SAAWA,GACT,OfyY8B,SAACA,GACjC,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OACEA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,IAC5B,EAAMF,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAGvCE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OelZlCgN,CAAmBtJ,K,qBAG5B,WACE,OAAO0D,EAAU6F,W,kBAGnB,SAAKzH,EAAgBI,GACnB,Of6YwB,SAACJ,EAAgBI,GAC3C,IAAMxE,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAK4J,IAAItL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAE9CE,UAAU,CAAC8D,EAAO1F,KAAM0F,EAAOzF,OAC5BmN,EAAUzN,EACb4B,cAAa,SAAUC,GACtB,OAAO,EAAMA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,MAE3CE,UAAU,CAAC8D,EAAO1F,KAAM0F,EAAOzF,OAC5BoN,EAAU1N,EACb4B,cAAa,SAAUC,GACtB,OAAO0B,KAAK4J,IAAI,EAAMtL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,OAEpDE,UAAU,CAACkE,EAAY9F,KAAM8F,EAAY7F,OAE5C,OAAO6C,EACLQ,EACEoC,EACA,IAAI3F,EAAO2F,EAAO1F,KAAM0F,EAAOzF,KAAMqB,EAAOoE,EAAOxF,QAErDoD,EACE,IAAIvD,EAAO2F,EAAO1F,KAAM0F,EAAOzF,KAAMmN,EAAQ1H,EAAOxF,OACpD,IAAIH,EACF+F,EAAY9F,KACZ8F,EAAY7F,KACZoN,EAAQvH,EAAY5F,SAGxBiB,Me3aOmM,CAAa5H,EAAQI,K,mBAG9B,SAAMlC,GACJ,OAAQ,EAAMA,O,oBAlBZoJ,CAAsBZ,I,6/BCLtBmB,GAAAA,SAAAA,I,4uBACJ,SAAW3J,GACT,OhB+b0B,SAACA,GAC7B,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OACE,GAAO,EAAM0B,KAAKuJ,KAAK,EAAMjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,KAAO,KAGpEE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OgBvclCsN,CAAe5J,K,wBAGxB,SAAWA,GACT,OhBsc0B,SAACA,GAC7B,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OACE,EACA0B,KAAKiJ,IACH,GAAO,EAAMjJ,KAAKuJ,KAAK,EAAMjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,KAAO,EACjE,MAILE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OgBldlCuN,CAAe7J,K,qBAGxB,WACE,OAAO0D,EAAUoG,O,kBAGnB,SAAKhI,EAAgBI,GACnB,OAAO,I,mBAGT,SAAMlC,GACJ,OAAO,O,oBAlBL2J,CAAkBnB,I,6/BCAlBuB,GAAAA,SAAAA,I,4uBACJ,SAAW/J,GACT,OAAOD,EAAeC,K,wBAGxB,SAAWA,GACT,OAAOC,EAAeD,K,qBAGxB,WACE,OAAO0D,EAAUsG,O,kBAGnB,SAAKlI,EAAgBI,GACnB,OAAO,I,mBAGT,SAAMlC,GACJ,OAAO,O,oBAlBL+J,CAAkBvB,I,6/BCAlByB,GAAAA,SAAAA,I,4uBACJ,SAAWjK,GACT,OlB8e8B,SAACA,GACjC,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO0B,KAAK4J,IAAI,EAAI5J,KAAKuJ,IAAIjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,QAE3DE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OkBpflC4N,CAAmBlK,K,wBAG5B,SAAWA,GACT,OlBmf8B,SAACA,GACjC,IAAMtC,EAAS3B,EACZ4B,cAAa,SAAUC,GACtB,OAAO,GAAK,EAAI0B,KAAKuJ,KAAKjL,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,QAExDE,UAAU,CAACgC,EAAE5D,KAAM4D,EAAE3D,OACxB,OAAO,IAAIF,EAAO6D,EAAE5D,KAAM4D,EAAE3D,KAAMqB,EAAOsC,EAAE1D,OkBzflC6N,CAAmBnK,K,qBAG5B,WACE,OAAO0D,EAAU0G,W,kBAGnB,SAAKtI,EAAgBI,GACnB,OAAO,I,mBAGT,SAAMlC,GACJ,OAAO,O,oBAlBLiK,CAAsBzB,I,uyCCDb6B,GAAAA,SAAAA,I,2uBACb,c,kBAIA,WACE,OAAO,I,kBAGT,WACE,OAAO,I,wBAGT,SAAWzG,GAWT,OAVIA,EAAc8E,QAChBnM,KAAK+N,QAAQ,CACX1G,EAAc0B,iBACd1B,EAAc4B,kBACd5B,EAAc8B,mBAIlB,gDAAiB9B,GAEVrH,O,qBAGT,SAAQ6K,GACN7K,KAAKkM,SAASrB,EAAU,IACxB7K,KAAKoM,UAAUvB,EAAU,IACzB7K,KAAKgO,SAASnD,EAAU,M,qBAG1B,WACE,MAAO,CAAC7K,KAAK0I,WAAY1I,KAAK4I,YAAa5I,KAAK8I,iB,oBAlCrCgF,CAAwBvC,I,2nCCUjC0C,GAAAA,SAAAA,I,kzBAC2B,I,sBACA,G,mBACH,G,kBACD,G,wCAE3B,WACEjO,KAAK0G,EAAEzG,OACLD,KAAKkO,WACLlO,KAAKqI,WAAarI,KAAKqI,WAAarI,KAAK+L,OAE3C/L,KAAK0G,EAAI7D,EAAW7C,KAAK0G,EAAG1G,KAAK+D,MAAQ/D,KAAK8D,OAAS9D,KAAK+L,OAE5D/L,KAAKwC,EAAEvC,OAAOD,KAAKkO,WAAY,GAC/BlO,KAAKwC,EAAIK,EAAW7C,KAAKwC,EAAG,KAE5BxC,KAAK6H,GAAG5H,OACND,KAAKkO,WACLlO,KAAKqI,WAAarI,KAAKqI,WAAarI,KAAK+L,OAE3C/L,KAAK6H,GAAK3E,EAASlD,KAAK6H,IAExB7H,KAAK8H,GAAG7H,OAAOD,KAAKkO,WAAY,GAChClO,KAAK8H,GAAK5E,EAASlD,KAAK8H,IAExB9H,KAAKyL,GAAGxL,OACND,KAAKkO,WACLlO,KAAKqI,WAAarI,KAAKqI,WAAarI,KAAK+L,OAE3C/L,KAAKyL,GAAKvI,EAASlD,KAAK8H,IAExB9H,KAAK2L,GAAG1L,OAAOD,KAAKkO,WAAY,GAChClO,KAAK2L,GAAKzI,EAASlD,KAAK2L,IAExB3L,KAAKwL,GAAGvL,OACND,KAAKkO,WACLlO,KAAKqI,WAAarI,KAAKqI,WAAarI,KAAK+L,OAE3C/L,KAAKwL,GAAKtI,EAASlD,KAAKwL,IAExBxL,KAAK0L,GAAGzL,OAAOD,KAAKkO,WAAY,GAChClO,KAAK0L,GAAKxI,EAASlD,KAAK0L,M,6BAG1B,WACE,OAAQ1L,KAAK+D,MAAQ/D,KAAKqI,WAAa,EAAIrI,KAAK6J,SAAW7J,KAAKuI,OAAS,I,4BAG3E,WACE,OAAQvI,KAAK8D,OAAS9D,KAAKqI,WAAa,EAAIrI,KAAK6J,SAAW7J,KAAKuI,OAAS,I,4BAG5E,WACE,OAAOvI,KAAKkO,a,2BAGd,SAAc9I,GAEZ,OADApF,KAAKqI,WAAajD,EACXpF,O,2BAGT,WACE,OAAOA,KAAKqI,a,2BAGd,SAAc6F,GAEZ,OADAlO,KAAKkO,WAAaA,EACXlO,O,2BAGT,WACE,OAAOA,KAAKkO,a,wBAGd,SAAWrE,GAET,OADA7J,KAAK6J,QAAUA,EACR7J,O,wBAGT,WACE,OAAOA,KAAK6J,U,uBAGd,SAAUtB,GAER,OADAvI,KAAKuI,OAASA,EACPvI,O,uBAGT,WACE,OAAOA,KAAKuI,S,qBAGd,SAAQ3E,GAMN,IALA,IAAMpD,EAAS,IAAIZ,EACjBI,KAAK+I,iBAAmB/I,KAAKiJ,kBAAoBjJ,KAAKmJ,iBACtDvF,EAAM9D,MAGCgB,EAAI,EAAGA,EAAI8C,EAAM9D,KAAMgB,GAAK,EAAG,CACtC,IAAM4J,EAAO/G,EACXC,EAAMtD,IAAIQ,GACVd,KAAK+L,MACL/L,KAAK8D,OACL9D,KAAK+D,MACL/D,KAAKqI,WACLrI,KAAKqI,WACLrI,KAAK6J,QACL7J,KAAK6J,QACL7J,KAAKuI,OACLvI,KAAKuI,QAEDrG,EAAOlC,KAAKoI,EAAIzF,EACpBP,EAASpC,KAAK0G,EAAGgE,GACjB1K,KAAKwC,EAAEqJ,UAAU,EAAGjI,EAAM9D,OAC1BqO,kBAEF3N,EAAO4N,OAAOtN,EAAGoB,GAMnB,OAHAlC,KAAKoI,EAAI5H,EACTR,KAAK8L,WAAW9L,KAAKoI,GAEdpI,KAAK0H,I,wBAGd,SAAWjE,GACT,OAAOD,EAAeC,K,wBAGxB,SAAWA,GACT,OAAOC,EAAeD,K,qBAGxB,WACE,OAAO0D,EAAUuD,O,kBAGnB,SAAKnF,EAAgBI,GACnB,MAAM,IAAIpD,MAAM,kB,mBAGlB,SAAMkB,GACJ,MAAM,IAAIlB,MAAM,qB,oBA9Id0L,CAAkBH,I,6/BCVlBO,GAAAA,SAAAA,I,2uBACJ,c,wBAIA,SAAWhH,GACT,IAAIA,EAAc8E,OAkBhB,MAAM,IAAI5J,MACR,+DAlBF,GAAI8E,EAAcd,WAAaY,EAAUvC,QAYvC,MAAM,IAAIrC,MACR,wEASN,OArBIvC,KAAKqI,WAAahB,EAAc0B,iBAChC/I,KAAK6J,QAAU,EACf7J,KAAKuI,OAAS,EACdvI,KAAK+D,MAAQsD,EAAc0B,iBAC3B/I,KAAK8D,OAASuD,EAAc4B,kBAC5BjJ,KAAK+L,MAAQ1E,EAAc8B,iBAC3BnJ,KAAKkO,WACH7G,EAAc0B,iBACd1B,EAAc4B,kBACd5B,EAAc8B,iBAYbnJ,O,qBAGT,SAAQ6K,GACN,MAAM,IAAItI,MAAM,iB,2BAGlB,SAAc8F,GACZ,MAAM,IAAI9F,MAAM,iB,uBAGlB,SAAUgG,GACR,MAAM,IAAIhG,MAAM,iB,wBAGlB,SAAWsH,GACT,MAAM,IAAItH,MAAM,iB,sBAGlB,SAAShD,GACP,MAAM,IAAIgD,MAAM,iB,uBAGlB,SAAUhD,GACR,MAAM,IAAIgD,MAAM,iB,sBAGlB,SAAShD,GACP,MAAM,IAAIgD,MAAM,iB,2BAGlB,SAAchD,GACZ,MAAM,IAAIgD,MAAM,oB,oBA7Dd8L,CAA4BJ,I,6/BCE5BK,GAAAA,SAAAA,I,2uBAIJ,WACEtO,KAAK4L,gBAAkB,IAAI1D,EACzBlI,KACAA,KAAKqH,iB,6BAIT,WACE,OAAQrH,KAAK8D,OAAS9D,KAAKqI,YAAcrI,KAAKuI,OAAS,I,4BAGzD,WACE,OAAQvI,KAAK+D,MAAQ/D,KAAKqI,YAAcrI,KAAKuI,OAAS,I,4BAGxD,WACE,OAAOvI,KAAK+L,Q,2BAGd,SAAc3G,GAEZ,OADApF,KAAKqI,WAAajD,EACXpF,O,2BAGT,WACE,OAAOA,KAAKqI,a,uBAGd,SAAUE,GAER,OADAvI,KAAKuI,OAASA,EACPvI,O,uBAGT,WACE,OAAOA,KAAKuI,S,qBAGd,SAAQ3E,GAMN,IALA,IAAMpD,EAAS,IAAIZ,EACjBI,KAAK+I,iBAAmB/I,KAAKiJ,kBAAoBjJ,KAAKmJ,iBACtDvF,EAAM9D,MAGCgB,EAAI,EAAGA,EAAI8C,EAAM9D,KAAMgB,GAAK,EAAG,CACtC,IAAMyN,EAAO3J,EACXhB,EAAMtD,IAAIQ,GACVd,KAAK+L,MACL/L,KAAK8D,OACL9D,KAAK+D,MACL/D,KAAKqI,WACLrI,KAAKqI,WACLrI,KAAKuI,OACLvI,KAAKuI,QACL4F,kBAEF3N,EAAO4N,OAAOtN,EAAGyN,GAMnB,OAHAvO,KAAKoI,EAAI5H,EACTR,KAAK8L,WAAW9L,KAAKoI,GAEdpI,KAAK0H,I,wBAGd,SAAWjE,GACT,MAAM,IAAIlB,MAAM,sC,wBAGlB,SAAWkB,GACT,MAAM,IAAIlB,MAAM,sC,qBAGlB,WACE,OAAO4E,EAAUvC,U,kBAGnB,SAAKW,EAAgBI,GACnB,MAAM,IAAIpD,MAAM,kB,mBAGlB,SAAMkB,GACJ,MAAM,IAAIlB,MAAM,qB,oBArFd+L,CAAqBR,I,6/BCOrBU,GAAAA,SAAAA,I,2uBAKJ,SAAgBC,GACd,OAAO,IAAI5H,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAYyH,GAAU,SAACxH,EAAKlH,GAC1B,GAAIkH,EACFF,EAAOE,OADT,CAIA,IAAMyH,EAAO/H,KAAKgI,MAAM5O,EAAK6O,YAEvBC,EAAU,IAAIL,EAAUE,EAAI,YAElCA,EAAI,OAAW9N,SAAQ,SAACkO,GACtB,IAAIC,EAAa,KAES,aAAtBD,EAAS,KACXC,EAAalC,GACkB,YAAtBiC,EAAS,KAClBC,EAAa1C,GACkB,SAAtByC,EAAS,KAClBC,EAAavB,GACkB,aAAtBsB,EAAS,KAClBC,EAAarB,GACkB,SAAtBoB,EAAS,OAClBC,EAAa3B,IAGfyB,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,kBAI3B,IAAMhE,EAAU+D,EAAQI,aAExBnE,EAAQoE,YAAYtO,SAAQ,SAACuE,EAAOrE,GAClCqE,EAAMuB,EAAIgI,EAAI,OAAJ,EACVvJ,EAAM3C,EAAIkM,EAAI,OAAJ,KAGZ5H,EAAQgE,c,qCA1Cd,SAAqB3F,GACnBA,EAAM+G,SAASlM,KAAKkF,WAAW,S,+BAF7BsJ,CAAkB5D,I,6/BCElBuE,GAAAA,SAAAA,I,2uBAKJ,SAAgBV,GACd,OAAO,IAAI5H,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAYyH,GAAU,SAACxH,EAAKlH,GAC1B,GAAIkH,EACFF,EAAOE,OADT,CAIA,IAAMyH,EAAO/H,KAAKgI,MAAM5O,EAAK6O,YAEvBC,EAAU,IAAIM,EAAUT,EAAI,YAElCA,EAAI,OAAW9N,SAAQ,SAACkO,GACtB,IAAIC,EAAa,KAES,aAAtBD,EAAS,MACXC,EAAalC,GACbgC,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,gBAEM,YAAtBA,EAAS,MAClBC,EAAa1C,GACbwC,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAavB,GACbqB,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,gBAEM,aAAtBA,EAAS,MAClBC,EAAarB,GACbmB,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAa3B,GACbyB,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAad,GACbY,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,YACvB3J,EAAMiK,cAAcN,EAAS,YAC7B3J,EAAMkK,UAAUP,EAAS,QACzB3J,EAAMmK,cAAcR,EAAS,YAC7B3J,EAAMoK,WAAWT,EAAS,aAEG,YAAtBA,EAAS,MAClBC,EAAaT,GACbO,EAAQG,YAAYD,GAAY,SAAC5J,GAC/BA,EAAM4I,QAAQe,EAAS,YACvB3J,EAAMiK,cAAcN,EAAS,YAC7B3J,EAAMkK,UAAUP,EAAS,YAEI,mBAAtBA,EAAS,OAClBC,EAAaT,GACbO,EAAQG,YAAYD,GAAY,SAAC5J,WAIrC,IAAM2F,EAAU+D,EAAQI,aAExBnE,EAAQoE,YAAYtO,SAAQ,SAACuE,EAAOrE,GAClCqE,EAAMuB,EAAIgI,EAAI,OAAJ,EACVvJ,EAAM3C,EAAIkM,EAAI,OAAJ,KAGZ5H,EAAQgE,c,qCAxEd,SAAqB3F,GACnBA,EAAM4I,QAAQ/N,KAAKkF,iB,+BAFjBiK,CAAkBvE,ICdxB,MAAM,GAA+BnL,QAAQ,a,gSCEtC,IAAM+P,GAAb,WAKE,WAAYC,EAAqBlI,EAA0BlH,I,4FAAiB,+BAJ/C,GAI+C,2BAH1C,GAG0C,eAFtD,MAGpBL,KAAKyP,YAAcA,EACnBzP,KAAKuH,iBAAmBA,EAGxB,IAFA,IAAMxH,EAAO,GAEJ2P,EAAU,EAAGA,EAAUnI,EAAkBmI,GAAW,EAAG,CAC9D3P,EAAK2P,GAAW,GAChB,IAAK,IAAIC,EAAY,EAAGA,EAAYF,EAAaE,GAAa,EAC5D5P,EAAK2P,GAASC,GAAatP,EAAIqP,GAASC,GAAW1J,OAC/C2J,OAAOvP,EAAIqP,GAASC,IACpBE,IAIR7P,KAAKD,KAAO,IAAIH,EAAOI,KAAKyP,YAAazP,KAAKuH,iBAAkBxH,G,QAnBpE,O,EAAA,G,EAAA,wBAsBE,SAAU+P,GACR,OAAO9P,KAAKD,KAAKO,IAAIwP,KAvBzB,iCA0BE,WACE,OAAO9P,KAAKuH,mBA3BhB,sBA8BE,SAASwI,EAAgBC,GACvB,OAAOhQ,KAAKD,KAAKkQ,MAAM,EAAGF,EAAQ/P,KAAKD,KAAKF,KAAMmQ,Q,kBA/BtD,K,uKCCO,IAAME,GAAb,yB,4FAAA,S,QAAA,O,EAAA,E,EAAA,sBACE,SAAeC,GACb,OAAO,IAAItJ,SAAQ,SAACC,GAClBsJ,GAAU,CACRC,UAAU,EACV9K,OAAQ,QAEP+K,SAASH,GACTI,MAAK,SAAClQ,GACL,IAAMkH,EAAmBlH,EAAI4F,OACvBwJ,EAAcpP,EAAI,GAAG4F,OAErBuK,EAAU,IAAIhB,GAAQC,EAAalI,EAAkBlH,GAC3DyG,EAAQ0J,YAblB,M,eAAA,M,WAAA,K,gSCDO,IAAeC,GAAtB,yB,4FAAA,6BACgC,GADhC,YAEwB,GAFxB,uBAGmC,G,QAHnC,O,EAAA,G,EAAA,2BAKE,SAAaT,GAEX,OADAhQ,KAAKgQ,UAAYA,EACVhQ,OAPX,kBAUE,SAAK0Q,GAEH,OADA1Q,KAAK0Q,EAAIA,EACF1Q,OAZX,6BAeE,SAAgB2Q,GAEd,OADA3Q,KAAK2Q,aAAeA,EACb3Q,U,kBAjBX,K,y/BCUO,IAAM4Q,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,uBACE,SAASzL,GACPnF,KAAK6Q,KAAK1L,EAAOnF,KAAK2Q,aAAc3Q,KAAK0Q,KAF7C,kBAKE,SAAKvL,EAAewL,EAAsBD,GACxC,IAAMI,EAAQ,GACRC,EAAQ,KAGd5L,EAAMqG,GAAK7I,EACTS,EAA0B+B,EAAMqG,GAAIsF,GACpC1N,EAA0B+B,EAAM0C,GAAI,EAAIiJ,IAE1C,IAAME,EAAazN,EACjB4B,EAAMqG,GACN,EAAIzI,KAAKiJ,IAAI8E,EAAOJ,IAGtBvL,EAAMsG,GAAK9I,EACTS,EAA0B+B,EAAMsG,GAAIqF,GACpC1N,EAA0B+B,EAAM0C,GAAI,EAAIiJ,IAE1C,IAAMG,EAAahO,EACjBG,EAA0B+B,EAAMsG,GAAI,EAAI1I,KAAKiJ,IAAI+E,EAAOL,KAG1DvL,EAAMuB,EAAI9D,EACRuC,EAAMuB,EACNtD,EACED,EAAoB6N,EAAYC,GAChCN,IAIJxL,EAAMuG,GAAK/I,EACTS,EAA0B+B,EAAMuG,GAAIoF,GACpC1N,EAA0B+B,EAAM2C,GAAI,EAAIgJ,IAE1C,IAAMI,EAAc3N,EAClB4B,EAAMuG,GACN,EAAI3I,KAAKiJ,IAAI8E,EAAOJ,IAEtBvL,EAAMwG,GAAKhJ,EACTS,EAA0B+B,EAAMwG,GAAIoF,GACpC3N,EACED,EAAoBgC,EAAM2C,GAAI3C,EAAM2C,IACpC,EAAIiJ,IAGR,IAAMI,EAAclO,EAClBM,EAAwB4B,EAAMwG,GAAI,EAAI5I,KAAKiJ,IAAI+E,EAAOL,KAGxDvL,EAAM3C,EAAII,EACRuC,EAAM3C,EACNY,EACEE,EAAkB4N,EAAaC,GAC/BR,S,kBA1DR,GAAmCF,I,y/BCL5B,IAAMW,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,uBACE,SAASjM,GACPnF,KAAKqR,gBAAgBlM,EAAOnF,KAAK2Q,gBAFrC,6BAKE,SAAgBxL,EAAewL,GAC7BxL,EAAMuB,EAAI9D,EACRuC,EAAMuB,EACNtD,EAA0B+B,EAAM0C,GAAI8I,IAEtCxL,EAAM3C,EAAII,EACRuC,EAAM3C,EACNY,EAA0B+B,EAAM2C,GAAI6I,S,kBAZ1C,GAA8CF,I,u5CCJvC,IAAMa,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,mKACsB,KADtB,S,EAAA,G,EAAA,2BAGE,SAAatB,GAEX,OADAhQ,KAAKgQ,UAAYA,EACVhQ,OALX,mBAQE,SAAMuR,EAAuBC,GAAwB,WAC7CjK,EAAmBgK,EAAaE,sBAChCC,GAAY,IAAIC,MAAOC,UAEzBlB,EAAI,EAER1Q,KAAK6R,UAAUC,aAAa9R,KAAKgQ,WAEjC,IAAK,IAAIlP,EAAI,EAAGA,EAAId,KAAK+R,WAAYjR,GAAK,EAAG,CAG3C,IAFA,IAAMkR,GAAqB,IAAIL,MAAOC,UAGhCK,EAAQ,EAAGlC,EAAS,EACxBkC,EAAQ1K,EACR0K,GAASjS,KAAKgQ,UAAWD,GAAU/P,KAAKgQ,UACxC,CACA,IAAMpM,EAAQ2N,EAAaW,SAASnC,EAAQ/P,KAAKgQ,WAC3CzK,EAASiM,EAAcU,SAASnC,EAAQ/P,KAAKgQ,WAC7CxK,EAAUxF,KAAK8K,QAAQtF,QAAQ5B,GASrC,GAPA5D,KAAK8K,QAAQqH,SAASvO,EAAO2B,EAAQC,EAASxF,KAAK4F,gBAEnD5F,KAAK8K,QAAQoE,YAAYtO,SAAQ,SAACuE,GAChC,EAAK0M,UAAUO,OAAO1B,GACtB,EAAKmB,UAAUQ,SAASlN,MAGtBnF,KAAKsS,QAAS,CAChB,IAAMC,GAAmB,IAAIZ,MAAOC,UACpC1K,QAAQyF,IAAR,iBACYoD,EAAS,EADrB,cAC4BhN,KAAKyP,KAC7BjL,EAAmBvH,KAAKgQ,WAF5B,oBAGeuC,EAAmBP,EAHlC,UAQJ,GAAIhS,KAAKsS,UACFxR,EAAI,GAAKd,KAAKyS,aAAgB,EAAG,CACpC,IAAMC,GAAU,IAAIf,MAAOC,UACrBe,EAAgB3S,KAAK4S,KAAKrB,EAAcC,GAE9CtK,QAAQyF,IAAR,qBACgB7L,EAAI,EADpB,oBACiC6R,EAAcC,KAD/C,wBAEID,EAAcE,SAFlB,qBAGeH,EAAUhB,EAHzB,SAQ6B,mBAAtB1R,KAAK8S,cACd9S,KAAK8S,aAAa,CAChBC,UAAWjS,U,kBA5DrB,GCCA,WAUE,WAAYgK,EAAkB+G,I,4FAA8B,2BATzC,MASyC,oBAR7B,MAQ6B,yBAPnC,GAOmC,qBANvC,KAMuC,uBALrC,IAKqC,mBAJzC,GAIyC,sBAHtC,GAGsC,wBAFnC,kBAAM,QAG7B7R,KAAK8K,QAAUA,EACf9K,KAAK6R,UAAYA,E,QAZrB,O,EAAA,G,EAAA,gCAeE,SAAkBjM,GAEhB,OADA5F,KAAK4F,eAAiBA,EACf5F,OAjBX,2BAoBE,SAAc+R,GAEZ,OADA/R,KAAK+R,WAAaA,EACX/R,OAtBX,6BAyBE,SAAgB2Q,GAEd,OADA3Q,KAAK2Q,aAAeA,EACb3Q,OA3BX,wBA8BE,SAAWsS,GAET,OADAtS,KAAKsS,QAAUA,EACRtS,OAhCX,4BAmCE,SAAeyS,GAEb,OADAzS,KAAKyS,YAAcA,EACZzS,OArCX,6BAwCE,SAAgB8S,GAEd,OADA9S,KAAK8S,aAAeA,EACb9S,OA1CX,kBA6CE,SAAKuR,EAAuBC,GAC1B,IAAMxB,EAAY,IACZzI,EAAmBgK,EAAaE,sBAChCuB,EAAajQ,KAAKyP,KAAKjL,EAAmByI,GAE5C4C,EAAO,EACPC,EAAW,EACXI,EAAU,EAEdjT,KAAK8K,QAAQoE,YAAYtO,SAAQ,SAACuE,GAChC8N,GAAW9N,EAAM8N,aAGnB,IACE,IAAIhB,EAAQ,EAAGlC,EAAS,EACxBkC,EAAQ1K,EACR0K,GAASjC,EAAWD,GAAU,EAC9B,CACA,IAAMmD,EAAkBlT,KAAK8K,QAAQtF,QACnC+L,EAAaW,SAASnC,EAAQC,IAE1BmD,EAAgB3B,EAAcU,SAASnC,EAAQC,GAE/CoD,EAAgBD,EAAcrT,KAEhCoG,EAAOlG,KAAK8K,QAAQ5E,KAAKiN,EAAeD,GAG5CN,IAFY5S,KAAK8K,QAAQ3E,MAAMiN,GAGpBlN,EACNlG,KAAK4F,eAAiBqN,GAAY,EAAMG,KAE1CJ,GAAcI,EAAgBpD,IAEjC,IAAK,IAAI1P,EAAM,EAAGA,EAAM4S,EAAgBpT,KAAMQ,GAAO,EACpC4S,EAAgBG,iBAAiB/S,IACjC4S,EAAgBG,iBAAiB/S,IAG9CuS,IAUN,MALe,CACbD,KAAAA,EACAC,UAAYA,EAAW,GAAKtL,EAAoB,U,kBA3FtD,M,uKCFO,IAAe+L,GAAtB,WAGE,WAAY9C,G,mGAAkB,U,EAAA,kB,sBAAA,K,SAFD,K,4CAEC,K,GAFD,KAG3BxQ,KAAKwQ,QAAUA,E,QAJnB,O,EAAA,G,EAAA,oBAOE,WACE,IACE,IAAId,EAAU,EACdA,EAAU1P,KAAKwQ,QAAQiB,sBACvB/B,GAAW,EAEX1P,KAAKuT,eAAe7D,GAGtB,OAAO1P,KAAKwQ,a,kBAhBhB,K,uuGCAO,IC4BDgD,GAAW,CAAEhF,UAAAA,GAAWW,UAAAA,IACxBpM,GAAO,CACXnD,OAAAA,EACA6T,eAAAA,EACAC,UnC+RiB,SAACjQ,GAClB,OAAOA,EAAEzC,OmC/RT2S,iBAAAA,EACAC,0BAAAA,EACAC,wBAAAA,EACAC,qBAAAA,EACAC,0BAAAA,GAEIC,GAAS,CACb3H,aAAAA,GACAQ,cAAAA,GACAW,UAAAA,GACAE,cAAAA,GACAN,UAAAA,GACAa,UAAAA,GACAK,aAAAA,GACAD,oBAAAA,IAEImB,GAAU,CACdU,eAAgBA,IAEZ+D,GAAa,CACjBrD,cAAAA,GACAQ,yBAAAA,IAEI8C,GAAW,CACf5C,iBAAAA,IAEI6C,GAAmB,CACvBC,yBC5DF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,mKACiC,SAAC1E,GAAD,OAAaA,KAD9C,S,EAAA,G,EAAA,6BAGE,SAAeA,GACb,IACE,IAAI2E,EAAe,EACnBA,EAAerU,KAAKwQ,QAAQiB,sBAC5B4C,GAAgB,EAGhB,IADA,IAAM3E,EAAU1P,KAAK+K,SAAS/K,KAAKwQ,QAAQ8D,UAAUD,IAC5ClU,EAAM,EAAGA,EAAMH,KAAKwQ,QAAQzQ,KAAKA,KAAKF,KAAMM,GAAO,EAC1DH,KAAKwQ,QAAQzQ,KAAKA,KAAKI,GAAKkU,GAAgB3E,EAAQ3P,KAAKA,KAAKI,GAAK,KAX3E,yBAgBE,SAAY4K,GAEV,OADA/K,KAAK+K,SAAWA,EACT/K,U,kBAlBX,GAA8CsT,ID6D5CiB,8BE5DF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,6BACE,SAAe7E,GAIb,IAHA,IAAI8E,EAAMC,EAAAA,EACN9S,GAAM,IAGJ0S,EAAe,EACnBA,EAAerU,KAAKwQ,QAAQiB,sBAC5B4C,GAAgB,EAGhB,IADA,IAAM3E,EAAU1P,KAAKwQ,QAAQ8D,UAAUD,GAC9BlU,EAAM,EAAGA,EAAMuP,EAAQ7P,KAAMM,GAAO,EAC3CqU,EAAMzR,KAAKyR,IAAI9E,EAAQ3P,KAAKI,GAAK,IACjCwB,EAAMoB,KAAKpB,IAAI+N,EAAQ3P,KAAKI,GAAK,IAIrC,IAAMgB,EAAS3B,EAAAA,cACC,SAAU6B,GAEtB,OACGA,EAAErB,KAAKsB,OAAOE,GAAGxB,KAAKsB,OAAOC,GAAKvB,KAAKyC,UAAU+R,MACjDxU,KAAKyC,UAAUd,IAAM3B,KAAKyC,UAAU+R,QAGxC/S,UAAU,CAACzB,KAAKwQ,QAAQzQ,KAAKA,KAAKF,KAAMG,KAAKwQ,QAAQzQ,KAAKA,KAAKD,OAC/D4C,aAAa,CACZ8R,IAAAA,EACA7S,IAAAA,IAEJ3B,KAAKwQ,QAAQzQ,KAAKA,KAAOoB,EAAOnB,KAAKwQ,QAAQzQ,KAAKA,W,kBA9BtD,GAAmDuT,IF6DjDoB,mCD9DF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,0KACuC,QADvC,S,EAAA,G,EAAA,6BAGE,SAAehF,GAMb,IAN8B,WACxBiF,EAAa,GACfC,EAAuB,EACvB5T,EAAM,EACN6T,EAAc,EAGZR,EAAe,EACnBA,EAAerU,KAAKwQ,QAAQiB,sBAC5B4C,GAAgB,EAGhB,IADA,IAAM3E,EAAU1P,KAAKwQ,QAAQ8D,UAAUD,GAC9BlU,EAAM,EAAGA,EAAMuP,EAAQ3P,KAAKF,KAAMM,GAAO,EAC5C2U,MAAMpF,EAAQvP,GAAK,IACrBwU,EAAWrP,KAAK,CACdnF,IAAAA,EACAG,IAAKoP,KAGP1O,GAAO0O,EAAQvP,GAAK,GACpByU,KAKwB,SAA1B5U,KAAK+U,mBACPF,EAAc7T,EAAM4T,GAGtBD,EAAW/T,SAAQ,YAAkB,IAAfT,EAAe,EAAfA,IAAKG,EAAU,EAAVA,IACzB,EAAKkQ,QAAQzQ,KAAKA,KAAKI,GAAKG,GAAOuU,OAjCzC,iCAqCE,SAAoBvO,GAElB,OADAtG,KAAK+U,iBAAmBzO,EACjBtG,U,kBAvCX,GAAwDsT,K","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationto3dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtomaxpool.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtoconv.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/factory.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/./src/typescript/layer/abstract3d.tsx","webpack://impulse-ts/./src/typescript/layer/conv.tsx","webpack://impulse-ts/./src/typescript/layer/fullyconnected.tsx","webpack://impulse-ts/./src/typescript/layer/maxpool.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/builder3d.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetbuilder.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/adam.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/gradientdescent.tsx","webpack://impulse-ts/./src/typescript/trainer/minibatch.tsx","webpack://impulse-ts/./src/typescript/trainer/abstract.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/abstract.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/missingdata.tsx","webpack://impulse-ts/./src/typescript/main.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/callback.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/minmaxscaling.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows, cols): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    const kernel = gpu\n      .createKernel(function (a) {\n        return a[this.thread.y][this.thread.x];\n      })\n      .setOutput([this.cols, this.rows]);\n\n    return new Matrix(this.cols, this.rows, kernel(this.data) as number[][]);\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row][col] = tmp.data[row][0];\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      // @ts-ignore\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const sum = (m: Matrix): number => {\n  return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return (\n        b[this.thread.x][this.thread.y] -\n        Math.pow(a[this.thread.x][this.thread.y], 2)\n      );\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    kernel(output.data) as number[][]\n  ).sum();\n};\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols =\n    ((width - kernel_w + 2 * pad_w) / stride_w + 1) *\n    ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = setZeros(new Matrix(rows, cols));\n\n  for (\n    let boundingY = -pad_h;\n    boundingY + kernel_h <= height + pad_h;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = -pad_w;\n      boundingX + kernel_w <= width + pad_w;\n      boundingX += stride_w\n    ) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (\n              boundingY + y >= 0 &&\n              boundingX + x >= 0 &&\n              boundingX + x < width &&\n              boundingY + y < height\n            ) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[\n                  (y + boundingY) * width + boundingX + x + inputOffset\n                ][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = setZeros(\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  );\n\n  for (\n    let boundingY = 0;\n    boundingY + kernel_h <= height;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = 0;\n      boundingX + kernel_w <= width;\n      boundingX += stride_w\n    ) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(\n              _max,\n              input.data[\n                inputOffset + (y + boundingY) * width + boundingX + x\n              ][0]\n            );\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { Dataset } from \"./dataset/dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      delta = layer.getBackPropagation().propagate(X, m, regularization, delta);\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number) {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/\";\nimport { MaxPoolLayer } from \"./layer/\";\nimport { FullyConnectedLayer } from \"./layer/\";\nimport { PurelinLayer } from \"./layer/purelin\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport {\n  elementWiseAdd,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  Matrix,\n  multiply,\n} from \"../../math/matrix\";\nimport { elementWiseDivideNumber } from \"../../math/matrix\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = multiply(sigma, previousActivations.transpose().conjugate());\n    this.layer.gW = elementWiseAdd(\n      elementWiseDivideNumber(delta, numberOfExamples),\n      elementWiseMultiplyNumber(this.layer.W, regularization / numberOfExamples)\n    );\n    this.layer.gb = elementWiseDivideNumber(\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return elementWiseMultiply(\n        multiply(this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix, setZeros } from \"../../math/matrix\";\nimport { Layers3D } from \"../../types\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const prevLayer = this.previousLayer;\n    const result = setZeros(new Matrix(prevLayer.Z.rows, prevLayer.Z.cols));\n\n    const filterSize = prevLayer.getFilterSize();\n    const stride = prevLayer.getStride();\n    const inputWidth = prevLayer.getWidth();\n    const inputHeight = prevLayer.getHeight();\n    const inputDepth = prevLayer.getDepth();\n    const outputWidth = prevLayer.getOutputWidth();\n    const outputHeight = prevLayer.getOutputHeight();\n    const outputDepth = prevLayer.getOutputDepth();\n\n    for (let m = 0; m < numberOfExamples; m++) {\n      for (let c = 0; c < outputDepth; c++) {\n        for (let h = 0; h < outputHeight; h++) {\n          for (let w = 0; w < outputWidth; w++) {\n            const vertStart = stride * h;\n            const vertEnd = vertStart + filterSize;\n            const horizStart = stride * w;\n            const horizEnd = horizStart + filterSize;\n\n            let _max = -Infinity;\n            const inputOffset = inputHeight * inputWidth * c;\n            const outputOffset = outputHeight * outputWidth * c;\n            let maxX = 0;\n            let maxY = 0;\n\n            for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n              for (\n                let x = 0, hStart = horizStart;\n                x < filterSize;\n                x++, hStart++\n              ) {\n                if (\n                  _max <\n                  prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][\n                    m\n                  ]\n                ) {\n                  _max =\n                    prevLayer.Z.data[\n                      inputOffset + vStart * inputWidth + hStart\n                    ][m];\n                  maxX = hStart;\n                  maxY = vStart;\n                }\n              }\n            }\n\n            result.data[inputOffset + maxY * inputWidth + maxX][m] =\n              sigma[outputOffset + h * outputWidth + w][m];\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix, setZeros } from \"../../math/matrix\";\nimport { Layers3D } from \"../../types\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousLayer = this.previousLayer;\n\n    const padding = previousLayer.getPadding();\n    const stride = previousLayer.getStride();\n    const filterSize = previousLayer.getFilterSize();\n    const outputWidth = previousLayer.getOutputWidth();\n    const outputHeight = previousLayer.getOutputHeight();\n    const outputDepth = previousLayer.getOutputDepth();\n    const inputWidth = previousLayer.getWidth();\n    const inputHeight = previousLayer.getHeight();\n    const inputDepth = previousLayer.getDepth();\n\n    const tmpResult = setZeros(\n      new Matrix(\n        (inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth,\n        numberOfExamples\n      )\n    );\n\n    const result = new Matrix(\n      inputWidth * inputHeight * inputDepth,\n      numberOfExamples\n    );\n\n    const aPrev = previousLayer.derivative(previousLayer.A);\n\n    previousLayer.gW = setZeros(previousLayer.gW);\n    previousLayer.gb = setZeros(previousLayer.gb);\n\n    for (let m = 0; m < numberOfExamples; m++) {\n      for (let c = 0; c < outputDepth; c++) {\n        for (let h = 0; h < outputHeight; h++) {\n          for (let w = 0; w < outputWidth; w++) {\n            const vertStart = stride * h;\n            const vertEnd = vertStart + filterSize;\n            const horizStart = stride * w;\n            const horizEnd = horizStart + filterSize;\n\n            // filter loop\n            for (let d = 0; d < inputDepth; d++) {\n              for (\n                let y = 0, vertical = vertStart, verticalPad = -padding;\n                y < filterSize;\n                y++, vertical++, verticalPad++\n              ) {\n                for (\n                  let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                  x < filterSize;\n                  x++, horizontal++, horizontalPad++\n                ) {\n                  tmpResult[\n                    d *\n                      (inputWidth + 2 * padding) *\n                      (inputHeight + 2 * padding) +\n                      vertical * (inputWidth + 2 * padding) +\n                      horizontal\n                  ][m] +=\n                    previousLayer.W.data[c][\n                      d * filterSize * filterSize + y * filterSize + x\n                    ] *\n                    sigma[c * outputWidth * outputHeight + h * outputWidth + w][\n                      m\n                    ];\n\n                  let z = 0;\n                  if (padding == 0) {\n                    z =\n                      previousLayer.Z.data[\n                        d * inputWidth * inputHeight +\n                          vertical * inputWidth +\n                          horizontal\n                      ][m];\n                  } else {\n                    if (\n                      verticalPad >= 0 &&\n                      horizontalPad >= 0 &&\n                      verticalPad < inputHeight &&\n                      horizontalPad < inputWidth\n                    ) {\n                      z =\n                        previousLayer.Z.data[\n                          d * inputWidth * inputHeight +\n                            verticalPad * inputWidth +\n                            horizontalPad\n                        ][m];\n                    }\n                  }\n\n                  previousLayer.gW.data[c][\n                    d * filterSize * filterSize + y * filterSize + x\n                  ] +=\n                    (z *\n                      sigma[\n                        c * (outputWidth * outputHeight) + h * outputWidth + w\n                      ][m]) /\n                    numberOfExamples;\n                }\n              }\n            }\n\n            previousLayer.gb.data[c][0] +=\n              sigma[c * (outputWidth * outputHeight) + h * outputWidth + w][m] /\n              numberOfExamples;\n          }\n        }\n      }\n\n      if (padding > 0) {\n        // unpad\n        for (let c = 0; c < inputDepth; c++) {\n          for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n            for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n              if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight) {\n                result[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                  tmpResult[\n                    c *\n                      (inputWidth + 2 * padding) *\n                      (inputHeight + 2 * padding) +\n                      y * (inputWidth + 2 * padding) +\n                      x\n                  ][m];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (padding > 0) {\n      return result;\n    }\n\n    return tmpResult;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation1dto1d\";\nimport { Backpropagation3Dto1D } from \"./backpropagationto3dto1d\";\nimport { BackpropagationToMaxPool } from \"./backpropagationtomaxpool\";\nimport { BackpropagationToConv } from \"./backpropagationtoconv\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers) {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (\n        previousLayer.is1D() ||\n        previousLayer.getType() == LayerType.fullyconnected\n      ) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/factory\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    // @ts-ignore\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(\n      BackpropagationFactory.create(this.lastLayer, layer)\n    );\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import { elementWiseAdd, Matrix, multiply, penalty } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(\n      multiply(this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return penalty(this.W);\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(this.height, this.width);\n    this.cW = setZeros(this.cW);\n\n    this.cb.resize(this.height, 1);\n    this.cb = setZeros(this.cb);\n\n    this.vW.resize(this.height, this.width);\n    this.vW = setZeros(this.vW);\n\n    this.vb.resize(this.height, 1);\n    this.vb = setZeros(this.cb);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return logisticDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix, tanhActivation, tanhDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return tanhActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return tanhDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix, reluActivation, reluDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix, softplusActivation, softplusDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softplusActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return softplusDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { Dimension } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure() {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: AbstractLayer): AbstractLayer3D {\n    if (previousLayer.is3D()) {\n      this.setSize([\n        previousLayer.getOutputWidth(),\n        previousLayer.getOutputHeight(),\n        previousLayer.getOutputDepth(),\n      ]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension) {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n}\n\nexport { AbstractLayer3D };\n","import {\n  Matrix,\n  fillRandom,\n  setZeros,\n  reluActivation,\n  reluDerivative,\n  im2col,\n  elementWiseAdd,\n  multiply,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\n\nclass ConvLayer extends AbstractLayer3D {\n  protected numFilters: number = 32;\n  protected filterSize: number = 4;\n  protected padding: number = 1;\n  protected stride: number = 1;\n\n  configure() {\n    this.W.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.W = fillRandom(this.W, this.width * this.height * this.depth);\n\n    this.b.resize(this.numFilters, 1);\n    this.b = fillRandom(this.b, 0.01);\n\n    this.gW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.cW = setZeros(this.gb);\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = setZeros(this.cb);\n\n    this.vW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.vW = setZeros(this.vW);\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = setZeros(this.vb);\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = elementWiseAdd(\n        multiply(this.W, conv),\n        this.b.replicate(1, input.cols)\n      ).rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { ConvLayer };\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure() {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\n          \"Invalid usage. Cannot fully connect with previous non maxpool layer.\"\n        );\n      }\n    } else {\n      throw new Error(\n        \"Invalid usage. Cannot fully connect with previous 1D layer.\"\n      );\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix, maxpool } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\nimport { BackpropagationToMaxPool } from \"./backpropagation/backpropagationtomaxpool\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize: number;\n  stride: number;\n\n  configure() {\n    this.backPropagation = new BackpropagationToMaxPool(\n      this,\n      this.previousLayer\n    );\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { ConvLayer } from \"../layer/conv\";\nimport { MaxPoolLayer } from \"../layer/maxpool\";\n\nclass Builder3D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setSize(this.dimensions);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder3D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            layerClass = ConvLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {});\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder3D };\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize: number = 0;\n  public numberOfExamples: number = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = arr[example][dataIndex].length\n          ? Number(arr[example][dataIndex])\n          : NaN;\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix {\n    return this.data.block(0, offset, this.data.rows, batchSize);\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize: number = 0;\n  protected t: number = 0;\n  protected learningRate: number = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers);\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseAdd,\n  elementWiseDivide,\n  elementWiseDivideNumber,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n  sqrt,\n} from \"../../math/matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number) {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n    const epsilon = 1e-8;\n\n    layer.vW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const wCorrected = elementWiseDivideNumber(\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    );\n\n    layer.cW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const sCorrected = sqrt(\n      elementWiseMultiplyNumber(layer.cW, 1 - Math.pow(beta2, t))\n    );\n\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(wCorrected, sCorrected),\n        learningRate\n      )\n    );\n\n    layer.vb = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vb, beta1),\n      elementWiseMultiplyNumber(layer.gb, 1 - beta1)\n    );\n    const wCorrected2 = elementWiseDivideNumber(\n      layer.vb,\n      1 - Math.pow(beta1, t)\n    );\n    layer.cb = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cb, beta2),\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(layer.gb, layer.gb),\n        1 - beta2\n      )\n    );\n    const sCorrected2 = sqrt(\n      elementWiseDivideNumber(layer.cb, 1 - Math.pow(beta2, t))\n    );\n\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(\n        elementWiseDivide(wCorrected2, sCorrected2),\n        learningRate\n      )\n    );\n  }\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n} from \"../../math/matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number) {\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(layer.gW, learningRate)\n    );\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(layer.gb, learningRate)\n    );\n  }\n}\n","import { AbstractTrainer } from \"./abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize: number = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset) {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += this.batchSize, offset += this.batchSize\n      ) {\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input);\n\n        this.network.backward(input, output, forward, this.regularization);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.setT(++t);\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset + 1} / ${Math.ceil(\n              numberOfExamples / this.batchSize\n            )} | Time: ${endIterationTime - startIterationTime} ms.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${endTime - startTime} ms.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback({\n          iteration: i,\n        });\n      }\n    }\n  }\n}\n","import Network from \"../network\";\nimport { AbstractOptimizer } from \"./optimizer/abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport abstract class AbstractTrainer {\n  network: Network = null;\n  optimizer: AbstractOptimizer = null;\n  regularization: number = 0;\n  iterations: number = 1000;\n  learningRate: number = 0.1;\n  verbose: boolean = true;\n  verboseStep: number = 1;\n  stepCallback: Function = () => null;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: Function): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset) {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (\n      let batch = 0, offset = 0;\n      batch < numberOfExamples;\n      batch += batchSize, offset += 1\n    ) {\n      const predictedOutput = this.network.forward(\n        inputDataset.getBatch(offset, batchSize)\n      );\n      const correctOutput = outputDataset.getBatch(offset, batchSize);\n\n      const miniBatchSize = correctOutput.cols;\n\n      let loss = this.network.loss(correctOutput, predictedOutput);\n      let error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss +\n          (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = predictedOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    const result = {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n\n    return result;\n  }\n}\n","import { Dataset } from \"../dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  apply(): Dataset {\n    for (\n      let example = 0;\n      example < this.dataset.getNumberOfExamples();\n      example += 1\n    ) {\n      this.applyToExample(example);\n    }\n\n    return this.dataset;\n  }\n\n  abstract applyToExample(example: number): void;\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType: string = \"mean\";\n\n  applyToExample(example: number) {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.data.rows; row += 1) {\n        if (isNaN(example[row][0])) {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      this.dataset.data.data[row][col] = valueToFill;\n    });\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Builder1D } from \"./builder/builder1d\";\nimport { Builder3D } from \"./builder/builder3d\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/matrix\";\nimport {\n  multiply as matrixMultiply,\n  sum as matrixSum,\n  fillRandom as matrixFillRandom,\n  elementWiseMultiply as matrixElementWiseMultiply,\n  elementWiseDivide as matrixElementWiseDivide,\n  elementWiseAdd as matrixElementWiseAdd,\n  elementWiseSubtract as matrixElementWiseSubtract,\n} from \"./math/matrix\";\nimport { DatasetBuilder } from \"./dataset/datasetbuilder\";\nimport { OptimizerAdam } from \"./trainer/optimizer/adam\";\nimport { OptimizerGradientDescent } from \"./trainer/optimizer/gradientdescent\";\nimport { MiniBatchTrainer } from \"./trainer/minibatch\";\nimport { CallbackDatabaseModifier } from \"./dataset/datasetmodifier/callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./dataset/datasetmodifier/minmaxscaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./dataset/datasetmodifier/missingdata\";\n\nconst Builders = { Builder1D, Builder3D };\nconst Math = {\n  Matrix,\n  matrixMultiply,\n  matrixSum,\n  matrixFillRandom,\n  matrixElementWiseMultiply,\n  matrixElementWiseDivide,\n  matrixElementWiseAdd,\n  matrixElementWiseSubtract,\n};\nconst Layers = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst Dataset = {\n  DatasetBuilder: DatasetBuilder,\n};\nconst Optimizers = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainers = {\n  MiniBatchTrainer,\n};\nconst DatasetModifiers = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\n\nexport {\n  Builders,\n  Math,\n  Layers,\n  Dataset,\n  Optimizers,\n  Trainers,\n  DatasetModifiers,\n};\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: Function = (example) => example;\n\n  applyToExample(example: number) {\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.data.rows; row += 1) {\n        this.dataset.data.data[row][exampleIndex] = example.data.data[row][0];\n      }\n    }\n  }\n\n  setCallback(callback: Function): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\nimport { gpu } from \"../../math/matrix\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.rows; row += 1) {\n        min = Math.min(example.data[row][0]);\n        max = Math.max(example.data[row][0]);\n      }\n    }\n\n    const kernel = gpu\n      .createKernel(function (a) {\n        // @ts-ignore\n        return (\n          (a[this.thread.x][this.thread.y] - this.constants.min) /\n          (this.constants.max - this.constants.min)\n        );\n      })\n      .setOutput([this.dataset.data.data.rows, this.dataset.data.data.cols])\n      .setConstants({\n        min,\n        max,\n      });\n    this.dataset.data.data = kernel(this.dataset.data.data);\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","gpu","require","GPU","mode","Matrix","rows","cols","data","this","resize","generateData","row","Array","arr","col","Float32Array","result","ArrayBuffer","view","DataView","forEach","num","i","setFloat64","sum","oldData","newData","kernel","createKernel","a","thread","y","x","setOutput","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","multiply","m1","m2","Error","b","constants","setConstants","elementWiseAdd","elementWiseSubtract","fillRandom","parameter","Math","random","sqrt","setZeros","elementWiseMultiply","elementWiseMultiplyNumber","number","elementWiseDivide","elementWiseDivideNumber","reluActivation","m","reluDerivative","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","inputOffset","maxpool","resultWidth","resultHeight","_max","outputOffset","Network","dimensions","layer","size","layers","push","output","forward","X","Y","predictions","regularization","delta","reverse","getBackPropagation","propagate","length","loss","error","path","resultJSON","type","getType","getSize","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","LayerType","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","sigma","previousActivations","A","transpose","conjugate","gW","gb","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","fullyconnected","AbstractBuilder","dimension","network","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","cW","vb","cb","backPropagation","replicate","activation","depth","pow","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","exp","divider","colwiseSum","softmaxActivation","softmax","log","softmaxLoss","LogisticLayer","logisticActivation","logisticDerivative","logistic","kernel2","kernel3","logisticLoss","TanhLayer","tanhActivation","tanhDerivative","tanh","ReluLayer","relu","SoftplusLayer","softplusActivation","softplusDerivative","softplus","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","rollToColMatrix","setCol","FullyConnectedLayer","MaxPoolLayer","pool","Builder1D","jsonPath","json","parse","toString","builder","layerData","layerClass","createLayer","getNetwork","getLayers","Builder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","example","dataIndex","Number","NaN","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","AbstractOptimizer","t","learningRate","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","MiniBatchTrainer","inputDataset","outputDataset","getNumberOfExamples","startTime","Date","getTime","optimizer","setBatchSize","iterations","startIterationTime","batch","getBatch","backward","setT","optimize","verbose","endIterationTime","ceil","verboseStep","endTime","currentResult","cost","accuracy","stepCallback","iteration","numBatches","penalty","predictedOutput","correctOutput","miniBatchSize","colMaxCoeffIndex","AbstractDatasetModifier","applyToExample","Builders","matrixMultiply","matrixSum","matrixFillRandom","matrixElementWiseMultiply","matrixElementWiseDivide","matrixElementWiseAdd","matrixElementWiseSubtract","Layers","Optimizers","Trainers","DatasetModifiers","CallbackDatabaseModifier","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","isNaN","modificationType"],"sourceRoot":""}