{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n\n    return max;\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let sigma = getComputation().execute(\"subtract\", predictions, Y) as Matrix;\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].backpropagation(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = sigma.dot(previousActivations.transpose());\n    this.layer.gW = this.layer.gW.multiply(1 / numberOfExamples);\n    //this.layer.gW = this.layer.gW.add(this.layer.W.multiply(regularization).divide(numberOfExamples));\n    this.layer.gb = sigma\n      .rowwiseSum()\n      .transpose()\n      .multiply(1 / numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        console.log(\n          this.layer.W.rows,\n          this.layer.W.cols,\n          sigma.rows,\n          sigma.cols,\n          this.layer.gW.rows,\n          this.layer.gW.cols\n        );\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n\n  abstract backpropagation(delta: Matrix): Matrix;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    const max = m.max();\n    return m.forEach((num) => num - max).exp();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return this.A.exp().divide(this.A.sum());\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\nimport { logisticActivation } from \"../Computation/ComputationCPU\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    return this.activation(delta).multiply(this.activation(delta).minusOne());\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\nimport { tanhActivation } from \"../Computation/ComputationCPU\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m\n      .multiply(-2)\n      .exp()\n      .add(1)\n      .forEach((num) => 2 / num)\n      .subtract(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  backpropagation(sigma: Matrix): Matrix {\n    return this.activation(this.A).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  backpropagation(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.gW, 2) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected = getComputation().execute(\"divideNumber\", layer.sW, 1 - Math.pow(this.beta2, this.t)) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected,\n          getComputation().execute(\"sqrt\", sCorrected) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected2 = getComputation().execute(\"divideNumber\", layer.sb, 1 - Math.pow(this.beta2, t)) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected2,\n          getComputation().execute(\"sqrt\", sCorrected2) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gW, layer.gW) as Matrix,\n        1.0 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.sW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.sb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.sb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta) as Matrix\n    ) as Matrix;\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.vW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.vb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-8;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictedOutput = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    /*const error = predictedOutput\n      .transpose()\n      .multiply(-1)\n      .log()\n      .dot(correctOutput)\n      .add(correctOutput.transpose().subtractFromNumber(1).dot(predictedOutput.minusOne().log().multiply(-1)))\n      .sum();*/\n    const error = correctOutput.subtract(predictedOutput).sum();\n    const cost =\n      (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.getNumberOfExamples()));\n\n    for (let col = 0; col < predictedOutput.cols; col += 1) {\n      const index1 = predictedOutput.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, forward, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input, output);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 100} s.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback.call(null, {\n          iteration: i,\n        });\n      }\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AbstractComputation","name","func","this","kernels","Error","args","apply","elementWiseDivide","m1","m2","rows","cols","data","row","col","Matrix","divideNumber","num","logisticActivation","m","Math","exp","logisticLoss","output","predictions","log","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","currentComputation","getComputation","resize","generateData","arr","Float32Array","length","Number","NaN","t","push","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","numberOfElements","cb","gpu","GPU","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","softmaxActivation","divider","colwiseSum","replicate","softmaxLoss","kernel2","kernel3","purelinLoss","ComputationGPU","LayerType","Network","dimensions","layer","size","layers","input","forEach","forward","X","Y","regularization","getBackPropagation","propagate","backpropagation","path","resultJSON","type","getType","getSize","weights","W","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","A","gW","gb","rowwiseSum","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","vb","sW","sb","dW","db","backPropagation","activation","width","height","depth","AbstractLayer1D","setRandom","setZeros","setWidth","is3D","setHeight","SoftmaxLayer","softmax","delta","divide","LogisticLayer","fraction","logistic","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","dataset","AbstractOptimizer","learningRate","OptimizerAdam","beta1","beta2","adam","vCorrected","sCorrected","vCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerMomentum","momentum","beta","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","accuracy","predictedOutput","correctOutput","cost","colMaxCoeffIndex","MiniBatchTrainer","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","CallbackDatabaseModifier","example","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","Trainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource"],"sourceRoot":""}