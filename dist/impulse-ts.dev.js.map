{"version":3,"file":"impulse-ts.dev.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAMO,IAAMA,mBAAb;AAAA;AAAA;;AAAA,qCACwC,EADxC;AAAA;;AAAA;AAAA;AAAA,WAGE,mBAAUC,IAAV,EAAwBC,IAAxB,EAAwG;AACtG,WAAKC,OAAL,CAAaF,IAAb,IAAqBC,IAArB;AACA,aAAO,IAAP;AACD;AANH;AAAA;AAAA,WAQE,iBAAQD,IAAR,EAAgG;AAC9F,UAAI,CAAC,KAAKE,OAAL,CAAaF,IAAb,CAAL,EAAyB;AACvB,cAAM,IAAIG,KAAJ,mBAAqBH,IAArB,mBAAN;AACD;;AAH6F,wCAAvEI,IAAuE;AAAvEA,QAAAA,IAAuE;AAAA;;AAI9F,aAAO,KAAKF,OAAL,CAAaF,IAAb,EAAmBK,KAAnB,CAAyB,IAAzB,EAA+BD,IAA/B,CAAP;AACD;AAbH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,EAAD,EAAaC,EAAb,EAAoC;AACnE,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAMS,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBL,EAAE,CAACG,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAArC;AACD;AACF;;AAED,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAlBM;AAoBA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACP,EAAD,EAAaQ,GAAb,EAAqC;AAC/D,MAAMJ,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBE,GAArC;AACD;AACF;;AAED,SAAO,IAAIV,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAuB;AACvD,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,OAAO,MAAMK,IAAI,CAACC,GAAL,CAAS,CAACF,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAV,CAAb,CAAjB;AACD;AACF;;AACD,SAAOR,qDAAA,CAAYM,IAAZ,CAAP;AACD,CATM;AAWA,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAiBC,WAAjB,EAAiD;AAC3E,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,OAAO,GAAG,IAAhB;;AAEA,OAAK,IAAIb,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGW,WAAW,CAACd,IAApC,EAA0CG,GAAG,IAAI,CAAjD,EAAoD;AAClDY,IAAAA,GAAG,CAACZ,GAAD,CAAH,GAAW,EAAX;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGU,WAAW,CAACb,IAApC,EAA0CG,GAAG,IAAI,CAAjD,EAAoD;AAClD,UAAIU,WAAW,CAACZ,IAAhB,EAAsB;AACpBa,QAAAA,GAAG,CAACZ,GAAD,CAAH,CAASC,GAAT,IAAgBK,IAAI,CAACM,GAAL,CAASD,WAAW,CAACZ,IAAZ,CAAiBC,GAAjB,EAAsBC,GAAtB,IAA6BY,OAAtC,CAAhB;AACD;AACF;AACF;;AACD,MAAMC,WAAW,GAAGC,mBAAmB,CAAC,IAAItB,gDAAJ,CAAWkB,WAAW,CAACd,IAAvB,EAA6Bc,WAAW,CAACb,IAAzC,EAA+Cc,GAA/C,CAAD,EAAsDF,MAAtD,CAAvC;AAEA,MAAMM,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIhB,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAGU,MAAM,CAACb,IAA/B,EAAqCG,IAAG,IAAI,CAA5C,EAA+C;AAC7CgB,IAAAA,GAAG,CAAChB,IAAD,CAAH,GAAW,EAAX;;AACA,SAAK,IAAIC,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAGS,MAAM,CAACZ,IAA/B,EAAqCG,IAAG,IAAI,CAA5C,EAA+C;AAC7C,UAAIS,MAAM,CAACX,IAAX,EAAiB;AACfiB,QAAAA,GAAG,CAAChB,IAAD,CAAH,CAASC,IAAT,IAAgB,MAAMS,MAAM,CAACX,IAAP,CAAYC,IAAZ,EAAiBC,IAAjB,CAAtB;AACD;AACF;AACF;;AACD,MAAMgB,WAAW,GAAG,IAAIxB,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCkB,GAArC,CAApB;AAEA,MAAMjB,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAGW,WAAW,CAACd,IAApC,EAA0CG,KAAG,IAAI,CAAjD,EAAoD;AAClDD,IAAAA,IAAI,CAACC,KAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAGU,WAAW,CAACb,IAApC,EAA0CG,KAAG,IAAI,CAAjD,EAAoD;AAClD,UAAIU,WAAW,CAACZ,IAAhB,EAAsB;AACpBA,QAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,KAAV,IAAiBK,IAAI,CAACM,GAAL,CAAS,MAAMD,WAAW,CAACZ,IAAZ,CAAiBC,KAAjB,EAAsBC,KAAtB,CAAN,GAAmCY,OAA5C,CAAjB;AACD;AACF;AACF;;AACD,MAAMK,WAAW,GAAG,IAAIzB,gDAAJ,CAAWkB,WAAW,CAACd,IAAvB,EAA6Bc,WAAW,CAACb,IAAzC,EAA+CC,IAA/C,CAApB;AAEA,SAAOoB,GAAG,CACRJ,mBAAmB,CAACK,cAAc,CAACN,WAAD,EAAc,CAAC,CAAf,CAAf,EAAkCJ,MAAlC,CADX,EAERK,mBAAmB,CAACK,cAAc,CAACF,WAAD,EAAc,CAAC,CAAf,CAAf,EAAkCG,kBAAkB,CAACJ,WAAD,EAAc,CAAd,CAApD,CAFX,CAAH,CAGLK,GAHK,EAAP;AAID,CAxCM;AA0CA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAgBC,IAAhB,EAAyC;AAC9E,SAAOrB,kBAAkB,CAACqB,IAAD,CAAlB,CAAyBC,QAAzB,CAAkCtB,kBAAkB,CAACqB,IAAD,CAAlB,CAAyBE,QAAzB,EAAlC,CAAP;AACD,CAFM;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACvB,CAAD,EAAuB;AACnD,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAC,IAAIK,IAAI,CAACC,GAAL,CAAS,CAAC,CAAD,GAAKF,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAd,CAAL,KAAyC,IAAIK,IAAI,CAACC,GAAL,CAAS,CAAC,CAAD,GAAKF,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAd,CAA7C,CAAjB;AACD;AACF;;AACD,SAAOR,qDAAA,CAAYM,IAAZ,CAAP;AACD,CATM;AAWA,IAAM8B,cAAc,GAAG,SAAjBA,cAAiB,CAACxB,CAAD,EAAuB;AACnD,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxC,UAAII,CAAC,CAACN,IAAN,EAAY;AACVA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACwB,GAAL,CAAS,GAAT,EAAczB,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAd,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BC,IAA3B,CAAP;AACD,CAXM;AAaA,IAAMgC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACP,KAAD,EAAgBC,IAAhB,EAAyC;AAC1E,MAAM1B,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGwB,KAAK,CAAC3B,IAA9B,EAAoCG,GAAG,IAAI,CAA3C,EAA8C;AAC5CD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGuB,KAAK,CAAC1B,IAA9B,EAAoCG,GAAG,IAAI,CAA3C,EAA8C;AAC5C,UAAIuB,KAAK,CAACzB,IAAV,EAAgB;AACdA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBwB,IAAI,CAAC1B,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB,CAAtB,GAA0B,CAA1B,GAA8B,CAA/C;AACD;AACF;AACF;;AACD,SAAOc,mBAAmB,CAAC,IAAItB,gDAAJ,CAAW+B,KAAK,CAAC3B,IAAjB,EAAuB2B,KAAK,CAAC1B,IAA7B,EAAmCC,IAAnC,CAAD,EAA2CyB,KAA3C,CAA1B;AACD,CAXM;AAaA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC3B,CAAD,EAAuB;AACvD,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxC,UAAII,CAAC,CAACN,IAAN,EAAY;AACVA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACM,GAAL,CAAS,IAAIN,IAAI,CAACC,GAAL,CAASF,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAT,CAAb,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BC,IAA3B,CAAP;AACD,CAXM;AAaA,IAAMkC,OAAO,GAAG,SAAVA,OAAU,CAAC5B,CAAD,EAAuB;AAC5C,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxC,UAAII,CAAC,CAACN,IAAN,EAAY;AACVA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC4B,GAAL,CAAS7B,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAT,EAA2B,CAA3B,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BC,IAA3B,EAAiCuB,GAAjC,EAAP;AACD,CAXM;AAaA,IAAMa,IAAI,GAAG,SAAPA,IAAO,CAAC9B,CAAD,EAAuB;AACzC,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxC,UAAII,CAAC,CAACN,IAAN,EAAY;AACVA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC6B,IAAL,CAAU9B,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,IAAmB,IAA7B,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BC,IAA3B,CAAP;AACD,CAXM;AAaA,IAAMqC,WAAW,GAAG,SAAdA,WAAc,CAAC1B,MAAD,EAAiBC,WAAjB,EAAiD;AAC1E,MAAMZ,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGU,MAAM,CAACb,IAA/B,EAAqCG,GAAG,IAAI,CAA5C,EAA+C;AAC7CD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGS,MAAM,CAACZ,IAA/B,EAAqCG,GAAG,IAAI,CAA5C,EAA+C;AAC7C,UAAIS,MAAM,CAACX,IAAX,EAAiB;AACfA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBS,MAAM,CAACX,IAAP,CAAYC,GAAZ,EAAiBC,GAAjB,IAAwBK,IAAI,CAAC4B,GAAL,CAASvB,WAAW,CAACX,GAAD,CAAX,CAAiBC,GAAjB,CAAT,EAAgC,CAAhC,CAAzC;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCC,IAArC,EAA2CuB,GAA3C,EAAP;AACD,CAXM;AAaA,IAAMe,GAAG,GAAG,SAANA,GAAM,CAAC1C,EAAD,EAAaC,EAAb,EAAoC;AACrD,MAAID,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,qCAAuCK,EAAE,CAACE,IAA1C,cAAkDF,EAAE,CAACG,IAArD,0BAAyEF,EAAE,CAACC,IAA5E,cAAoFD,EAAE,CAACE,IAAvF,OAAN;AACD;;AACD,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiC,EAAEG,GAAnC,EAAwC;AACtCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,IAAIsC,KAAJ,CAAU1C,EAAE,CAACE,IAAb,CAAZ;;AACA,SAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiC,EAAEG,GAAnC,EAAwC;AACtCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;;AACA,WAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,EAAE,CAACG,IAAvB,EAA6B,EAAEyC,CAA/B,EAAkC;AAChC,YAAI5C,EAAE,CAACI,IAAH,IAAWH,EAAE,CAACG,IAAlB,EAAwB;AACtBA,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,KAAkBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAauC,CAAb,IAAkB3C,EAAE,CAACG,IAAH,CAAQwC,CAAR,EAAWtC,GAAX,CAApC;AACD;AACF;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAjBM;AAmBA,IAAMoB,GAAG,GAAG,SAANA,GAAM,CAACxB,EAAD,EAAaC,EAAb,EAAoC;AACrD,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,0CAA4CK,EAAE,CAACG,IAA/C,0BAAmEF,EAAE,CAACE,IAAtE,EAAN;AACD;;AAED,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAH,IAAWH,EAAE,CAACG,IAAlB,EAAwB;AACtBA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBL,EAAE,CAACG,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAArC;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAlBM;AAoBA,IAAMyC,QAAQ,GAAG,SAAXA,QAAW,CAAC7C,EAAD,EAAaC,EAAb,EAAoC;AAC1D,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,0CAA4CK,EAAE,CAACE,IAA/C,0BAAmED,EAAE,CAACC,IAAtE,EAAN;AACD;;AACD,MAAIF,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,0CAA4CK,EAAE,CAACG,IAA/C,0BAAmEF,EAAE,CAACE,IAAtE,EAAN;AACD;;AAED,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAH,IAAWH,EAAE,CAACG,IAAlB,EAAwB;AACtBA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBL,EAAE,CAACG,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAArC;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAlBM;AAoBA,IAAM0C,UAAU,GAAG,SAAbA,UAAa,CAAC9C,EAAD,EAAa+C,SAAb,EAA2C;AACnE,MAAM3C,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAACK,IAAI,CAACqC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BrC,IAAI,CAAC6B,IAAL,CAAU,IAAIO,SAAd,CAA3C,CADyC,CAC4B;AACtE;AACF;;AACD,SAAO,IAAIjD,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CATM;AAWA,IAAM6C,SAAS,GAAG,SAAZA,SAAY,CAACjD,EAAD,EAAwB;AAC/C,MAAMI,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;AACD;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CATM;AAWA,IAAM8C,OAAO,GAAG,SAAVA,OAAU,CAAClD,EAAD,EAAwB;AAC7C,MAAMI,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;AACD;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CATM;AAWA,IAAMgB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACpB,EAAD,EAAaC,EAAb,EAAoC;AACrE,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,0CAA4CK,EAAE,CAACE,IAA/C,0BAAmED,EAAE,CAACC,IAAtE,EAAN;AACD;;AACD,MAAIF,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,0CAA4CK,EAAE,CAACG,IAA/C,0BAAmEF,EAAE,CAACE,IAAtE,EAAN;AACD;;AAED,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAH,IAAWH,EAAE,CAACG,IAAlB,EAAwB;AACtBA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBL,EAAE,CAACG,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAArC;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAlBM;AAoBA,IAAMqB,cAAc,GAAG,SAAjBA,cAAiB,CAACzB,EAAD,EAAaQ,GAAb,EAAqC;AACjE,MAAMJ,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAP,EAAa;AACXA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBE,GAArC;AACD;AACF;AACF;;AACD,SAAO,IAAIV,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAMsB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC1B,EAAD,EAAaQ,GAAb,EAAqC;AACrE,MAAMJ,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAP,EAAa;AACXA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBE,GAAG,GAAGR,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAAvB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAMmC,GAAG,GAAG,aAACvC,EAAD,EAAauC,IAAb,EAAqC;AACtD,MAAMnC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAP,EAAa;AACXA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC4B,GAAL,CAASvC,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAAT,EAA4BiC,IAA5B,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIzC,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAMa,GAAG,GAAG,SAANA,GAAM,CAACjB,EAAD,EAAauC,GAAb,EAAqC;AACtD,MAAMnC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAP,EAAa;AACXA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACM,GAAL,CAASjB,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoB,IAA7B,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAM+C,WAAW,GAAG,SAAdA,WAAc,CAACnD,EAAD,EAAauC,GAAb,EAAqC;AAC9D,MAAMnC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzC,UAAIN,EAAE,CAACI,IAAP,EAAa;AACXA,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACM,GAAL,CAAS,IAAIjB,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,CAAb,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CAXM;AAaA,IAAMgD,SAAS,GAAG,SAAZA,SAAY,CAACpD,EAAD,EAAaQ,GAAb,EAAqC;AAC5D,MAAMJ,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,EAAE,CAACE,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,EAAE,CAACG,IAA3B,EAAiCG,GAAG,IAAI,CAAxC,EAA2C;AACzCF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBN,EAAE,CAACI,IAAH,CAAQC,GAAR,EAAaC,GAAb,IAAoBE,GAArC;AACD;AACF;;AACD,SAAO,IAAIV,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BC,IAA7B,CAAP;AACD,CATM;AAWA,IAAMiD,SAAS,GAAG,SAAZA,SAAY,CAAC3C,CAAD,EAAuB;AAC9C,MAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGI,CAAC,CAACP,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCF,IAAAA,IAAI,CAACE,GAAD,CAAJ,GAAY,EAAZ;;AACA,SAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,CAAC,CAACR,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxC,UAAIK,CAAC,CAACN,IAAN,EAAY;AACVA,QAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUD,GAAV,IAAiBK,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAjB;AACD;AACF;AACF;;AACD,SAAO,IAAIR,gDAAJ,CAAWY,CAAC,CAACP,IAAb,EAAmBO,CAAC,CAACR,IAArB,EAA2BE,IAA3B,CAAP;AACD,CAXM;AAaA,IAAMkD,cAAb;AAAA;;AAAA;;AACE,4BAAc;AAAA;;AAAA;;AACZ;;AAEA,UAAKC,SAAL,CAAe,UAAf,EAA2Bb,GAA3B;;AACA,UAAKa,SAAL,CAAe,KAAf,EAAsB/B,GAAtB;;AACA,UAAK+B,SAAL,CAAe,UAAf,EAA2BV,QAA3B;;AACA,UAAKU,SAAL,CAAe,oBAAf,EAAqC7B,kBAArC;;AACA,UAAK6B,SAAL,CAAe,YAAf,EAA6BT,UAA7B;;AACA,UAAKS,SAAL,CAAe,WAAf,EAA4BN,SAA5B;;AACA,UAAKM,SAAL,CAAe,qBAAf,EAAsCnC,mBAAtC;;AACA,UAAKmC,SAAL,CAAe,gBAAf,EAAiC9B,cAAjC;;AACA,UAAK8B,SAAL,CAAe,mBAAf,EAAoCxD,iBAApC;;AACA,UAAKwD,SAAL,CAAe,cAAf,EAA+BhD,YAA/B;;AACA,UAAKgD,SAAL,CAAe,oBAAf,EAAqC9C,kBAArC;;AACA,UAAK8C,SAAL,CAAe,cAAf,EAA+BzC,YAA/B;;AACA,UAAKyC,SAAL,CAAe,yBAAf,EAA0C3B,uBAA1C;;AACA,UAAK2B,SAAL,CAAe,gBAAf,EAAiCtB,cAAjC;;AACA,UAAKsB,SAAL,CAAe,gBAAf,EAAiCrB,cAAjC;;AACA,UAAKqB,SAAL,CAAe,qBAAf,EAAsCnB,mBAAtC;;AACA,UAAKmB,SAAL,CAAe,oBAAf,EAAqClB,kBAArC;;AACA,UAAKkB,SAAL,CAAe,SAAf,EAA0BjB,OAA1B;;AACA,UAAKiB,SAAL,CAAe,MAAf,EAAuBf,IAAvB;;AACA,UAAKe,SAAL,CAAe,WAAf,EAA4BF,SAA5B;;AACA,UAAKE,SAAL,CAAe,KAAf,EAAsBhB,GAAtB;;AACA,UAAKgB,SAAL,CAAe,KAAf,EAAsBtC,GAAtB;;AACA,UAAKsC,SAAL,CAAe,aAAf,EAA8BJ,WAA9B;;AACA,UAAKI,SAAL,CAAe,WAAf,EAA4BH,SAA5B;;AA1BY;AA2Bb;;AA5BH;AAAA,EAAoC7D,qEAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/XA;AACA;AAEA;AAEO,IAAMkE,GAAG,GAAG,IAAID,uCAAJ,CAAQ;AAAEE,EAAAA,IAAI,EAAE;AAAR,CAAR,CAAZ;AAEA,IAAM3D,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,EAAD,EAAaC,EAAb,EAAoC;AACnE,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAMgE,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B;AACA,WAAOD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkCH,CAAC,CAAC,KAAKC,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAzC;AACD,GAJY,EAKZC,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUD,EAAE,CAACE,IAAb,CALE,CAAf;AAOA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,EAAUH,EAAE,CAACG,IAAb,CAAnC,CAAP;AACD,CAhBM;AAkBA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACP,EAAD,EAAaQ,GAAb,EAAqC;AAC/D,MAAMmD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOA,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkC,KAAKE,SAAL,CAAeC,MAAxD;AACD,GAJY,EAKZF,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,IAAb,CALE,EAMZkE,YANY,CAMC;AACZD,IAAAA,MAAM,EAAE5D;AADI,GAND,CAAf;AAUA,SAAO,IAAIV,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,CAAnC,CAAP;AACD,CAZM;AAcA,IAAMkE,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC5D,CAAD,EAAuB;AACtD,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACC,GAAL,CAASiD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,MAAMC,IAAI,GAAG,IAAIN,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAb;AACA,MAAMmE,OAAO,GAAG,IAAIzE,gDAAJ,CAAW,CAAX,EAAcY,CAAC,CAACP,IAAhB,EAAsBC,IAAI,CAACoE,UAAL,GAAkBpE,IAAxC,EAA8CqE,SAA9C,CAAwD/D,CAAC,CAACR,IAA1D,EAAgE,CAAhE,CAAhB;AACA,SAAO,IAAIJ,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BJ,iBAAiB,CAACK,IAAD,EAAOmE,OAAP,CAAjB,CAAiCnE,IAA5D,CAAP;AACD,CAVM;AAYA,IAAMsE,WAAW,GAAG,SAAdA,WAAc,CAAC3D,MAAD,EAAiBC,WAAjB,EAAiD;AAC1E,MAAM2C,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACM,GAAL,CAAS4C,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAAClD,WAAW,CAACd,IAAb,EAAmBc,WAAW,CAACb,IAA/B,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CACLiB,MAAM,CAACb,IADF,EAELa,MAAM,CAACZ,IAFF,EAGLiB,mBAAmB,CAACL,MAAD,EAAS,IAAIjB,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCwD,MAAM,CAAC3C,WAAW,CAACZ,IAAb,CAA3C,CAAT,CAAnB,CAA0GA,IAHrG,EAILuB,GAJK,EAAP;AAKD,CAZM;AAcA,IAAMlB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAuB;AACvD,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAO,OAAO,MAAMlD,IAAI,CAACC,GAAL,CAAS,CAACiD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAV,CAAb,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CARM;AAUA,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAiBC,WAAjB,EAAiD;AAC3E,MAAM2C,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACM,GAAL,CAAS4C,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACnD,MAAM,CAACb,IAAR,EAAca,MAAM,CAACZ,IAArB,CALE,CAAf;AAMA,MAAMwE,OAAO,GAAGlB,GAAG,CAChBG,YADa,CACA,UAAUC,CAAV,EAAa;AACzB;AACA,WAAO,MAAMA,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAb;AACD,GAJa,EAKbC,SALa,CAKH,CAACnD,MAAM,CAACb,IAAR,EAAca,MAAM,CAACZ,IAArB,CALG,CAAhB;AAMA,MAAMyE,OAAO,GAAGnB,GAAG,CAChBG,YADa,CACA,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACM,GAAL,CAAS,MAAM4C,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAf,CAAP;AACD,GAJa,EAKbC,SALa,CAKH,CAAClD,WAAW,CAACd,IAAb,EAAmBc,WAAW,CAACb,IAA/B,CALG,CAAhB;AAOA,SAAOqB,GAAG,CACRJ,mBAAmB,CAACL,MAAD,EAAS,IAAIjB,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCwD,MAAM,CAAC5C,MAAM,CAACX,IAAR,CAA3C,CAAT,CADX,EAERgB,mBAAmB,CACjB,IAAItB,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCwE,OAAO,CAAC5D,MAAM,CAACX,IAAR,CAA5C,CADiB,EAEjB,IAAIN,gDAAJ,CAAWkB,WAAW,CAACd,IAAvB,EAA6Bc,WAAW,CAACb,IAAzC,EAA+CyE,OAAO,CAAC5D,WAAW,CAACZ,IAAb,CAAtD,CAFiB,CAFX,CAAH,CAMLuB,GANK,EAAP;AAOD,CA3BM;AA6BA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACvB,CAAD,EAAuB;AACnD,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAO,OAAO,MAAMlD,IAAI,CAACC,GAAL,CAAS,CAAC,GAAD,GAAOiD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAhB,CAAb,IAAiE,GAAxE;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CARM;AASA,IAAM8B,cAAc,GAAG,SAAjBA,cAAiB,CAACxB,CAAD,EAAuB;AACnD,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACwB,GAAL,CAAS,GAAT,EAAc0B,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAd,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CARM;AAUA,IAAMiC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC3B,CAAD,EAAuB;AACvD,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAACM,GAAL,CAAS,IAAIN,IAAI,CAACC,GAAL,CAASiD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,CAAb,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CARM;AAUA,IAAMkC,OAAO,GAAG,SAAVA,OAAU,CAAC5B,CAAD,EAAuB;AAC5C,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAAC4B,GAAL,CAASsB,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,EAA0C,CAA1C,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,EAAyDuB,GAAzD,EAAP;AACD,CARM;AAUA,IAAMa,IAAI,GAAG,SAAPA,IAAO,CAAC9B,CAAD,EAAuB;AACzC,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOlD,IAAI,CAAC6B,IAAL,CAAUqB,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkC,IAA5C,CAAP;AACD,GAJY,EAKZC,SALY,CAKF,CAACxD,CAAC,CAACR,IAAH,EAASQ,CAAC,CAACP,IAAX,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWY,CAAC,CAACR,IAAb,EAAmBQ,CAAC,CAACP,IAArB,EAA2BwD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CARM;AAUA,IAAMqC,WAAW,GAAG,SAAdA,WAAc,CAAC1B,MAAD,EAAiBC,WAAjB,EAAiD;AAC1E,MAAM2C,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B;AACA,WAAOA,CAAC,CAAC,KAAKC,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkCtD,IAAI,CAAC4B,GAAL,CAASsB,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAT,EAA0C,CAA1C,CAAzC;AACD,GAJY,EAKZC,SALY,CAKF,CAACnD,MAAM,CAACb,IAAR,EAAca,MAAM,CAACZ,IAArB,CALE,CAAf;AAMA,SAAO,IAAIL,gDAAJ,CAAWiB,MAAM,CAACb,IAAlB,EAAwBa,MAAM,CAACZ,IAA/B,EAAqCwD,MAAM,CAAC5C,MAAM,CAACX,IAAR,CAA3C,EAAwEuB,GAAxE,EAAP;AACD,CARM;AAUA,IAAMe,GAAG,GAAG,SAANA,GAAM,CAAC1C,EAAD,EAAaC,EAAb,EAAoC;AACrD,MAAID,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,qCAAuCK,EAAE,CAACG,IAA1C,0BAA8DF,EAAE,CAACC,IAAjE,OAAN;AACD;;AAED,MAAMyD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B,QAAInC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKuB,SAAL,CAAehE,IAAnC,EAAyCyC,CAAC,EAA1C,EAA8C;AAC5C;AACAjB,MAAAA,GAAG,IAAIkC,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiBpB,CAAjB,IAAsBkB,CAAC,CAAClB,CAAD,CAAD,CAAK,KAAKmB,MAAL,CAAYE,CAAjB,CAA7B;AACD;;AACD,WAAOtC,GAAP;AACD,GARY,EASZuC,SATY,CASF,CAAClE,EAAE,CAACE,IAAJ,EAAUD,EAAE,CAACE,IAAb,CATE,EAUZkE,YAVY,CAUC;AACZlE,IAAAA,IAAI,EAAEH,EAAE,CAACE;AADG,GAVD,CAAf;AAcA,SAAO,IAAIJ,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,EAAUH,EAAE,CAACG,IAAb,CAAnC,CAAP;AACD,CApBM;AAsBA,IAAMoB,GAAG,GAAG,SAANA,GAAM,CAACxB,EAAD,EAAaC,EAAb,EAAoC;AACrD,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAMgE,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B;AACA,WAAOD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkCH,CAAC,CAAC,KAAKC,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAzC;AACD,GAJY,EAKZC,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUD,EAAE,CAACE,IAAb,CALE,CAAf;AAOA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,EAAUH,EAAE,CAACG,IAAb,CAAnC,CAAP;AACD,CAhBM;AAkBA,IAAMyC,QAAQ,GAAG,SAAXA,QAAW,CAAC7C,EAAD,EAAaC,EAAb,EAAoC;AAC1D,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAMgE,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B;AACA,WAAOD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkCH,CAAC,CAAC,KAAKC,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAzC;AACD,GAJY,EAKZC,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUD,EAAE,CAACE,IAAb,CALE,CAAf;AAOA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,EAAUH,EAAE,CAACG,IAAb,CAAnC,CAAP;AACD,CAhBM;AAkBA,IAAM0C,UAAU,GAAG,SAAbA,UAAa,CAAC9C,EAAD,EAAa+C,SAAb,EAA2C;AACnE,MAAMY,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,YAAY;AACxB,WAAOjD,IAAI,CAACqC,MAAL,KAAgB,GAAvB;AACD,GAHY,EAIZkB,SAJY,CAIF,CAAClE,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,IAAb,CAJE,EAKZkE,YALY,CAKC;AACZtB,IAAAA,SAAS,EAATA;AADY,GALD,CAAf;AASA,SAAO,IAAIjD,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,EAAnC,CAAP;AACD,CAXM;AAaA,IAAMV,SAAS,GAAG,SAAZA,SAAY,CAACjD,EAAD,EAAwB;AAC/C,MAAM2D,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,YAAY;AACxB,WAAO,GAAP;AACD,GAHY,EAIZM,SAJY,CAIF,CAAClE,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,IAAb,CAJE,CAAf;AAKA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,EAAnC,CAAP;AACD,CAPM;AASA,IAAMT,OAAO,GAAG,SAAVA,OAAU,CAAClD,EAAD,EAAwB;AAC7C,MAAM2D,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,YAAY;AACxB,WAAO,GAAP;AACD,GAHY,EAIZM,SAJY,CAIF,CAAClE,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,IAAb,CAJE,CAAf;AAKA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,EAAnC,CAAP;AACD,CAPM;AASA,IAAMvC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACpB,EAAD,EAAaC,EAAb,EAAoC;AACrE,MAAID,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAnB,EAAyB;AACvB,UAAM,IAAIP,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIK,EAAE,CAACG,IAAH,KAAYF,EAAE,CAACE,IAAnB,EAAyB;AACvB,UAAM,IAAIR,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,MAAMgE,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B;AACA,WAAOD,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkCH,CAAC,CAAC,KAAKC,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,CAAzC;AACD,GAJY,EAKZC,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUD,EAAE,CAACE,IAAb,CALE,CAAf;AAOA,SAAO,IAAIL,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBD,EAAE,CAACE,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,EAAUH,EAAE,CAACG,IAAb,CAAnC,CAAP;AACD,CAhBM;AAkBA,IAAMqB,cAAc,GAAG,SAAjBA,cAAiB,CAACzB,EAAD,EAAaQ,GAAb,EAAqC;AACjE,MAAMmD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOA,CAAC,CAAC,KAAKE,MAAL,CAAYC,CAAb,CAAD,CAAiB,KAAKD,MAAL,CAAYE,CAA7B,IAAkC,KAAKE,SAAL,CAAeC,MAAxD;AACD,GAJY,EAKZF,SALY,CAKF,CAAClE,EAAE,CAACE,IAAJ,EAAUF,EAAE,CAACG,IAAb,CALE,EAMZkE,YANY,CAMC;AACZD,IAAAA,MAAM,EAAE5D;AADI,GAND,CAAf;AAUA,SAAO,IAAIV,gDAAJ,CAAWE,EAAE,CAACE,IAAd,EAAoBF,EAAE,CAACG,IAAvB,EAA6BwD,MAAM,CAAC3D,EAAE,CAACI,IAAJ,CAAnC,CAAP;AACD,CAZM;AAcA,IAAMiD,SAAS,GAAG,SAAZA,SAAY,CAAC3C,CAAD,EAAuB;AAC9C,MAAMiD,MAAM,GAAGF,GAAG,CACfG,YADY,CACC,UAAUC,CAAV,EAAa;AACzB;AACA,WAAOA,CAAC,CAAC,KAAKE,MAAL,CAAYE,CAAb,CAAD,CAAiB,KAAKF,MAAL,CAAYC,CAA7B,CAAP;AACD,GAJY,EAKZE,SALY,CAKF,CAACxD,CAAC,CAACP,IAAH,EAASO,CAAC,CAACR,IAAX,CALE,CAAf;AAOA,SAAO,IAAIJ,gDAAJ,CAAWY,CAAC,CAACP,IAAb,EAAmBO,CAAC,CAACR,IAArB,EAA2ByD,MAAM,CAACjD,CAAC,CAACN,IAAH,CAAjC,CAAP;AACD,CATM;AAWA,IAAMyE,cAAb;AAAA;;AAAA;;AACE,4BAAc;AAAA;;AAAA;;AACZ;;AAEA,UAAKtB,SAAL,CAAe,UAAf,EAA2Bb,GAA3B;;AACA,UAAKa,SAAL,CAAe,KAAf,EAAsB/B,GAAtB;;AACA,UAAK+B,SAAL,CAAe,UAAf,EAA2BV,QAA3B;;AACA,UAAKU,SAAL,CAAe,YAAf,EAA6BT,UAA7B;;AACA,UAAKS,SAAL,CAAe,WAAf,EAA4BN,SAA5B;;AACA,UAAKM,SAAL,CAAe,qBAAf,EAAsCnC,mBAAtC;;AACA,UAAKmC,SAAL,CAAe,gBAAf,EAAiC9B,cAAjC;;AACA,UAAK8B,SAAL,CAAe,mBAAf,EAAoCxD,iBAApC;;AACA,UAAKwD,SAAL,CAAe,cAAf,EAA+BhD,YAA/B;;AACA,UAAKgD,SAAL,CAAe,mBAAf,EAAoCe,iBAApC;;AACA,UAAKf,SAAL,CAAe,aAAf,EAA8BmB,WAA9B;;AACA,UAAKnB,SAAL,CAAe,oBAAf,EAAqC9C,kBAArC;;AACA,UAAK8C,SAAL,CAAe,cAAf,EAA+BzC,YAA/B;;AACA,UAAKyC,SAAL,CAAe,gBAAf,EAAiCtB,cAAjC;;AACA,UAAKsB,SAAL,CAAe,gBAAf,EAAiCrB,cAAjC;;AACA,UAAKqB,SAAL,CAAe,oBAAf,EAAqClB,kBAArC;;AACA,UAAKkB,SAAL,CAAe,SAAf,EAA0BjB,OAA1B;;AACA,UAAKiB,SAAL,CAAe,MAAf,EAAuBf,IAAvB;;AACA,UAAKe,SAAL,CAAe,aAAf,EAA8Bd,WAA9B;;AACA,UAAKc,SAAL,CAAe,WAAf,EAA4BF,SAA5B;;AAtBY;AAuBb;;AAxBH;AAAA,EAAoC9D,qEAApC;;;;;;;;;;;;;;;;;;;;;;ACvSA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACDA;AAEA,IAAIyF,kBAAuC,GAAG,IAAI1B,2DAAJ,EAA9C;AAEO,IAAMwB,cAAc,GAAG,SAAjBA,cAAiB,CAACG,IAAD,EAAqC;AACjED,EAAAA,kBAAkB,GAAGC,IAArB;AACD,CAFM;AAIA,IAAMF,cAAc,GAAG,SAAjBA,cAAiB,GAA2B;AACvD,SAAOC,kBAAP;AACD,CAFM;;;;;;;;;;;;;;;;;;;;;;;ACVP;AAEO,IAAME,OAAb;AAKE,qBAA8G;AAAA,QAAlGC,WAAkG,uEAA5E,IAA4E;AAAA,QAAtEC,gBAAsE,uEAA3C,IAA2C;AAAA,QAArCC,GAAqC,uEAAN,IAAM;;AAAA;;AAAA,yCAJzF,CAIyF;;AAAA,8CAHpF,CAGoF;;AAAA,kCAFjF,IAEiF;;AAC5G,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;;AAEA,QAAIC,GAAJ,EAAS;AACP,UAAMjF,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG8E,WAAxB,EAAqC9E,GAAG,IAAI,CAA5C,EAA+C;AAC7CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,IAAIsC,KAAJ,CAAUyC,gBAAV,CAAZ;;AACA,aAAK,IAAI9E,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG8E,gBAAxB,EAA0C9E,GAAG,IAAI,CAAjD,EAAoD;AAClD,cAAI,OAAO+E,GAAG,CAAChF,GAAD,CAAH,CAASC,GAAT,CAAP,KAAyB,QAA7B,EAAuC;AACrC;AACAF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,GAAD,CAAH,CAASC,GAAT,EAAcgF,MAAd,GAAuBC,MAAM,CAACF,GAAG,CAAChF,GAAD,CAAH,CAASC,GAAT,CAAD,CAA7B,GAA+CkF,GAAhE;AACD,WAHD,MAGO,IAAI,OAAOH,GAAG,CAAChF,GAAD,CAAH,CAASC,GAAT,CAAP,KAAyB,QAA7B,EAAuC;AAC5CF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,GAAD,CAAH,CAASC,GAAT,CAAjB;AACD;AACF;AACF;;AACD,WAAKF,IAAL,GAAY,IAAIN,gDAAJ,CAAW,KAAKqF,WAAhB,EAA6B,KAAKC,gBAAlC,EAAoDhF,IAApD,CAAZ;AACD;AACF;;AAxBH;AAAA;AAAA,WAmCE,mBAAUqF,KAAV,EAAwC;AACtC,aAAO,KAAKrF,IAAL,CAAUE,GAAV,CAAcmF,KAAd,CAAP;AACD;AArCH;AAAA;AAAA,WAuCE,+BAA8B;AAC5B,aAAO,KAAKL,gBAAZ;AACD;AAzCH;AAAA;AAAA,WA2CE,0BAAyB;AACvB,aAAO,KAAKD,WAAZ;AACD;AA7CH;AAAA;AAAA,WA+CE,kBAASO,MAAT,EAAyBC,SAAzB,EAAqD;AACnD,UAAMvF,IAAI,GAAG,KAAKA,IAAL,CAAUwF,KAAV,CAAgB,CAAhB,EAAmBF,MAAnB,EAA2B,KAAKtF,IAAL,CAAUF,IAArC,EAA2CyF,SAA3C,CAAb;AACA,aAAOT,OAAO,CAACW,UAAR,CAAmBzF,IAAnB,CAAP;AACD;AAlDH;AAAA;AAAA,WA0BE,oBAAkBM,CAAlB,EAAsC;AACpC,UAAMoF,QAAQ,GAAG,IAAIZ,OAAJ,EAAjB;AACAY,MAAAA,QAAQ,CAACX,WAAT,GAAuBzE,CAAC,CAACR,IAAzB;AACA4F,MAAAA,QAAQ,CAACV,gBAAT,GAA4B1E,CAAC,CAACP,IAA9B;AACA2F,MAAAA,QAAQ,CAAC1F,IAAT,GAAgBM,CAAhB;AAEA,aAAOoF,QAAP;AACD;AAjCH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACAO,IAAeC,uBAAtB,GAGE,iCAAYC,OAAZ,EAA8B;AAAA;;AAAA,mCAFD,IAEC;;AAC5B,OAAKA,OAAL,GAAeA,OAAf;AACD,CALH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAIO,IAAMC,wBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,+DACoD,UAACC,OAAD;AAAA,aAAaA,OAAb;AAAA,KADpD;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,iBAAiB;AACf,WAAK,IAAIC,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAG,KAAKH,OAAL,CAAaI,mBAAb,EAA1C,EAA8ED,YAAY,IAAI,CAA9F,EAAiG;AAC/F,YAAMD,QAAO,GAAG,KAAKG,QAAL,CAAc,KAAKL,OAAL,CAAaM,SAAb,CAAuBH,YAAvB,CAAd,CAAhB;;AACA,aAAK,IAAI9F,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK2F,OAAL,CAAa5F,IAAb,CAAkBF,IAA1C,EAAgDG,GAAG,IAAI,CAAvD,EAA0D;AACxD,cAAI6F,QAAJ,EAAa;AACX,iBAAKF,OAAL,CAAa5F,IAAb,CAAkBA,IAAlB,CAAuBC,GAAvB,EAA4B8F,YAA5B,IAA4CD,QAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAA5C;AACD;AACF;AACF;;AACD,aAAO,KAAK2F,OAAZ;AACD;AAbH;AAAA;AAAA,WAeE,qBAAYK,QAAZ,EAA6E;AAC3E,WAAKA,QAAL,GAAgBA,QAAhB;AACA,aAAO,IAAP;AACD;AAlBH;;AAAA;AAAA,EAA8CN,6EAA9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAGO,IAAMQ,6BAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,iBAAiB;AACf,UAAIC,GAAG,GAAGC,QAAV;AACA,UAAItE,GAAG,GAAG,CAACsE,QAAX;;AAEA,WAAK,IAAInG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK0F,OAAL,CAAaI,mBAAb,EAAxB,EAA4D9F,GAAG,IAAI,CAAnE,EAAsE;AACpE,YAAM4F,OAAO,GAAG,KAAKF,OAAL,CAAaM,SAAb,CAAuBhG,GAAvB,CAAhB;;AACA,aAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG6F,OAAO,CAAChG,IAAhC,EAAsCG,GAAG,IAAI,CAA7C,EAAgD;AAC9C,cAAImG,GAAG,GAAGN,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAV,EAAgC;AAC9BmG,YAAAA,GAAG,GAAGN,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAN;AACD;;AACD,cAAI8B,GAAG,GAAG+D,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAV,EAAgC;AAC9B8B,YAAAA,GAAG,GAAG+D,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAN;AACD;AACF;AACF;;AAED,WAAK,IAAIC,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAG,KAAK0F,OAAL,CAAaI,mBAAb,EAAxB,EAA4D9F,IAAG,IAAI,CAAnE,EAAsE;AACpE,YAAM4F,QAAO,GAAG,KAAKF,OAAL,CAAaM,SAAb,CAAuBhG,IAAvB,CAAhB;;AACA,aAAK,IAAID,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAG6F,QAAO,CAAChG,IAAhC,EAAsCG,IAAG,IAAI,CAA7C,EAAgD;AAC9C,eAAK2F,OAAL,CAAa5F,IAAb,CAAkBA,IAAlB,CAAuBC,IAAvB,EAA4BC,IAA5B,IAAmC,CAAC4F,QAAO,CAAC9F,IAAR,CAAaC,IAAb,EAAkB,CAAlB,IAAuBmG,GAAxB,KAAgCrE,GAAG,GAAGqE,GAAtC,CAAnC;AACD;AACF;;AAED,aAAO,KAAKR,OAAZ;AACD;AAzBH;;AAAA;AAAA,EAAmDD,6EAAnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGO,IAAMW,kCAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,uEAC+B,MAD/B;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,iBAAiB;AAAA;;AACf,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAIC,oBAAoB,GAAG,CAA3B;AACA,UAAIjF,GAAG,GAAG,CAAV;AACA,UAAIkF,WAAW,GAAG,CAAlB;;AAEA,WAAK,IAAIV,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAG,KAAKH,OAAL,CAAaI,mBAAb,EAA1C,EAA8ED,YAAY,IAAI,CAA9F,EAAiG;AAC/F,YAAMD,OAAO,GAAG,KAAKF,OAAL,CAAaM,SAAb,CAAuBH,YAAvB,CAAhB;;AACA,aAAK,IAAI9F,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAK2F,OAAL,CAAac,cAAb,EAAxB,EAAuDzG,GAAG,IAAI,CAA9D,EAAiE;AAC/D,cAAI0G,KAAK,CAACb,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAD,CAAL,IAA+B,OAAO6F,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAP,KAAgC,WAAnE,EAAgF;AAC9EsG,YAAAA,UAAU,CAACK,IAAX,CAAgB;AACd3G,cAAAA,GAAG,EAAHA,GADc;AAEdC,cAAAA,GAAG,EAAE4F;AAFS,aAAhB;AAID,WALD,MAKO;AACLvE,YAAAA,GAAG,IAAIuE,OAAO,CAAC9F,IAAR,CAAaC,GAAb,EAAkB,CAAlB,CAAP;AACAuG,YAAAA,oBAAoB;AACrB;AACF;AACF;;AAED,UAAI,KAAKK,gBAAL,KAA0B,MAA9B,EAAsC;AACpCJ,QAAAA,WAAW,GAAGlF,GAAG,GAAGiF,oBAApB;AACD;;AAEDD,MAAAA,UAAU,CAACO,OAAX,CAAmB,gBAAkB;AAAA,YAAf7G,GAAe,QAAfA,GAAe;AAAA,YAAVC,GAAU,QAAVA,GAAU;;AACnC,YAAI,MAAI,CAAC0F,OAAL,IAAgB,MAAI,CAACA,OAAL,CAAa5F,IAA7B,IAAqC,MAAI,CAAC4F,OAAL,CAAa5F,IAAb,CAAkBA,IAA3D,EAAiE;AAC/D,gBAAI,CAAC4F,OAAL,CAAa5F,IAAb,CAAkBA,IAAlB,CAAuBC,GAAvB,EAA4BC,GAA5B,IAAmCuG,WAAnC;AACD;AACF,OAJD;AAMA,aAAO,KAAKb,OAAZ;AACD;AAnCH;AAAA;AAAA,WAqCE,6BAAoBf,IAApB,EAAsE;AACpE,WAAKgC,gBAAL,GAAwBhC,IAAxB;AACA,aAAO,IAAP;AACD;AAxCH;;AAAA;AAAA,EAAwDc,6EAAxD;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEO,IAAMoB,iBAAb;AAME,6BAAYC,GAAZ,EAAyB;AAAA;;AAAA,4CALD,CAKC;;AAAA,sCAJP,CAIO;;AAAA,kCAHH,EAGG;;AACvB,SAAKhH,IAAL,GAAYgH,GAAG,CAACC,WAAJ,EAAZ;;AACA,QAAMC,KAAK,sBAAO,IAAIC,GAAJ,CAAQ,KAAKnH,IAAL,CAAUoH,KAAV,CAAgB,EAAhB,EAAoBC,IAApB,EAAR,CAAP,CAAX;;AAEA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKI,QAAL,GAAgB,KAAKtH,IAAL,CAAUkF,MAA1B;AACA,SAAKqC,cAAL,GAAsBL,KAAK,CAAChC,MAA5B;AACD;;AAbH;AAAA;AAAA,WAeE,uBAAwB;AACtB,aAAO,KAAKlF,IAAL,CACJwH,OADI,CACI,KADJ,EACW,IADX,EAEJJ,KAFI,CAEE,IAFF,EAGJK,GAHI,CAGA,UAAC3B,OAAD,EAAqB;AACxB,eAAOA,OAAO,GAAG,IAAjB;AACD,OALI,CAAP;AAMD;AAtBH;AAAA;AAAA,WAwBE,6BAA4B;AAC1B,aAAO,KAAKyB,cAAZ;AACD;AA1BH;AAAA;AAAA,WA4BE,0BAAyB;AACvB,aAAO,KAAKL,KAAL,CAAWhC,MAAlB;AACD;AA9BH;AAAA;AAAA,WAgCE,0BAAyB;AACvB,UAAMwC,MAAM,GAAG,EAAf;AACA,WAAKR,KAAL,CAAWJ,OAAX,CAAmB,UAACa,KAAD,EAAOnF,CAAP,EAAa;AAC9BkF,QAAAA,MAAM,CAACC,KAAD,CAAN,GAAenF,CAAf;AACD,OAFD;AAGA,aAAOkF,MAAP;AACD;AAtCH;AAAA;AAAA,WAwCE,qBAA+C;AAAA,UAArCE,EAAqC,uEAAxB,EAAwB;AAAA,UAApBC,MAAoB,uEAAH,CAAG;AAC7C,UAAMC,CAAC,GAAG,EAAV;AACA,UAAMC,CAAC,GAAG,EAAV;;AAEA,WAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxC,IAAL,CAAUkF,MAAV,GAAmB0C,EAAvC,EAA2CpF,CAAC,IAAIqF,MAAhD,EAAwD;AACtDC,QAAAA,CAAC,CAAClB,IAAF,CAAO,KAAK5G,IAAL,CAAUgI,MAAV,CAAiBxF,CAAjB,EAAoBoF,EAApB,CAAP;AACAG,QAAAA,CAAC,CAACnB,IAAF,CAAO,KAAK5G,IAAL,CAAUwC,CAAC,GAAGoF,EAAd,CAAP;AACD;;AAED,aAAO,CAACE,CAAD,EAAIC,CAAJ,CAAP;AACD;AAlDH;AAAA;AAAA,WAoDE,uBAAcD,CAAd,EAA2BC,CAA3B,EAA6E;AAAA;;AAAA,UAArCE,EAAqC,uEAAxB,EAAwB;AAC3E,UAAM3H,CAAC,GAAGwH,CAAC,CAAC5C,MAAZ;AACA,UAAMtB,CAAC,GAAG,IAAIrB,KAAJ,CAAUjC,CAAV,CAAV;AACA,UAAM4G,KAAK,GAAG,KAAKgB,cAAL,EAAd;AACA,UAAMrE,CAAC,GAAG,IAAInE,gDAAJ,CAAWY,CAAX,EAAc,KAAK4G,KAAL,CAAWhC,MAAzB,EAAiCiD,QAAjC,EAAV;AACA,UAAIC,MAAM,GAAG,CAAb;AACA,UAAIC,QAAQ,GAAG,CAAf;AAEAP,MAAAA,CAAC,CAAChB,OAAF,CAAU,UAACwB,QAAD,EAAmBC,EAAnB,EAA0B;AAClC3E,QAAAA,CAAC,CAAC2E,EAAD,CAAD,GAAQ,IAAI7I,gDAAJ,CAAW4I,QAAQ,CAACpD,MAApB,EAA4B,KAAI,CAACgC,KAAL,CAAWhC,MAAvC,EAA+CiD,QAA/C,EAAR;AACAG,QAAAA,QAAQ,CAAClB,KAAT,CAAe,EAAf,EAAmBN,OAAnB,CAA2B,UAACa,MAAD,EAAOa,CAAP,EAAa;AACtC5E,UAAAA,CAAC,CAAC2E,EAAD,CAAD,CAAMvI,IAAN,CAAWwI,CAAX,EAActB,KAAK,CAACS,MAAD,CAAnB,IAA6B,CAA7B;AACAU,UAAAA,QAAQ;AACT,SAHD;AAIAD,QAAAA,MAAM;AACNC,QAAAA,QAAQ,GAAG,CAAX;AAEAxE,QAAAA,CAAC,CAAC7D,IAAF,CAAOuI,EAAP,EAAWrB,KAAK,CAACa,CAAC,CAACQ,EAAD,CAAF,CAAhB,IAA2B,CAA3B;AACD,OAVD;AAYA,aAAO,CAAC3E,CAAD,EAAIC,CAAJ,CAAP;AACD;AAzEH;AAAA;AAAA,WA2EE,oBAAqB;AACnB,aAAO,KAAKqD,KAAZ;AACD;AA7EH;AAAA;AAAA,WA+EE,qBAAYnB,YAAZ,EAA0C;AAAA;;AACxC,UAAMD,OAAO,GAAG,KAAK2C,WAAL,GAAmB1C,YAAnB,CAAhB;AACA,UAAM/F,IAAI,GAAG,EAAb;AACA,UAAM0I,OAAO,GAAG,KAAKR,cAAL,EAAhB;AACApC,MAAAA,OAAO,CAACsB,KAAR,CAAc,EAAd,EAAkBN,OAAlB,CAA0B,UAAC6B,EAAD,EAAKnG,CAAL,EAAW;AACnCxC,QAAAA,IAAI,CAACwC,CAAD,CAAJ,GAAU,EAAV;;AACA,aAAK,IAAItC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,MAAI,CAACqH,cAA7B,EAA6CrH,GAAG,IAAI,CAApD,EAAuD;AACrDF,UAAAA,IAAI,CAACwC,CAAD,CAAJ,CAAQtC,GAAR,IAAe,CAAf;AACD;;AACDF,QAAAA,IAAI,CAACwC,CAAD,CAAJ,CAAQkG,OAAO,CAACC,EAAD,CAAf,IAAuB,CAAvB;AACD,OAND;AAOA,aAAOjJ,qDAAA,CAAYM,IAAZ,EAAkBiD,SAAlB,EAAP;AACD;AA3FH;AAAA;AAAA,WA6FE,qBAAY8C,YAAZ,EAA0C;AAAA;;AACxC,UAAMD,OAAO,GAAG,KAAK2C,WAAL,GAAmB1C,YAAnB,CAAhB;AACA,UAAM/F,IAAI,GAAG,EAAb;AACA,UAAM0I,OAAO,GAAG,KAAKR,cAAL,EAAhB;AACApC,MAAAA,OAAO,CAACsB,KAAR,CAAc,EAAd,EAAkBN,OAAlB,CAA0B,UAAC6B,EAAD,EAAKnG,CAAL,EAAW;AACnCxC,QAAAA,IAAI,CAACwC,CAAD,CAAJ,GAAU,EAAV;;AACA,aAAK,IAAItC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,MAAI,CAACqH,cAA7B,EAA6CrH,GAAG,IAAI,CAApD,EAAuD;AACrDF,UAAAA,IAAI,CAACwC,CAAD,CAAJ,CAAQtC,GAAR,IAAe,CAAf;AACD;;AACDF,QAAAA,IAAI,CAACwC,CAAD,CAAJ,CAAQkG,OAAO,CAACC,EAAD,CAAf,IAAuB,CAAvB;AACD,OAND;AAOA,aAAOjJ,qDAAA,CAAYM,IAAZ,EAAkBiD,SAAlB,EAAP;AACD;AAzGH;;AAAA;AAAA;;;;;;;;;;;;;;;ACFA;;;;;;;;;;;;;;;;;;;;;;ACAA;AAGO,IAAM2F,cAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,oBAAkBC,aAAlB,EAA0F;AACxF,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BF,QAAAA,aAAa,CAACG,IAAd,CAAmB,UAACC,MAAD,EAAY;AAC7B,cAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,EAAf;AACA,cAAMnE,gBAAgB,GAAGkE,MAAM,CAACnJ,IAAhC;AACA,cAAMgF,WAAW,GAAGmE,MAAM,CAACpJ,IAA3B;AAEA,cAAM8F,OAAO,GAAG,IAAId,6CAAJ,CAAYC,WAAZ,EAAyBC,gBAAzB,EAA2CkE,MAAM,CAAClJ,IAAlD,CAAhB;AACA+I,UAAAA,OAAO,CAACnD,OAAD,CAAP;AACD,SAPD;AAQD,OATM,CAAP;AAUD;AAZH;;AAAA;AAAA;;;;;;;;;;;;;;;;ACDO,IAAewD,4BAAtB;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;IAGKE;;WAAAA;AAAAA,EAAAA,SAAAA;AAAAA,EAAAA,SAAAA;AAAAA,EAAAA,SAAAA;GAAAA,aAAAA;;AAME,IAAMC,uBAAb;AAAA;;AAAA;;AAIE,mCAAYvJ,IAAZ,EAA2C;AAAA;;AAAA;;AACzC;;AADyC,2DAHM,IAGN;;AAAA,iEAFK,IAEL;;AAEzC,UAAKA,IAAL,GAAYA,IAAZ;AAFyC;AAG1C;;AAPH;AAAA;AAAA,WAkCE,iBAAgB;AACd;AACJ;AACA;AACA;AAII,UAAMgF,gBAAgB,GAAG,KAAKhF,IAAL,CAAUkF,MAAnC;AACA,UAAMH,WAAW,GAAG,KAAK/E,IAAL,CAAU,CAAV,EAAakF,MAAjC;AAEA,aAAO,IAAIxF,gDAAJ,CAAWsF,gBAAX,EAA6BD,WAA7B,EAA0C,KAAK/E,IAA/C,EAAqDiD,SAArD,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5GA;AAAA;AAAA,WASE,uBAAqBuG,IAArB,EAAqE;AACnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,aAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BM,QAAAA,sCAAS,CAAC;AACRI,UAAAA,QAAQ,EAAE,IADF;AAER9I,UAAAA,MAAM,EAAE;AAFA,SAAD,CAAT,CAIG+I,QAJH,CAIYF,IAJZ,EAKGR,IALH,CAKQ,UAAC/D,GAAD,EAAS;AACb8D,UAAAA,OAAO,CAAC,IAAIQ,uBAAJ,CAA4BtE,GAA5B,CAAD,CAAP;AACD,SAPH;AAQD,OATM,CAAP;AAUD;AAhCH;;AAAA;AAAA,EAA6CmE,uFAA7C;;;;;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;;;;;ACCA;AAEO,IAAMO,wBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,oBAAkBd,aAAlB,EAA8G;AAC5G,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BF,QAAAA,aAAa,CAACG,IAAd,CAAmB,UAACC,MAAD,EAAY;AAC7B,cAAMjC,GAAG,GAAGiC,MAAM,CAACE,KAAP,EAAZ;AACAJ,UAAAA,OAAO,CAAC,IAAIhC,yEAAJ,CAAsBC,GAAtB,CAAD,CAAP;AACD,SAHD;AAID,OALM,CAAP;AAMD;AARH;;AAAA;AAAA;;;;;;;;;;;;;;;;ACHO,IAAe4C,sCAAtB;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEO,IAAME,sCAAb;AAAA;;AAAA;;AAGE,kDAAY9J,IAAZ,EAA0B;AAAA;;AAAA;;AACxB;;AADwB,2DAFD,EAEC;;AAExB,UAAKA,IAAL,GAAYA,IAAZ;AAFwB;AAGzB;;AANH;AAAA;AAAA,WAqBE,iBAAgB;AACd,aAAO,KAAKA,IAAZ;AACD;AAvBH;AAAA;AAAA,WAQE,uBAAqBwJ,IAArB,EAAoF;AAClF,aAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUgB,MAAV,EAAqB;AACtCF,QAAAA,wCAAA,CAAYL,IAAZ,EAAkB,UAACS,GAAD,EAAMC,MAAN,EAAiB;AACjC,cAAID,GAAJ,EAAS;AACPF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACD;;AAEDlB,UAAAA,OAAO,CAAC,IAAIe,sCAAJ,CAA2CI,MAAM,CAACC,QAAP,CAAgB,OAAhB,CAA3C,CAAD,CAAP;AACD,SAPD;AAQD,OATM,CAAP;AAUD;AAnBH;;AAAA;AAAA,EAA4DP,2GAA5D;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;;;;;;ICIeQ;AAOb,2BAAc;AAAA;;AAAA,mCANI,CAMJ;;AAAA,oCALK,CAKL;;AAAA,mCAJI,CAIJ;;AAAA,2CAH2B,IAG3B;;AAAA,6CAF8C,IAE9C;AAAE;;;;WAEhB,4BAAmBC,eAAnB,EAAqE;AACnE,WAAKA,eAAL,GAAuBA,eAAvB;AACA,aAAO,IAAP;AACD;;;WAED,8BAAqD;AACnD,aAAO,KAAKA,eAAZ;AACD;;;WAED,kBAASC,KAAT,EAAgC;AAC9B,WAAKC,KAAL,GAAaD,KAAb;AACA,aAAO,IAAP;AACD;;;WAED,oBAAmB;AACjB,aAAO,KAAKC,KAAZ;AACD;;;WAED,mBAAUD,KAAV,EAAiC;AAC/B,WAAKE,MAAL,GAAcF,KAAd;AACA,aAAO,IAAP;AACD;;;WAED,qBAAoB;AAClB,aAAO,KAAKE,MAAZ;AACD;;;WAED,kBAASF,KAAT,EAAgC;AAC9B,WAAKG,KAAL,GAAaH,KAAb;AACA,aAAO,IAAP;AACD;;;WAED,oBAAmB;AACjB,aAAO,KAAKG,KAAZ;AACD;;;WAcD,oBAAWC,aAAX,EAA0C;AACxC,WAAKA,aAAL,GAAqBA,aAArB;AACA,aAAO,IAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEH;AAEA;;IAGeC;;;;;AAgBb,6BAAc;AAAA;;AAAA;;AACZ;;AADY,4DAfI,CAeJ;;AAEZ,UAAKC,CAAL,GAAS,IAAIlL,gDAAJ,EAAT;AACA,UAAKgE,CAAL,GAAS,IAAIhE,gDAAJ,EAAT;AACA,UAAKmL,CAAL,GAAS,IAAInL,gDAAJ,EAAT;AACA,UAAKoL,CAAL,GAAS,IAAIpL,gDAAJ,EAAT;AACA,UAAKqL,EAAL,GAAU,IAAIrL,gDAAJ,EAAV;AACA,UAAKsL,EAAL,GAAU,IAAItL,gDAAJ,EAAV;AACA,UAAKuL,EAAL,GAAU,IAAIvL,gDAAJ,EAAV;AACA,UAAKwL,EAAL,GAAU,IAAIxL,gDAAJ,EAAV;AACA,UAAKyL,EAAL,GAAU,IAAIzL,gDAAJ,EAAV;AACA,UAAK0L,EAAL,GAAU,IAAI1L,gDAAJ,EAAV;AACA,UAAK2L,EAAL,GAAU,IAAI3L,gDAAJ,EAAV;AACA,UAAK4L,EAAL,GAAU,IAAI5L,gDAAJ,EAAV;AAbY;AAcb;;;;WAED,qBAAkB;AAChB,WAAKkL,CAAL,CAAOW,MAAP,CAAc,KAAKC,SAAL,EAAd,EAAgC,KAAKC,QAAL,EAAhC;AACA,WAAKb,CAAL,GAAS,KAAKA,CAAL,CAAOc,SAAP,CAAiB,KAAKhB,aAAL,GAAsB,KAAKA,aAAL,CAAmBc,SAAnB,EAAtB,GAAkE,KAAKA,SAAL,EAAnF,CAAT;AAEA,WAAK9H,CAAL,CAAO6H,MAAP,CAAc,KAAKC,SAAL,EAAd,EAAgC,CAAhC;AACA,WAAK9H,CAAL,GAAS,KAAKA,CAAL,CAAOgI,SAAP,CAAiB,KAAKhB,aAAL,GAAsB,KAAKA,aAAL,CAAmBc,SAAnB,EAAtB,GAAkE,KAAKA,SAAL,EAAnF,CAAT;AAEA,WAAKT,EAAL,CAAQQ,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,KAAKC,QAAL,EAAjC;AACA,WAAKV,EAAL,GAAU,KAAKH,CAAL,CAAOzC,QAAP,EAAV;AAEA,WAAK6C,EAAL,CAAQO,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,CAAjC;AACA,WAAKR,EAAL,GAAU,KAAKA,EAAL,CAAQ7C,QAAR,EAAV;AAEA,WAAKgD,EAAL,CAAQI,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,KAAKC,QAAL,EAAjC;AACA,WAAKN,EAAL,GAAU,KAAKA,EAAL,CAAQhD,QAAR,EAAV;AAEA,WAAKiD,EAAL,CAAQG,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,CAAjC;AACA,WAAKJ,EAAL,GAAU,KAAKA,EAAL,CAAQjD,QAAR,EAAV;AAEA,WAAK8C,EAAL,CAAQM,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,KAAKC,QAAL,EAAjC;AACA,WAAKR,EAAL,GAAU,KAAKA,EAAL,CAAQ9C,QAAR,EAAV;AAEA,WAAK+C,EAAL,CAAQK,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,CAAjC;AACA,WAAKN,EAAL,GAAU,KAAKA,EAAL,CAAQ/C,QAAR,EAAV;AAEA,WAAKkD,EAAL,CAAQE,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,KAAKC,QAAL,EAAjC;AACA,WAAKJ,EAAL,GAAU,KAAKA,EAAL,CAAQlD,QAAR,EAAV;AAEA,WAAKmD,EAAL,CAAQC,MAAR,CAAe,KAAKC,SAAL,EAAf,EAAiC,CAAjC;AACA,WAAKF,EAAL,GAAU,KAAKA,EAAL,CAAQnD,QAAR,EAAV;AACD;;;WAED,iBAAQwD,KAAR,EAA+B;AAC7B,WAAKb,CAAL,GAAS,KAAKF,CAAL,CAAOtI,GAAP,CAAWqJ,KAAX,EAAkBvK,GAAlB,CAAsB,KAAKsC,CAAL,CAAOW,SAAP,CAAiB,CAAjB,EAAoBsH,KAAK,CAAC5L,IAA1B,CAAtB,CAAT;AACA,WAAK8K,CAAL,GAAS,KAAKe,UAAL,CAAgB,KAAKd,CAArB,CAAT;AACA,aAAO,KAAKD,CAAZ;AACD;;;WAED,gBAAgB;AACd,aAAO,IAAP;AACD;;;WAED,gBAAgB;AACd,aAAO,KAAP;AACD;;;WAED,oBAAWH,aAAX,EAAmD;AACjD,UAAIA,aAAa,CAACmB,IAAd,EAAJ,EAA0B;AACxB,aAAKC,QAAL,CAAcpB,aAAa,CAACqB,OAAd,EAAd;AACD,OAFD,MAEO,IAAIrB,aAAa,CAACsB,IAAd,EAAJ,EAA0B;AAC/B,aAAKF,QAAL,CAAcpB,aAAa,CAACuB,cAAd,KAAiCvB,aAAa,CAACwB,eAAd,EAAjC,GAAmExB,aAAa,CAACyB,cAAd,EAAjF;AACD;;AAED,sFAAiBzB,aAAjB;;AAEA,aAAO,IAAP;AACD;;;WAED,iBAAQJ,KAAR,EAAwC;AACtC,WAAK8B,SAAL,CAAe9B,KAAf;AAEA,aAAO,IAAP;AACD;;;WAED,mBAAkB;AAChB,aAAO,KAAKE,MAAZ;AACD;;;WAED,0BAAyB;AACvB,aAAO,KAAKD,KAAZ;AACD;;;WAED,2BAA0B;AACxB,aAAO,KAAKC,MAAZ;AACD;;;WAED,0BAAyB;AACvB,aAAO,CAAP;AACD;;;WAED,mBAAkB;AAChB,aAAO,KAAKI,CAAL,CAAOzI,GAAP,CAAW,CAAX,EAAcZ,GAAd,EAAP;AACD;;;;EAlHoC6I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLvC;AAEA;;IAEeiC;;;;;AAeb,6BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKzB,CAAL,GAAS,IAAIlL,gDAAJ,EAAT;AACA,UAAKgE,CAAL,GAAS,IAAIhE,gDAAJ,EAAT;AACA,UAAKmL,CAAL,GAAS,IAAInL,gDAAJ,EAAT;AACA,UAAKoL,CAAL,GAAS,IAAIpL,gDAAJ,EAAT;AACA,UAAKqL,EAAL,GAAU,IAAIrL,gDAAJ,EAAV;AACA,UAAKsL,EAAL,GAAU,IAAItL,gDAAJ,EAAV;AACA,UAAKuL,EAAL,GAAU,IAAIvL,gDAAJ,EAAV;AACA,UAAKwL,EAAL,GAAU,IAAIxL,gDAAJ,EAAV;AACA,UAAKyL,EAAL,GAAU,IAAIzL,gDAAJ,EAAV;AACA,UAAK0L,EAAL,GAAU,IAAI1L,gDAAJ,EAAV;AACA,UAAK2L,EAAL,GAAU,IAAI3L,gDAAJ,EAAV;AACA,UAAK4L,EAAL,GAAU,IAAI5L,gDAAJ,EAAV;AAbY;AAcb;;;;WAED,qBAAkB,CAChB;AACD;;;WAED,gBAAgB;AACd,aAAO,KAAP;AACD;;;WAED,gBAAgB;AACd,aAAO,IAAP;AACD;;;WAED,oBAAWgL,aAAX,EAA0C;AACxC,UAAIA,aAAa,CAACsB,IAAd,EAAJ,EAA0B;AACxB,aAAKM,OAAL,CAAa,CAAC5B,aAAa,CAACuB,cAAd,EAAD,EAAiCvB,aAAa,CAACwB,eAAd,EAAjC,EAAkExB,aAAa,CAACyB,cAAd,EAAlE,CAAb;AACD;;AAED,sFAAiBzB,aAAjB;;AAEA,aAAO,IAAP;AACD;;;WAED,iBAAQ6B,SAAR,EAA+C;AAC7C,WAAKT,QAAL,CAAcS,SAAS,CAAC,CAAD,CAAvB;AACA,WAAKH,SAAL,CAAeG,SAAS,CAAC,CAAD,CAAxB;AACA,WAAKC,QAAL,CAAcD,SAAS,CAAC,CAAD,CAAvB;AAEA,aAAO,IAAP;AACD;;;WAED,mBAAqB;AACnB,aAAO,CAAC,KAAKd,QAAL,EAAD,EAAkB,KAAKD,SAAL,EAAlB,EAAoC,KAAKiB,QAAL,EAApC,CAAP;AACD;;;WAYD,mBAAkB;AAChB,aAAO,KAAK7B,CAAL,CAAOzI,GAAP,CAAW,CAAX,EAAcZ,GAAd,EAAP;AACD;;;;EA7EoC6I;;;;;;;;;;;;;;;;;;;;ACDhC,IAAesC,uBAAtB,GAIE,iCAAYC,KAAZ,EAAkCjC,aAAlC,EAAyD;AAAA;;AAAA,iCAHxB,IAGwB;;AAAA,yCAFhB,IAEgB;;AACvD,OAAKiC,KAAL,GAAaA,KAAb;AACA,OAAKjC,aAAL,GAAqBA,aAArB;AACD,CAPH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAGO,IAAMkC,qBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,mBAAUjB,KAAV,EAAyB3G,gBAAzB,EAAmD6H,cAAnD,EAA2EpL,KAA3E,EAAkG;AAChG,UAAMqL,mBAAmB,GAAG,KAAKpC,aAAL,KAAuB,IAAvB,GAA8B,KAAKA,aAAL,CAAmBG,CAAjD,GAAqDc,KAAjF;AACA,WAAKgB,KAAL,CAAW5B,EAAX,GAAgBtJ,KAAK,CAACa,GAAN,CAAUwK,mBAAmB,CAAC7J,SAApB,EAAV,EAA2C8J,MAA3C,CAAkD/H,gBAAlD,CAAhB;AACA,WAAK2H,KAAL,CAAW5B,EAAX,GAAgB,KAAK4B,KAAL,CAAW5B,EAAX,CAAc3J,GAAd,CAAkB,KAAKuL,KAAL,CAAW/B,CAAX,CAAajJ,QAAb,CAAsBkL,cAAtB,EAAsCE,MAAtC,CAA6C/H,gBAA7C,CAAlB,CAAhB;AACA,WAAK2H,KAAL,CAAW3B,EAAX,GAAgBvJ,KAAK,CAACuL,UAAN,GAAmB/J,SAAnB,GAA+B8J,MAA/B,CAAsC/H,gBAAtC,CAAhB;;AAEA,UAAI,KAAK0F,aAAL,KAAuB,IAA3B,EAAiC;AAC/B;AACA,YAAMhD,MAAM,GAAG,KAAKiF,KAAL,CAAW/B,CAAX,CAAa3H,SAAb,GAAyBX,GAAzB,CAA6Bb,KAA7B,CAAf;;AACA,YAAIiG,MAAM,CAAC5H,IAAP,KAAgBgN,mBAAmB,CAAChN,IAApC,IAA4C4H,MAAM,CAAC3H,IAAP,KAAgB+M,mBAAmB,CAAC/M,IAApF,EAA0F;AACxFkN,UAAAA,OAAO,CAACpM,GAAR,CACE,KAAK8L,KAAL,CAAW/B,CAAX,CAAa9K,IADf,EAEE,KAAK6M,KAAL,CAAW/B,CAAX,CAAa7K,IAFf,EAGE0B,KAAK,CAAC3B,IAHR,EAIE2B,KAAK,CAAC1B,IAJR,EAKE,KAAK4M,KAAL,CAAW5B,EAAX,CAAcjL,IALhB,EAME,KAAK6M,KAAL,CAAW5B,EAAX,CAAchL,IANhB;AAQA,gBAAM,IAAIR,KAAJ,+BACmBmI,MAAM,CAAC5H,IAD1B,eACmC4H,MAAM,CAAC3H,IAD1C,kBACsD+M,mBAAmB,CAAChN,IAD1E,eACmFgN,mBAAmB,CAAC/M,IADvG,OAAN;AAGD;;AACD,YAAI,KAAK4M,KAAL,CAAW5B,EAAX,CAAcjL,IAAd,KAAuB,KAAK6M,KAAL,CAAW/B,CAAX,CAAa9K,IAApC,IAA4C,KAAK6M,KAAL,CAAW5B,EAAX,CAAchL,IAAd,KAAuB,KAAK4M,KAAL,CAAW/B,CAAX,CAAa7K,IAApF,EAA0F;AACxF,gBAAM,IAAIR,KAAJ,+BACmB,KAAKoN,KAAL,CAAW5B,EAAX,CAAcjL,IADjC,eAC0C,KAAK6M,KAAL,CAAW5B,EAAX,CAAchL,IADxD,kBACoE,KAAK4M,KAAL,CAAW/B,CAAX,CAAa9K,IADjF,eAC0F,KAAK6M,KAAL,CAAW/B,CAAX,CAAa7K,IADvG,OAAN;AAGD;;AACD,YAAI,KAAK4M,KAAL,CAAW3B,EAAX,CAAclL,IAAd,KAAuB,KAAK6M,KAAL,CAAWjJ,CAAX,CAAa5D,IAApC,IAA4C,KAAK6M,KAAL,CAAW3B,EAAX,CAAcjL,IAAd,KAAuB,KAAK4M,KAAL,CAAWjJ,CAAX,CAAa3D,IAApF,EAA0F;AACxF,gBAAM,IAAIR,KAAJ,+BACmB,KAAKoN,KAAL,CAAW3B,EAAX,CAAclL,IADjC,eAC0C,KAAK6M,KAAL,CAAW3B,EAAX,CAAcjL,IADxD,kBACoE,KAAK4M,KAAL,CAAWjJ,CAAX,CAAa5D,IADjF,eAC0F,KAAK6M,KAAL,CAAWjJ,CAAX,CAAa3D,IADvG,OAAN;AAGD;;AACD,eAAO2H,MAAP;AACD;;AACD,aAAO,IAAIhI,gDAAJ,EAAP;AACD;AApCH;;AAAA;AAAA,EAA2CgN,6EAA3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAGO,IAAMQ,qBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,mBAAUvB,KAAV,EAAyB3G,gBAAzB,EAAmD6H,cAAnD,EAA2EpL,KAA3E,EAAkG;AAChG,aAAOA,KAAP;AACD;AAHH;;AAAA;AAAA,EAA2CiL,6EAA3C;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAGO,IAAMY,sBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAc5C,aAAd,EAAqCiC,KAArC,EAAoF;AAClF,UAAIjC,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAIiC,KAAK,CAACd,IAAN,EAAJ,EAAkB;AAChB,iBAAO,IAAIe,yEAAJ,CAA0BD,KAA1B,EAAiCjC,aAAjC,CAAP;AACD,SAFD,MAEO,IAAIiC,KAAK,CAACY,OAAN,MAAmBJ,kDAAvB,EAAuC;AAC5C,iBAAO,IAAID,yEAAJ,CAA0BP,KAA1B,EAAiCjC,aAAjC,CAAP;AACD;AACF,OAND,MAMO;AACL,YAAIA,aAAa,CAAC6C,OAAd,MAA2BJ,qDAA/B,EAAkD;AAChD,iBAAO,IAAIC,+EAAJ,CAA6BT,KAA7B,EAAoCjC,aAApC,CAAP;AACD,SAFD,MAEO,IAAIA,aAAa,CAAC6C,OAAd,MAA2BJ,kDAA/B,EAA+C;AACpD,iBAAO,IAAIE,yEAAJ,CAA0BV,KAA1B,EAAiCjC,aAAjC,CAAP;AACD,SAFM,MAEA,IAAIA,aAAa,CAACmB,IAAd,MAAwBnB,aAAa,CAAC6C,OAAd,MAA2BJ,4DAAvD,EAAiF;AACtF,iBAAO,IAAIP,yEAAJ,CAA0BD,KAA1B,EAAiCjC,aAAjC,CAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAlBH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AAEO,IAAM2C,qBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,oEAC6C,IAD7C;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,mBAAU1B,KAAV,EAAyB3G,gBAAzB,EAAmD6H,cAAnD,EAA2EpL,KAA3E,EAAkG;AAChG,UAAMiJ,aAAa,GAAG,KAAKA,aAA3B;;AAEA,UAAIA,aAAJ,EAAmB;AACjB,YAAMiD,OAAO,GAAGjD,aAAa,CAACkD,UAAd,EAAhB;AACA,YAAM/F,MAAM,GAAG6C,aAAa,CAACmD,SAAd,EAAf;AACA,YAAMC,UAAU,GAAGpD,aAAa,CAACqD,aAAd,EAAnB;AACA,YAAMC,WAAW,GAAGtD,aAAa,CAACuB,cAAd,EAApB;AACA,YAAMgC,YAAY,GAAGvD,aAAa,CAACwB,eAAd,EAArB;AACA,YAAMgC,WAAW,GAAGxD,aAAa,CAACyB,cAAd,EAApB;AACA,YAAMgC,UAAU,GAAGzD,aAAa,CAACe,QAAd,EAAnB;AACA,YAAM2C,WAAW,GAAG1D,aAAa,CAACc,SAAd,EAApB;AACA,YAAM6C,UAAU,GAAG3D,aAAa,CAAC+B,QAAd,EAAnB;AAEA,YAAM6B,SAAS,GAAG3J,kEAAc,GAAG4J,OAAjB,CAChB,WADgB,EAEhB,IAAI7O,gDAAJ,CAAW,CAACyO,UAAU,GAAG,IAAIR,OAAlB,KAA8BS,WAAW,GAAG,IAAIT,OAAhD,IAA2DU,UAAtE,EAAkFrJ,gBAAlF,CAFgB,CAAlB;AAKA,YAAM0C,MAAM,GAAG,IAAIhI,gDAAJ,CAAWyO,UAAU,GAAGC,WAAb,GAA2BC,UAAtC,EAAkDrJ,gBAAlD,CAAf;AAEA0F,QAAAA,aAAa,CAACK,EAAd,GAAmBpG,kEAAc,GAAG4J,OAAjB,CAAyB,WAAzB,EAAsC7D,aAAa,CAACK,EAApD,CAAnB;AACAL,QAAAA,aAAa,CAACM,EAAd,GAAmBrG,kEAAc,GAAG4J,OAAjB,CAAyB,WAAzB,EAAsC7D,aAAa,CAACM,EAApD,CAAnB;;AAEA,aAAK,IAAI1K,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0E,gBAApB,EAAsC1E,CAAC,EAAvC,EAA2C;AACzC,eAAK,IAAIkO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAApB,EAAiCM,CAAC,EAAlC,EAAsC;AACpC,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAApB,EAAkCQ,CAAC,EAAnC,EAAuC;AACrC,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiCU,CAAC,EAAlC,EAAsC;AACpC,oBAAMC,SAAS,GAAG9G,MAAM,GAAG4G,CAA3B;AACA,oBAAMG,OAAO,GAAGD,SAAS,GAAGb,UAA5B;AACA,oBAAMe,UAAU,GAAGhH,MAAM,GAAG6G,CAA5B;AACA,oBAAMI,QAAQ,GAAGD,UAAU,GAAGf,UAA9B,CAJoC,CAMpC;;AACA,qBAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgCU,CAAC,EAAjC,EAAqC;AACnC,uBACE,IAAIlL,CAAC,GAAG,CAAR,EAAWmL,QAAQ,GAAGL,SAAtB,EAAiCM,WAAW,GAAG,CAACtB,OADlD,EAEE9J,CAAC,GAAGiK,UAFN,EAGEjK,CAAC,IAAImL,QAAQ,EAAZ,EAAgBC,WAAW,EAH9B,EAIE;AACA,yBACE,IAAIrL,CAAC,GAAG,CAAR,EAAWsL,UAAU,GAAGL,UAAxB,EAAoCM,aAAa,GAAG,CAACxB,OADvD,EAEE/J,CAAC,GAAGkK,UAFN,EAGElK,CAAC,IAAIsL,UAAU,EAAd,EAAkBC,aAAa,EAHlC,EAIE;AACA,0BAAIzE,aAAa,CAACE,CAAd,CAAgB5K,IAAhB,IAAwBsO,SAAS,CAACtO,IAAlC,IAA0CyB,KAAK,CAACzB,IAApD,EAA0D;AACxDsO,wBAAAA,SAAS,CAACtO,IAAV,CACE+O,CAAC,IAAIZ,UAAU,GAAG,IAAIR,OAArB,CAAD,IAAkCS,WAAW,GAAG,IAAIT,OAApD,IACEqB,QAAQ,IAAIb,UAAU,GAAG,IAAIR,OAArB,CADV,GAEEuB,UAHJ,EAIE5O,CAJF,KAKEoK,aAAa,CAACE,CAAd,CAAgB5K,IAAhB,CAAqBwO,CAArB,EAAwBO,CAAC,GAAGjB,UAAJ,GAAiBA,UAAjB,GAA8BjK,CAAC,GAAGiK,UAAlC,GAA+ClK,CAAvE,IACAnC,KAAK,CAACzB,IAAN,CAAWwO,CAAC,GAAGR,WAAJ,GAAkBC,YAAlB,GAAiCQ,CAAC,GAAGT,WAArC,GAAmDU,CAA9D,EAAiEpO,CAAjE,CANF;AAOD;;AAED,0BAAI8O,CAAC,GAAG,CAAR;;AACA,0BAAIzB,OAAO,IAAI,CAAf,EAAkB;AAChB,4BAAIjD,aAAa,CAACI,CAAd,CAAgB9K,IAApB,EAA0B;AACxBoP,0BAAAA,CAAC,GAAG1E,aAAa,CAACI,CAAd,CAAgB9K,IAAhB,CAAqB+O,CAAC,GAAGZ,UAAJ,GAAiBC,WAAjB,GAA+BY,QAAQ,GAAGb,UAA1C,GAAuDe,UAA5E,EAAwF5O,CAAxF,CAAJ;AACD;AACF,uBAJD,MAIO;AACL,4BACE2O,WAAW,IAAI,CAAf,IACAE,aAAa,IAAI,CADjB,IAEAF,WAAW,GAAGb,WAFd,IAGAe,aAAa,GAAGhB,UAJlB,EAKE;AACA,8BAAIzD,aAAa,CAACI,CAAd,CAAgB9K,IAApB,EAA0B;AACxBoP,4BAAAA,CAAC,GACC1E,aAAa,CAACI,CAAd,CAAgB9K,IAAhB,CACE+O,CAAC,GAAGZ,UAAJ,GAAiBC,WAAjB,GAA+Ba,WAAW,GAAGd,UAA7C,GAA0DgB,aAD5D,EAEE7O,CAFF,CADF;AAID;AACF;AACF;;AAED,0BAAIoK,aAAa,CAACK,EAAd,CAAiB/K,IAAjB,IAAyByB,KAAK,CAACzB,IAAnC,EAAyC;AACvC0K,wBAAAA,aAAa,CAACK,EAAd,CAAiB/K,IAAjB,CAAsBwO,CAAtB,EAAyBO,CAAC,GAAGjB,UAAJ,GAAiBA,UAAjB,GAA8BjK,CAAC,GAAGiK,UAAlC,GAA+ClK,CAAxE,KACGwL,CAAC,GAAG3N,KAAK,CAACzB,IAAN,CAAWwO,CAAC,IAAIR,WAAW,GAAGC,YAAlB,CAAD,GAAmCQ,CAAC,GAAGT,WAAvC,GAAqDU,CAAhE,EAAmEpO,CAAnE,CAAL,GAA8E0E,gBADhF;AAED;AACF;AACF;AACF;;AAED,oBAAI0F,aAAa,CAACM,EAAd,CAAiBhL,IAAjB,IAAyByB,KAAK,CAACzB,IAAnC,EAAyC;AACvC0K,kBAAAA,aAAa,CAACM,EAAd,CAAiBhL,IAAjB,CAAsBwO,CAAtB,EAAyB,CAAzB,KACE/M,KAAK,CAACzB,IAAN,CAAWwO,CAAC,IAAIR,WAAW,GAAGC,YAAlB,CAAD,GAAmCQ,CAAC,GAAGT,WAAvC,GAAqDU,CAAhE,EAAmEpO,CAAnE,IAAwE0E,gBAD1E;AAED;AACF;AACF;AACF;;AAED,cAAI2I,OAAO,GAAG,CAAd,EAAiB;AACf;AACA,iBAAK,IAAIa,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,UAApB,EAAgCG,EAAC,EAAjC,EAAqC;AACnC,mBAAK,IAAIC,EAAC,GAAG,CAACd,OAAT,EAAkB9J,EAAC,GAAG,CAA3B,EAA8B4K,EAAC,GAAGL,WAAW,GAAGT,OAAhD,EAAyDc,EAAC,IAAI5K,EAAC,EAA/D,EAAmE;AACjE,qBAAK,IAAI6K,EAAC,GAAG,CAACf,OAAT,EAAkB/J,EAAC,GAAG,CAA3B,EAA8B8K,EAAC,GAAGP,UAAU,GAAGR,OAA/C,EAAwDe,EAAC,IAAI9K,EAAC,EAA9D,EAAkE;AAChE,sBAAI8K,EAAC,IAAI,CAAL,IAAUD,EAAC,IAAI,CAAf,IAAoBC,EAAC,GAAGP,UAAxB,IAAsCM,EAAC,GAAGL,WAA1C,IAAyD1G,MAAM,CAAC1H,IAAhE,IAAwEsO,SAAS,CAACtO,IAAtF,EAA4F;AAC1F0H,oBAAAA,MAAM,CAAC1H,IAAP,CAAYwO,EAAC,GAAGL,UAAJ,GAAiBC,WAAjB,GAA+BK,EAAC,GAAGN,UAAnC,GAAgDO,EAA5D,EAA+DpO,CAA/D,IACEgO,SAAS,CAACtO,IAAV,CACEwO,EAAC,IAAIL,UAAU,GAAG,IAAIR,OAArB,CAAD,IAAkCS,WAAW,GAAG,IAAIT,OAApD,IAA+D9J,EAAC,IAAIsK,UAAU,GAAG,IAAIR,OAArB,CAAhE,GAAgG/J,EADlG,EAEEtD,CAFF,CADF;AAID;AACF;AACF;AACF;AACF;AACF;;AAED,YAAIqN,OAAO,GAAG,CAAd,EAAiB;AACf,iBAAOjG,MAAP;AACD;;AAED,eAAO4G,SAAP;AACD;AACF;AAtHH;;AAAA;AAAA,EAA2C5B,6EAA3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAEO,IAAMU,wBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,oEAC6C,IAD7C;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,mBAAUzB,KAAV,EAAyB3G,gBAAzB,EAAmD6H,cAAnD,EAA2EpL,KAA3E,EAAkG;AAChG,UAAM4N,SAAS,GAAG,KAAK3E,aAAvB;;AACA,UAAI2E,SAAJ,EAAe;AACb,YAAM3H,MAAM,GAAG/C,kEAAc,GAAG4J,OAAjB,CAAyB,WAAzB,EAAsC,IAAI7O,gDAAJ,CAAW2P,SAAS,CAACvE,CAAV,CAAYhL,IAAvB,EAA6BuP,SAAS,CAACvE,CAAV,CAAY/K,IAAzC,CAAtC,CAAf;AAEA,YAAM+N,UAAU,GAAGuB,SAAS,CAACtB,aAAV,EAAnB;AACA,YAAMlG,MAAM,GAAGwH,SAAS,CAACxB,SAAV,EAAf;AACA,YAAMM,UAAU,GAAGkB,SAAS,CAAC5D,QAAV,EAAnB;AACA,YAAM2C,WAAW,GAAGiB,SAAS,CAAC7D,SAAV,EAApB;AACA,YAAM6C,UAAU,GAAGgB,SAAS,CAAC5C,QAAV,EAAnB;AACA,YAAMuB,WAAW,GAAGqB,SAAS,CAACpD,cAAV,EAApB;AACA,YAAMgC,YAAY,GAAGoB,SAAS,CAACnD,eAAV,EAArB;AACA,YAAMgC,WAAW,GAAGmB,SAAS,CAAClD,cAAV,EAApB;;AAEA,aAAK,IAAI7L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0E,gBAApB,EAAsC1E,CAAC,EAAvC,EAA2C;AACzC,eAAK,IAAIkO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAApB,EAAiCM,CAAC,EAAlC,EAAsC;AACpC,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAApB,EAAkCQ,CAAC,EAAnC,EAAuC;AACrC,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiCU,CAAC,EAAlC,EAAsC;AACpC,oBAAMC,SAAS,GAAG9G,MAAM,GAAG4G,CAA3B;AACA,oBAAMG,OAAO,GAAGD,SAAS,GAAGb,UAA5B;AACA,oBAAMe,UAAU,GAAGhH,MAAM,GAAG6G,CAA5B;AACA,oBAAMI,QAAQ,GAAGD,UAAU,GAAGf,UAA9B;;AAEA,oBAAIwB,IAAI,GAAG,CAACjJ,QAAZ;;AACA,oBAAMkJ,WAAW,GAAGnB,WAAW,GAAGD,UAAd,GAA2BK,CAA/C;AACA,oBAAMgB,YAAY,GAAGvB,YAAY,GAAGD,WAAf,GAA6BQ,CAAlD;AACA,oBAAIiB,IAAI,GAAG,CAAX;AACA,oBAAIC,IAAI,GAAG,CAAX;;AAEA,qBAAK,IAAI7L,CAAC,GAAG,CAAR,EAAW8L,MAAM,GAAGhB,SAAzB,EAAoC9K,CAAC,GAAGiK,UAAxC,EAAoDjK,CAAC,IAAI8L,MAAM,EAA/D,EAAmE;AACjE,uBAAK,IAAI/L,CAAC,GAAG,CAAR,EAAWgM,MAAM,GAAGf,UAAzB,EAAqCjL,CAAC,GAAGkK,UAAzC,EAAqDlK,CAAC,IAAIgM,MAAM,EAAhE,EAAoE;AAClE,wBAAIP,SAAS,CAACvE,CAAV,CAAY9K,IAAZ,IAAoBsP,IAAI,GAAGD,SAAS,CAACvE,CAAV,CAAY9K,IAAZ,CAAiBuP,WAAW,GAAGI,MAAM,GAAGxB,UAAvB,GAAoCyB,MAArD,EAA6DtP,CAA7D,CAA/B,EAAgG;AAC9FgP,sBAAAA,IAAI,GAAGD,SAAS,CAACvE,CAAV,CAAY9K,IAAZ,CAAiBuP,WAAW,GAAGI,MAAM,GAAGxB,UAAvB,GAAoCyB,MAArD,EAA6DtP,CAA7D,CAAP;AACAmP,sBAAAA,IAAI,GAAGG,MAAP;AACAF,sBAAAA,IAAI,GAAGC,MAAP;AACD;AACF;AACF;;AAED,oBAAIjI,MAAM,CAAC1H,IAAP,IAAeyB,KAAK,CAACzB,IAAzB,EAA+B;AAC7B0H,kBAAAA,MAAM,CAAC1H,IAAP,CAAYuP,WAAW,GAAGG,IAAI,GAAGvB,UAArB,GAAkCsB,IAA9C,EAAoDnP,CAApD,IACEmB,KAAK,CAACzB,IAAN,CAAWwP,YAAY,GAAGf,CAAC,GAAGT,WAAnB,GAAiCU,CAA5C,EAA+CpO,CAA/C,CADF;AAED;AACF;AACF;AACF;AACF;;AAED,eAAOoH,MAAP;AACD;;AAED,aAAO,IAAIhI,gDAAJ,EAAP;AACD;AAvDH;;AAAA;AAAA,EAA8CgN,6EAA9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AAEO,IAAMoD,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,iEACyB,EADzB;;AAAA,iEAEyB,CAFzB;;AAAA,8DAGsB,CAHtB;;AAAA,6DAIqB,CAJrB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAME,qBAAkB;AAChB,WAAKlF,CAAL,CAAOW,MAAP,CAAc,KAAKwE,UAAnB,EAA+B,KAAKjC,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,KAAKrD,KAAxE;AACA,WAAKG,CAAL,GAAS,KAAKA,CAAL,CAAOc,SAAP,CAAiB,KAAKO,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EAAlE,CAAT;AAEA,WAAKzI,CAAL,CAAO6H,MAAP,CAAc,KAAKwE,UAAnB,EAA+B,CAA/B;AACA,WAAKrM,CAAL,GAAS,KAAKA,CAAL,CAAOgI,SAAP,CAAiB,KAAKO,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EAAlE,CAAT;AAEA,WAAKpB,EAAL,CAAQQ,MAAR,CAAe,KAAKwE,UAApB,EAAgC,KAAKjC,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,KAAKrD,KAAzE;AACA,WAAKM,EAAL,GAAU,KAAKA,EAAL,CAAQ5C,QAAR,EAAV;AAEA,WAAK6C,EAAL,CAAQO,MAAR,CAAe,KAAKwE,UAApB,EAAgC,CAAhC;AACA,WAAK/E,EAAL,GAAU,KAAKA,EAAL,CAAQ7C,QAAR,EAAV;AAEA,WAAKgD,EAAL,CAAQI,MAAR,CAAe,KAAKwE,UAApB,EAAgC,KAAKjC,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,KAAKrD,KAAzE;AACA,WAAKU,EAAL,GAAU,KAAKA,EAAL,CAAQhD,QAAR,EAAV;AAEA,WAAKiD,EAAL,CAAQG,MAAR,CAAe,KAAKwE,UAApB,EAAgC,CAAhC;AACA,WAAK3E,EAAL,GAAU,KAAKA,EAAL,CAAQjD,QAAR,EAAV;AAEA,WAAK8C,EAAL,CAAQM,MAAR,CAAe,KAAKwE,UAApB,EAAgC,KAAKjC,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,KAAKrD,KAAzE;AACA,WAAKQ,EAAL,GAAU,KAAKA,EAAL,CAAQ9C,QAAR,EAAV;AAEA,WAAK+C,EAAL,CAAQK,MAAR,CAAe,KAAKwE,UAApB,EAAgC,CAAhC;AACA,WAAK7E,EAAL,GAAU,KAAKA,EAAL,CAAQ/C,QAAR,EAAV;AACD;AA9BH;AAAA;AAAA,WAgCE,2BAA0B;AACxB,aAAO,CAAC,KAAKoC,KAAL,GAAa,KAAKuD,UAAlB,GAA+B,IAAI,KAAKH,OAAzC,IAAoD,KAAK9F,MAAzD,GAAkE,CAAzE;AACD;AAlCH;AAAA;AAAA,WAoCE,0BAAyB;AACvB,aAAO,CAAC,KAAK2C,MAAL,GAAc,KAAKsD,UAAnB,GAAgC,IAAI,KAAKH,OAA1C,IAAqD,KAAK9F,MAA1D,GAAmE,CAA1E;AACD;AAtCH;AAAA;AAAA,WAwCE,0BAAyB;AACvB,aAAO,KAAKkI,UAAZ;AACD;AA1CH;AAAA;AAAA,WA4CE,uBAAcC,IAAd,EAAuC;AACrC,WAAKlC,UAAL,GAAkBkC,IAAlB;AACA,aAAO,IAAP;AACD;AA/CH;AAAA;AAAA,WAiDE,yBAAwB;AACtB,aAAO,KAAKlC,UAAZ;AACD;AAnDH;AAAA;AAAA,WAqDE,uBAAciC,UAAd,EAA6C;AAC3C,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACD;AAxDH;AAAA;AAAA,WA0DE,yBAAwB;AACtB,aAAO,KAAKA,UAAZ;AACD;AA5DH;AAAA;AAAA,WA8DE,oBAAWpC,OAAX,EAAuC;AACrC,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACD;AAjEH;AAAA;AAAA,WAmEE,sBAAqB;AACnB,aAAO,KAAKA,OAAZ;AACD;AArEH;AAAA;AAAA,WAuEE,mBAAU9F,MAAV,EAAqC;AACnC,WAAKA,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACD;AA1EH;AAAA;AAAA,WA4EE,qBAAoB;AAClB,aAAO,KAAKA,MAAZ;AACD;AA9EH;AAAA;AAAA,WAgFE,iBAAQ8D,KAAR,EAA+B;AAC7B,UAAMjE,MAAM,GAAG,IAAIhI,gDAAJ,CACb,KAAKuM,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EADpC,EAEbR,KAAK,CAAC5L,IAFO,EAGboI,QAHa,EAAf;;AAKA,WAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmJ,KAAK,CAAC5L,IAA1B,EAAgCyC,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMgL,IAAI,GAAGqC,kDAAM,CACjBlE,KAAK,CAACzL,GAAN,CAAUsC,CAAV,CADiB,EAEjB,KAAKiI,KAFY,EAGjB,KAAKD,MAHY,EAIjB,KAAKD,KAJY,EAKjB,KAAKuD,UALY,EAMjB,KAAKA,UANY,EAOjB,KAAKH,OAPY,EAQjB,KAAKA,OARY,EASjB,KAAK9F,MATY,EAUjB,KAAKA,MAVY,CAAnB;AAaA,YAAMoI,GAAG,GAAG,KAAKrF,CAAL,CAAOtI,GAAP,CAAWkL,IAAI,CAACvK,SAAL,EAAX,EAA6B7B,GAA7B,CAAiC,KAAKsC,CAAL,CAAOW,SAAP,CAAiB,CAAjB,EAAoBmJ,IAAI,CAAC1N,IAAzB,CAAjC,CAAZ;AACA4H,QAAAA,MAAM,CAACwI,MAAP,CAAc1N,CAAd,EAAiByN,GAAG,CAACE,eAAJ,EAAjB;AACD;;AAED,WAAKrF,CAAL,GAASpD,MAAT;AACA,WAAKmD,CAAL,GAAS,KAAKe,UAAL,CAAgB,KAAKd,CAArB,CAAT;AAEA,aAAO,KAAKD,CAAZ;AACD;AA5GH;AAAA;AAAA,WA8GE,oBAAWvK,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAAC8P,MAAF,CAAS,CAAT,CAAP;AACD;AAhHH;AAAA;AAAA,WAkHE,mBAAqB;AACnB,aAAOjD,kDAAP;AACD;AApHH;AAAA;AAAA,WAsHE,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAP;AACD;AAxHH;;AAAA;AAAA,EAA+BhE,6DAA/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;IAEMiE;;;;;;;;;;;;;WACJ,qBAAkB;AAChB,WAAK1F,CAAL,CAAOW,MAAP,CAAc,KAAKwE,UAAnB,EAA+B,KAAKjC,UAAL,GAAkB,KAAKA,UAAvB,GAAoC,KAAKrD,KAAxE;AACA,WAAKG,CAAL,GAAS,KAAKA,CAAL,CAAOc,SAAP,CAAiB,KAAKO,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EAAlE,CAAT;AAEA,WAAKzI,CAAL,CAAO6H,MAAP,CAAc,KAAKwE,UAAnB,EAA+B,CAA/B;AACA,WAAKrM,CAAL,GAAS,KAAKA,CAAL,CAAOgI,SAAP,CAAiB,KAAKO,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EAAlE,CAAT;AACD;;;WAED,iBAAQR,KAAR,EAA+B;AAC7B,UAAMjE,MAAM,GAAG,IAAIhI,gDAAJ,CACb,KAAKuM,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EADpC,EAEbR,KAAK,CAAC5L,IAFO,EAGboI,QAHa,EAAf;;AAKA,WAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmJ,KAAK,CAAC5L,IAA1B,EAAgCyC,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMgL,IAAI,GAAGqC,kDAAM,CACjBlE,KAAK,CAACzL,GAAN,CAAUsC,CAAV,CADiB,EAEjB,KAAKiI,KAFY,EAGjB,KAAKD,MAHY,EAIjB,KAAKD,KAJY,EAKjB,KAAKuD,UALY,EAMjB,KAAKA,UANY,EAOjB,KAAKH,OAPY,EAQjB,KAAKA,OARY,EASjB,KAAK9F,MATY,EAUjB,KAAKA,MAVY,CAAnB;AAaA,YAAMoI,GAAG,GAAG,KAAKrF,CAAL,CAAOtI,GAAP,CAAWkL,IAAI,CAACvK,SAAL,EAAX,EAA6B7B,GAA7B,CAAiC,KAAKsC,CAAL,CAAOW,SAAP,CAAiB,CAAjB,EAAoBmJ,IAAI,CAAC1N,IAAzB,CAAjC,CAAZ;AACA4H,QAAAA,MAAM,CAACwI,MAAP,CAAc1N,CAAd,EAAiByN,GAAG,CAACE,eAAJ,EAAjB;AACD;;AAED,WAAKrF,CAAL,GAASpD,MAAT;AACA,WAAKmD,CAAL,GAAS,KAAKe,UAAL,CAAgB,KAAKd,CAArB,CAAT;AAEA,aAAO,KAAKD,CAAZ;AACD;;;WAED,oBAAWvK,CAAX,EAA8B;AAC5B,aAAOA,CAAP;AACD;;;WAED,oBAAWoK,aAAX,EAAoE;AAClE,UAAIA,aAAa,CAACsB,IAAd,EAAJ,EAA0B;AACxB,YAAItB,aAAa,CAAC6C,OAAd,MAA2BJ,qDAA/B,EAAkD;AAChD,eAAKW,UAAL,GAAkBpD,aAAa,CAACuB,cAAd,EAAlB;AACA,eAAK0B,OAAL,GAAe,CAAf;AACA,eAAK9F,MAAL,GAAc,CAAd;AACA,eAAK0C,KAAL,GAAaG,aAAa,CAACuB,cAAd,EAAb;AACA,eAAKzB,MAAL,GAAcE,aAAa,CAACwB,eAAd,EAAd;AACA,eAAKzB,KAAL,GAAaC,aAAa,CAACyB,cAAd,EAAb;AACA,eAAK4D,UAAL,GACErF,aAAa,CAACuB,cAAd,KAAiCvB,aAAa,CAACwB,eAAd,EAAjC,GAAmExB,aAAa,CAACyB,cAAd,EADrE;AAED,SATD,MASO;AACL,gBAAM,IAAI5M,KAAJ,CAAU,sEAAV,CAAN;AACD;AACF,OAbD,MAaO;AACL,cAAM,IAAIA,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,aAAO,IAAP;AACD;;;WAED,iBAAQgN,SAAR,EAAmD;AACjD,aAAO,IAAP;AACD;;;WAED,uBAAcuB,UAAd,EAAuD;AACrD,aAAO,IAAP;AACD;;;WAED,mBAAUjG,MAAV,EAA+C;AAC7C,aAAO,IAAP;AACD;;;WAED,oBAAW8F,OAAX,EAAiD;AAC/C,aAAO,IAAP;AACD;;;WAED,kBAASrD,KAAT,EAA6C;AAC3C,aAAO,IAAP;AACD;;;WAED,mBAAUA,KAAV,EAA8C;AAC5C,aAAO,IAAP;AACD;;;WAED,kBAASA,KAAT,EAA6C;AAC3C,aAAO,IAAP;AACD;;;WAED,uBAAcA,KAAd,EAAkD;AAChD,aAAO,IAAP;AACD;;;WAED,oBAAW+F,KAAX,EAAkC;AAChC,aAAOA,KAAP;AACD;;;;EAlG+BP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLlC;AACA;AACA;AAEO,IAAMS,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,yDAC6B,IAD7B;;AAAA,yDAE6B,IAF7B;;AAAA,yDAG6B,IAH7B;;AAAA,yDAI6B,IAJ7B;;AAAA,yDAK6B,IAL7B;;AAAA,yDAM6B,IAN7B;;AAAA,yDAO6B,IAP7B;;AAAA,yDAQ6B,IAR7B;;AAAA,yDAS6B,IAT7B;;AAAA,yDAU6B,IAV7B;;AAAA,0DAW8B,IAX9B;;AAAA,0DAY8B,IAZ9B;;AAAA,0DAa8B,IAb9B;;AAAA,0DAc8B,IAd9B;;AAAA,0DAe8B,IAf9B;;AAAA,0DAgB8B,IAhB9B;;AAAA,0DAiB8B,IAjB9B;;AAAA,0DAkB8B,IAlB9B;;AAAA,0DAmB8B,IAnB9B;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAqBE,qBAAkB,CAAE;AArBtB;AAAA;AAAA,WAuBE,iBAAQ5E,KAAR,EAAuB6E,KAAvB,EAAsCC,KAAtC,EAAuD;AACrD,UAAMxI,EAAE,GAAG0D,KAAK,CAAC7L,IAAjB;AACA,UAAMQ,CAAC,GAAGqL,KAAK,CAAC5L,IAAhB;AACA,UAAM2Q,EAAE,GAAG,KAAKC,EAAL,CAAQ7Q,IAAnB;AACA,UAAM8Q,EAAE,GAAG,KAAKD,EAAL,CAAQ5Q,IAAnB;AAEA,UAAM8Q,MAAM,GAAG,IAAInR,gDAAJ,CAAWuI,EAAE,GAAG2I,EAAhB,EAAoBtQ,CAApB,CAAf;AAEA,UAAMwQ,EAAE,GAAG,KAAKC,EAAL,CAAQzO,GAAR,CAAYuO,MAAZ,EAAoBzP,GAApB,CAAwB,KAAK4P,EAA7B,EAAiCC,OAAjC,EAAX;AACA,UAAMC,EAAE,GAAG,KAAKC,EAAL,CAAQ7O,GAAR,CAAYuO,MAAZ,EAAoBzP,GAApB,CAAwB,KAAKgQ,EAA7B,EAAiCH,OAAjC,EAAX;AACA,UAAMI,GAAG,GAAG,KAAKC,EAAL,CAAQhP,GAAR,CAAYuO,MAAZ,EAAoBzP,GAApB,CAAwB,KAAKmQ,EAA7B,EAAiCC,IAAjC,EAAZ;AACA,UAAMC,KAAK,GAAGX,EAAE,CAACnP,QAAH,CAAY8O,KAAZ,EAAmBrP,GAAnB,CAAuB8P,EAAE,CAACvP,QAAH,CAAY0P,GAAZ,CAAvB,CAAd;AACA,UAAMK,EAAE,GAAG,KAAKC,EAAL,CAAQrP,GAAR,CAAYuO,MAAZ,EAAoBzP,GAApB,CAAwB,KAAKwQ,EAA7B,EAAiCX,OAAjC,EAAX;AACA,UAAMY,KAAK,GAAGH,EAAE,CAAC/P,QAAH,CAAY8P,KAAK,CAACD,IAAN,EAAZ,CAAd;AAEA,UAAMM,MAAM,GAAG,KAAKnB,EAAL,CAAQrO,GAAR,CAAYuP,KAAZ,EAAmBzQ,GAAnB,CAAuB,KAAK2Q,EAA5B,EAAgCC,OAAhC,EAAf;AACA,aAAO,CAACH,KAAD,EAAQpB,KAAR,CAAP;AACD;AAxCH;AAAA;AAAA,WA0CE,kBAASwB,MAAT,EAAyBC,MAAzB,EAA+C,CAAE;AA1CnD;AAAA;AAAA,WA4CE,oBAAW5R,CAAX,EAA8B;AAC5B,aAAOA,CAAP;AACD;AA9CH;AAAA;AAAA,WAgDE,mBAAqB;AACnB,aAAO6M,sDAAP;AACD;AAlDH;AAAA;AAAA,WAoDE,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAP;AACD;AAtDH;AAAA;AAAA,WAwDE,gBAAgB;AACd,aAAO,IAAP;AACD;AA1DH;AAAA;AAAA,WA4DE,gBAAgB;AACd,aAAO,KAAP;AACD;AA9DH;AAAA;AAAA,WAgEE,iBAAQ/F,KAAR,EAAqC;AACnC,WAAKwB,QAAL,CAAcxB,KAAK,CAAC,CAAD,CAAnB;AACA,WAAK8B,SAAL,CAAe9B,KAAK,CAAC,CAAD,CAApB;AACA,WAAKkC,QAAL,CAAclC,KAAK,CAAC,CAAD,CAAnB;AAEA,aAAO,IAAP;AACD;AAtEH;AAAA;AAAA,WAwEE,mBAAkB;AAChB,aAAO,KAAKE,MAAZ;AACD;AA1EH;AAAA;AAAA,WA4EE,0BAAyB;AACvB,aAAO,KAAKD,KAAZ;AACD;AA9EH;AAAA;AAAA,WAgFE,2BAA0B;AACxB,aAAO,KAAKC,MAAZ;AACD;AAlFH;AAAA;AAAA,WAoFE,0BAAyB;AACvB,aAAO,KAAKC,KAAZ;AACD;AAtFH;AAAA;AAAA,WAwFE,mBAAkB;AAChB,aAAO,CAAP;AACD;AA1FH;;AAAA;AAAA,EAA+BL,yDAA/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;;IAEMgI;;;;;;;;;;;;;WACJ,oBAAW9R,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAACqB,QAAF,CAAW,CAAC,CAAZ,EAAenB,GAAf,GAAqBY,GAArB,CAAyB,CAAzB,EAA4BiR,QAA5B,CAAqC,CAArC,CAAP;AACD;;;WAED,mBAAqB;AACnB,aAAOlF,sDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAK,CAAC1O,QAAN,CAAe,KAAKiK,UAAL,CAAgByE,KAAhB,EAAuB1O,QAAvB,CAAgC,KAAKiK,UAAL,CAAgByE,KAAK,CAACzO,QAAN,EAAhB,CAAhC,CAAf,CAAP;AACD;;;;EAXyB+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ5B;AACA;AACA;AACA;;IAEM4H;;;;;;;;;;;;;;;;iEACS;;6DACJ;;;;;;;WAET,qBAAkB,CAChB;AACD;;;WAED,2BAA0B;AACxB,aAAO,CAAC,KAAK/H,MAAL,GAAc,KAAKsD,UAApB,IAAkC,KAAKjG,MAAvC,GAAgD,CAAvD;AACD;;;WAED,0BAAyB;AACvB,aAAO,CAAC,KAAK0C,KAAL,GAAa,KAAKuD,UAAnB,IAAiC,KAAKjG,MAAtC,GAA+C,CAAtD;AACD;;;WAED,0BAAyB;AACvB,aAAO,KAAK4C,KAAZ;AACD;;;WAED,uBAAcuF,IAAd,EAA0C;AACxC,WAAKlC,UAAL,GAAkBkC,IAAlB;AACA,aAAO,IAAP;AACD;;;WAED,yBAAwB;AACtB,aAAO,KAAKlC,UAAZ;AACD;;;WAED,mBAAUjG,MAAV,EAAwC;AACtC,WAAKA,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACD;;;WAED,qBAAoB;AAClB,aAAO,KAAKA,MAAZ;AACD;;;WAED,sBAAqB;AACnB,aAAO,CAAP;AACD;;;WAED,iBAAQ8D,KAAR,EAA+B;AAC7B,UAAMjE,MAAM,GAAG,IAAIhI,gDAAJ,CAAW,KAAKuM,cAAL,KAAwB,KAAKC,eAAL,EAAxB,GAAiD,KAAKC,cAAL,EAA5D,EAAmFR,KAAK,CAAC5L,IAAzF,CAAf;;AAEA,WAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmJ,KAAK,CAAC5L,IAA1B,EAAgCyC,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAMgQ,IAAI,GAAG/E,mDAAO,CAClB9B,KAAK,CAACzL,GAAN,CAAUsC,CAAV,CADkB,EAElB,KAAKiI,KAFa,EAGlB,KAAKD,MAHa,EAIlB,KAAKD,KAJa,EAKlB,KAAKuD,UALa,EAMlB,KAAKA,UANa,EAOlB,KAAKjG,MAPa,EAQlB,KAAKA,MARa,CAApB;AAWAH,QAAAA,MAAM,CAACwI,MAAP,CAAc1N,CAAd,EAAiBgQ,IAAI,CAACrC,eAAL,EAAjB;AACD;;AAED,WAAKrF,CAAL,GAASpD,MAAT;AACA,WAAKmD,CAAL,GAAS,KAAKe,UAAL,CAAgB,KAAKd,CAArB,CAAT;AAEA,aAAO,KAAKD,CAAZ;AACD;;;WAED,oBAAWvK,CAAX,EAA8B;AAC5B,aAAOA,CAAP;AACD;;;WAED,mBAAqB;AACnB,aAAO6M,qDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAP;AACD;;;;EA5EwBhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ3B;AACA;;IAGMoG;;;;;;;;;;;;;WACJ,oBAAWnS,CAAX,EAA8B;AAC5B,aAAOA,CAAP;AACD;;;WAED,mBAAqB;AACnB,aAAO6M,qDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAK,CAACvN,OAAN,EAAP;AACD;;;;EAXwB6H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL3B;AACA;AACA;AAEO,IAAMgI,QAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,0DAC8B,IAD9B;;AAAA,0DAE8B,IAF9B;;AAAA,0DAG8B,IAH9B;;AAAA,wDAI4B,IAJ5B;;AAAA,yDAK6B,IAL7B;;AAAA,2DAM+B,IAN/B;;AAAA,2DAO+B,IAP/B;;AAAA,2DAQ+B,IAR/B;;AAAA,yDAS6B,IAT7B;;AAAA,0DAU8B,IAV9B;;AAAA,wDAWuB,EAXvB;;AAAA,wDAYuB,EAZvB;;AAAA,wDAauB,EAbvB;;AAAA,6DAciC,IAdjC;;AAAA,0DAe8B,IAf9B;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAiBE,qBAAkB;AAChB,WAAKC,GAAL,GAAW,IAAIlT,gDAAJ,CAAW,GAAX,EAAgB,EAAhB,CAAX;AACA,WAAKkT,GAAL,GAAW,KAAKA,GAAL,CAASlH,SAAT,CAAmB,CAAnB,CAAX;AAEA,WAAKmH,GAAL,GAAW,IAAInT,gDAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAX;AACA,WAAKmT,GAAL,GAAW,KAAKA,GAAL,CAASnH,SAAT,CAAmB,CAAnB,CAAX;AAEA,WAAKoH,GAAL,GAAW,IAAIpT,gDAAJ,CAAW,EAAX,EAAe,GAAf,CAAX;AACA,WAAKoT,GAAL,GAAW,KAAKA,GAAL,CAASpH,SAAT,CAAmB,CAAnB,CAAX;AAEA,WAAKhI,CAAL,GAAS,IAAIhE,gDAAJ,CAAW,GAAX,EAAgB,CAAhB,CAAT;AACA,WAAKgE,CAAL,GAAS,KAAKA,CAAL,CAAOgI,SAAP,CAAiB,CAAjB,CAAT;AAEA,WAAKqG,EAAL,GAAU,IAAIrS,gDAAJ,CAAW,EAAX,EAAe,CAAf,CAAV;AACA,WAAKqS,EAAL,GAAU,KAAKA,EAAL,CAAQrG,SAAR,CAAkB,CAAlB,CAAV;AAEA,WAAKqH,IAAL,GAAY,IAAIrT,gDAAJ,CAAW,GAAX,EAAgB,EAAhB,CAAZ;AACA,WAAKqT,IAAL,GAAY,KAAKA,IAAL,CAAU5K,QAAV,EAAZ;AAEA,WAAK6K,IAAL,GAAY,IAAItT,gDAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAZ;AACA,WAAKsT,IAAL,GAAY,KAAKA,IAAL,CAAU7K,QAAV,EAAZ;AAEA,WAAK8K,IAAL,GAAY,IAAIvT,gDAAJ,CAAW,EAAX,EAAe,GAAf,CAAZ;AACA,WAAKuT,IAAL,GAAY,KAAKA,IAAL,CAAU9K,QAAV,EAAZ;AAEA,WAAKmD,EAAL,GAAU,IAAI5L,gDAAJ,CAAW,GAAX,EAAgB,CAAhB,CAAV;AACA,WAAK4L,EAAL,GAAU,KAAKA,EAAL,CAAQnD,QAAR,EAAV;AAEA,WAAK+K,GAAL,GAAW,IAAIxT,gDAAJ,CAAW,EAAX,EAAe,CAAf,CAAX;AACA,WAAKwT,GAAL,GAAW,KAAKA,GAAL,CAAS/K,QAAT,EAAX;AACD;AA/CH;AAAA;AAAA,WAiDE,iBAAQqI,KAAR,EAAuB5M,CAAvB,EAA4C;AAC1C,UAAMiO,KAAK,GAAG,KAAKgB,GAAL,CAASvQ,GAAT,CAAakO,KAAb,EAAoBpP,GAApB,CAAwB,KAAKwR,GAAL,CAAStQ,GAAT,CAAasB,CAAb,CAAxB,EAAyCxC,GAAzC,CAA6C,KAAKsC,CAAlD,EAAqD8N,IAArD,EAAd;AACA,UAAM3N,CAAC,GAAG,KAAKiP,GAAL,CAASxQ,GAAT,CAAauP,KAAb,EAAoBzQ,GAApB,CAAwB,KAAK2Q,EAA7B,EAAiCC,OAAjC,EAAV;AACA,WAAKnH,CAAL,CAAOjE,IAAP,CAAYiL,KAAZ;AACA,WAAK/J,CAAL,CAAOlB,IAAP,CAAYhD,CAAZ;AACA,WAAKmE,CAAL,CAAOnB,IAAP,CAAY/C,CAAZ;AACA,aAAO,CAACgO,KAAD,EAAQhO,CAAR,CAAP;AACD;AAxDH;AAAA;AAAA,WA0DE,kBAASsP,EAAT,EAAqBvP,CAArB,EAAgCH,CAAhC,EAA2C+M,KAA3C,EAAgE;AAC9D,WAAKyC,IAAL,GAAY,KAAKA,IAAL,CAAU7R,GAAV,CAAc+R,EAAE,CAAC7Q,GAAH,CAAOmB,CAAC,CAACR,SAAF,EAAP,CAAd,EAAqCmQ,MAArC,CAA4C,CAA5C,EAA+ChD,MAA/C,CAAsD,CAAC,CAAvD,CAAZ;AACA,WAAK8C,GAAL,GAAW,KAAKA,GAAL,CAAS9R,GAAT,CAAa+R,EAAb,EAAiBC,MAAjB,CAAwB,CAAxB,EAA2BhD,MAA3B,CAAkC,CAAC,CAAnC,CAAX;AACA,UAAMiD,EAAE,GAAG,KAAKP,GAAL,CAAS7P,SAAT,GAAqBX,GAArB,CAAyB6Q,EAAzB,EAA6B/R,GAA7B,CAAiC,KAAK6Q,MAAtC,CAAX;AACA,UAAMqB,KAAK,GAAG7P,CAAC,CAAC9B,QAAF,CAAW8B,CAAX,EAAc7B,QAAd,GAAyBD,QAAzB,CAAkC0R,EAAlC,CAAd;AACA,WAAK/H,EAAL,GAAU,KAAKA,EAAL,CAAQlK,GAAR,CAAYkS,KAAZ,EAAmBF,MAAnB,CAA0B,CAA1B,EAA6BhD,MAA7B,CAAoC,CAAC,CAArC,CAAV;AACA,WAAK2C,IAAL,GAAY,KAAKA,IAAL,CAAU3R,GAAV,CAAckS,KAAK,CAAChR,GAAN,CAAUsB,CAAC,CAACX,SAAF,EAAV,CAAd,EAAwCmQ,MAAxC,CAA+C,CAA/C,EAAkDhD,MAAlD,CAAyD,CAAC,CAA1D,CAAZ;AACA,WAAK4C,IAAL,GAAY,KAAKA,IAAL,CAAU5R,GAAV,CAAckS,KAAK,CAAChR,GAAN,CAAUkO,KAAK,CAACvN,SAAN,EAAV,CAAd,EAA4CmQ,MAA5C,CAAmD,CAAnD,EAAsDhD,MAAtD,CAA6D,CAAC,CAA9D,CAAZ;AACA,WAAK6B,MAAL,GAAc,KAAKY,GAAL,CAAS5P,SAAT,GAAqBX,GAArB,CAAyBgR,KAAzB,EAAgCF,MAAhC,CAAuC,CAAvC,EAA0ChD,MAA1C,CAAiD,CAAC,CAAlD,CAAd;AACD;AAnEH;AAAA;AAAA,WAqEE,oBAAW9P,CAAX,EAA8B;AAC5B,aAAOA,CAAP;AACD;AAvEH;AAAA;AAAA,WAyEE,mBAAqB;AACnB,aAAO6M,sDAAP;AACD;AA3EH;AAAA;AAAA,WA6EE,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAP;AACD;AA/EH;AAAA;AAAA,WAiFE,gBAAgB;AACd,aAAO,IAAP;AACD;AAnFH;AAAA;AAAA,WAqFE,gBAAgB;AACd,aAAO,KAAP;AACD;AAvFH;AAAA;AAAA,WAyFE,iBAAQ/F,KAAR,EAAoC;AAClC,WAAKwB,QAAL,CAAcxB,KAAK,CAAC,CAAD,CAAnB;AACA,WAAK8B,SAAL,CAAe9B,KAAK,CAAC,CAAD,CAApB;AACA,WAAKkC,QAAL,CAAclC,KAAK,CAAC,CAAD,CAAnB;AAEA,aAAO,IAAP;AACD;AA/FH;AAAA;AAAA,WAiGE,mBAAkB;AAChB,aAAO,KAAKE,MAAZ;AACD;AAnGH;AAAA;AAAA,WAqGE,0BAAyB;AACvB,aAAO,KAAKD,KAAZ;AACD;AAvGH;AAAA;AAAA,WAyGE,2BAA0B;AACxB,aAAO,KAAKC,MAAZ;AACD;AA3GH;AAAA;AAAA,WA6GE,0BAAyB;AACvB,aAAO,KAAKC,KAAZ;AACD;AA/GH;AAAA;AAAA,WAiHE,mBAAkB;AAChB,aAAO,CAAP;AACD;AAnHH;AAAA;AAAA,WAqHE,oBAAmB;AACjB,aAAO,KAAKF,KAAZ;AACD;AAvHH;;AAAA;AAAA,EAA8BH,yDAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;;IAEMmJ;;;;;;;;;;;;;WACJ,oBAAWjT,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAAC8S,MAAF,CAAS,GAAT,CAAP;AACD;;;WAED,mBAAqB;AACnB,aAAOjG,kDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAA0B;AACxB,aAAO1L,4DAAc,GAAG4J,OAAjB,CAAyB,qBAAzB,EAAgD8B,KAAhD,EAAuD,KAAKxF,CAA5D,CAAP;AACD;;;;EAXqBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJxB;AACA;;IAEM8I;;;;;;;;;;;;;WACJ,oBAAWnT,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAAC0R,OAAF,EAAP;AACD;;;WAED,mBAAqB;AACnB,aAAO7E,qDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAK,CAAC1O,QAAN,CAAe,CAAC,CAAhB,EAAmBP,GAAnB,CAAuB,CAAvB,EAA0BiR,QAA1B,CAAmC,CAAnC,CAAP;AACD;;;;EAXwB1H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH3B;AACA;;IAEM+I;;;;;;;;;;;;;WACJ,oBAAWpT,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAACE,GAAF,GAAQY,GAAR,CAAY,CAAZ,EAAeP,GAAf,EAAP;AACD;;;WAED,mBAAqB;AACnB,aAAOsM,sDAAP;AACD;;;WAED,oBAAWkD,KAAX,EAAkC;AAChC,aAAOA,KAAK,CAAC1O,QAAN,CAAe,CAAC,CAAhB,EAAmBnB,GAAnB,GAAyBY,GAAzB,CAA6B,CAA7B,EAAgCiR,QAAhC,CAAyC,CAAzC,CAAP;AACD;;;;EAXyB1H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH5B;AACA;;IAEMiJ;;;;;;;;;;;;;WACJ,oBAAWtT,CAAX,EAA8B;AAC5B,aAAOA,CAAC,CAACkR,IAAF,EAAP;AACD;;;WAED,mBAAqB;AACnB,aAAOrE,kDAAP;AACD;;;WAED,oBAAW1L,KAAX,EAAkC;AAChC,aAAO,KAAKmK,UAAL,CAAgBnK,KAAhB,EAAuBU,GAAvB,CAA2B,CAA3B,EAA8BP,QAA9B,EAAP;AACD;;;;EAXqB+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEO,IAAMjL,MAAb;AAKE,oBAA6E;AAAA,QAAjEI,IAAiE,uEAA1D,CAA0D;AAAA,QAAvDC,IAAuD,uEAAhD,CAAgD;AAAA,QAA7CC,IAA6C,uEAAN,IAAM;;AAAA;;AAAA,kCAJ/D,CAI+D;;AAAA,kCAH/D,CAG+D;;AAAA,kCAF5C,IAE4C;;AAC3E,SAAKuL,MAAL,CAAYzL,IAAZ,EAAkBC,IAAlB;;AACA,QAAIC,IAAJ,EAAU;AACR,WAAK6T,YAAL,CAAkB7T,IAAlB;AACD;AACF;;AAVH;AAAA;AAAA,WAYE,gBAAOF,IAAP,EAAqBC,IAArB,EAA2C;AACzC,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACA,WAAKC,IAAL,GAAY,EAAZ;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAKD,IAAL,CAAUC,GAAV,IAAiB,IAAIsC,KAAJ,CAAU,KAAKxC,IAAf,CAAjB;AACD;;AAED,aAAO,IAAP;AACD;AArBH;AAAA;AAAA,WAuBE,sBAAakF,GAAb,EAA0D;AACxD,UAAMjF,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,IAAIsC,KAAJ,CAAU,KAAKxC,IAAf,CAAZ;AACD;;AACD,WAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAID,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3C,cAAI,OAAOgF,GAAG,CAAChF,KAAD,CAAV,KAAoB,QAAxB,EAAkC;AAChCD,YAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,KAAD,CAApB;AACD,WAFD,MAEO,IAAIgF,GAAG,CAAChF,KAAD,CAAH,YAAoB6T,YAAxB,EAAsC;AAC3C9T,YAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,CAAjB;AACD,WAFM,MAEA,IAAI+E,GAAG,CAAChF,KAAD,CAAH,IAAY,OAAOgF,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,CAAP,KAAyB,QAAzC,EAAmD;AACxDF,YAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,CAAjB;AACD,WAFM,MAEA,IAAI,OAAO+E,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,CAAP,KAAyB,QAA7B,EAAuC;AAC5C;AACAF,YAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,GAAV,IAAiB+E,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,EAAcgF,MAAd,GAAuBC,MAAM,CAACF,GAAG,CAAChF,KAAD,CAAH,CAASC,GAAT,CAAD,CAA7B,GAA+CkF,GAAhE;AACD,WAHM,MAGA;AACLpF,YAAAA,IAAI,CAACC,KAAD,CAAJ,CAAUC,GAAV,IAAiBkF,GAAjB;AACD;AACF;AACF;;AACD,WAAKpF,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACD;AA9CH;AAAA;AAAA,WAgDE,eAAc;AACZ,UAAIuB,GAAG,GAAG,GAAV;;AACA,WAAK,IAAItB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CqB,UAAAA,GAAG,IAAI,KAAKvB,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAP;AACD;AACF;;AACD,aAAOqB,GAAP;AACD;AAxDH;AAAA;AAAA,WA0DE,sBAAqB;AACnB,UAAMvB,IAAI,GAAG,EAAb;AACA,UAAMwI,CAAC,GAAG,KAAKvF,SAAL,EAAV;;AACA,WAAK,IAAIhD,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGuI,CAAC,CAAC1I,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,CAAC,CAAD,CAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGsI,CAAC,CAACzI,IAA1B,EAAgCG,GAAG,IAAI,CAAvC,EAA0C;AACxCF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAU,CAAV,KAAgBuI,CAAC,CAACxI,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAhB;AACD;AACF;;AACD,aAAO,IAAIR,MAAJ,CAAW,KAAKK,IAAhB,EAAsB,CAAtB,EAAyBC,IAAzB,CAAP;AACD;AApEH;AAAA;AAAA,WAsEE,sBAAqB;AACnB,UAAMA,IAAI,GAAG,CAAC,EAAD,CAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,YAAIsB,GAAG,GAAG,GAAV;;AACA,aAAK,IAAIrB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CqB,UAAAA,GAAG,IAAI,KAAKvB,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAP;AACD;;AACDF,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ4G,IAAR,CAAarF,GAAb;AACD;;AACD,aAAO,IAAI7B,MAAJ,CAAW,CAAX,EAAc,KAAKI,IAAnB,EAAyBE,IAAzB,CAAP;AACD;AAhFH;AAAA;AAAA,WAkFE,mBAAoB;AAClB,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAAC4G,IAAL,CAAU,KAAK5G,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAV;AACD;AACF;;AACD,aAAOF,IAAP;AACD;AA1FH;AAAA;AAAA,WA4FE,mBAAUF,IAAV,EAAwBC,IAAxB,EAA8C;AAC5C,UAAID,IAAI,KAAK,CAAT,IAAc,KAAKC,IAAL,KAAc,CAA5B,IAAiCA,IAAI,GAAG,CAA5C,EAA+C;AAC7C,YAAMgU,OAAO,GAAG,EAAhB;;AACA,aAAK,IAAI9T,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C8T,UAAAA,OAAO,CAAC9T,GAAD,CAAP,GAAe,EAAf;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,IAAxB,EAA8BG,GAAG,IAAI,CAArC,EAAwC;AACtC6T,YAAAA,OAAO,CAAC9T,GAAD,CAAP,CAAaC,GAAb,IAAoB,KAAKF,IAAL,CAAUC,GAAV,EAAe,CAAf,CAApB;AACD;AACF;;AACD,eAAOP,MAAM,CAACe,IAAP,CAAYsT,OAAZ,CAAP;AACD,OATD,MASO,IAAIhU,IAAI,KAAK,CAAT,IAAc,KAAKD,IAAL,KAAc,CAA5B,IAAiCA,IAAI,GAAG,CAA5C,EAA+C;AACpD,YAAMiU,QAAO,GAAG,EAAhB;;AACA,aAAK,IAAI9T,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAGH,IAAxB,EAA8BG,KAAG,IAAI,CAArC,EAAwC;AACtC8T,UAAAA,QAAO,CAAC9T,KAAD,CAAP,GAAe,EAAf;;AACA,eAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3C6T,YAAAA,QAAO,CAAC9T,KAAD,CAAP,CAAaC,KAAb,IAAoB,KAAKF,IAAL,CAAU,CAAV,EAAaE,KAAb,CAApB;AACD;AACF;;AACD,eAAOR,MAAM,CAACe,IAAP,CAAYsT,QAAZ,CAAP;AACD;;AACD,aAAO,IAAP;AACD;AAjHH;AAAA;AAAA,WAmHE,qBAAoB;AAClB,aAAOpP,4DAAc,GAAG4J,OAAjB,CAAyB,WAAzB,EAAsC,IAAtC,CAAP;AACD;AArHH;AAAA;AAAA,WAuHE,0BAAiBrO,GAAjB,EAAsC;AACpC,UAAI8T,QAAQ,GAAG,CAAC,CAAhB;AACA,UAAIjS,GAAG,GAAG,CAACsE,QAAX;;AAEA,WAAK,IAAIpG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,YAAI,KAAKD,IAAL,IAAa,KAAKA,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB6B,GAAvC,EAA4C;AAC1CA,UAAAA,GAAG,GAAG,KAAK/B,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAN;AACA8T,UAAAA,QAAQ,GAAG/T,GAAX;AACD;AACF;;AAED,aAAO+T,QAAP;AACD;AAnIH;AAAA;AAAA,WAqIE,0BAAiB/T,GAAjB,EAAsC;AACpC,UAAI+T,QAAQ,GAAG,CAAC,CAAhB;AACA,UAAIjS,GAAG,GAAG,CAACsE,QAAX;;AAEA,WAAK,IAAInG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,YAAI,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB6B,GAA1B,EAA+B;AAC7BA,UAAAA,GAAG,GAAG,KAAK/B,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAN;AACA8T,UAAAA,QAAQ,GAAG9T,GAAX;AACD;AACF;;AAED,aAAO8T,QAAP;AACD;AAjJH;AAAA;AAAA,WAmJE,eAAMC,QAAN,EAAwBC,QAAxB,EAA0CC,SAA1C,EAA6DC,SAA7D,EAAwF;AACtF,UAAMpU,IAAI,GAAG,EAAb;;AAEA,WAAK,IAAIC,GAAG,GAAGgU,QAAV,EAAoBI,MAAM,GAAG,CAAlC,EAAqCpU,GAAG,GAAG,KAAKH,IAAX,IAAmBG,GAAG,GAAGgU,QAAQ,GAAGE,SAAzE,EAAoFlU,GAAG,IAAI,CAAP,EAAUoU,MAAM,IAAI,CAAxG,EAA2G;AACzGrU,QAAAA,IAAI,CAACqU,MAAD,CAAJ,GAAe,IAAI9R,KAAJ,CAAU6R,SAAV,CAAf;;AACA,aAAK,IAAIlU,GAAG,GAAGgU,QAAV,EAAoBI,MAAM,GAAG,CAAlC,EAAqCpU,GAAG,GAAG,KAAKH,IAAX,IAAmBG,GAAG,GAAGgU,QAAQ,GAAGE,SAAzE,EAAoFlU,GAAG,IAAI,CAAP,EAAUoU,MAAM,IAAI,CAAxG,EAA2G;AACzGtU,UAAAA,IAAI,CAACqU,MAAD,CAAJ,CAAaC,MAAb,IAAuB,KAAKtU,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAvB;AACD;AACF;;AAED,aAAO,IAAIR,MAAJ,CAAWyU,SAAX,EAAsBC,SAAtB,EAAiCpU,IAAjC,CAAP;AACD;AA9JH;AAAA;AAAA,WAgKE,aAAIE,IAAJ,EAAyB;AACvB,UAAMF,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,CAAC,KAAKD,IAAL,CAAUC,GAAV,EAAeC,IAAf,CAAD,CAAZ;AACD;;AACD,aAAO,IAAIR,MAAJ,CAAW,KAAKI,IAAhB,EAAsB,CAAtB,EAAyBE,IAAzB,CAAP;AACD;AAtKH;AAAA;AAAA,WAwKE,aAAIC,KAAJ,EAAyB;AACvB,UAAMD,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,QAAAA,IAAI,CAACE,GAAD,CAAJ,GAAY,CAAC,KAAKF,IAAL,CAAUC,KAAV,EAAeC,GAAf,CAAD,CAAZ;AACD;;AACD,aAAO,IAAIR,MAAJ,CAAW,KAAKK,IAAhB,EAAsB,CAAtB,EAAyBC,IAAzB,CAAP;AACD;AA9KH;AAAA;AAAA,WAgLE,gBAAOE,GAAP,EAAoB+P,GAApB,EAAyC;AACvC,WAAK,IAAIhQ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,YAAI,KAAKD,IAAL,IAAaiQ,GAAG,CAACjQ,IAArB,EAA2B;AACzB,eAAKA,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB+P,GAAG,CAACjQ,IAAJ,CAASC,GAAT,EAAc,CAAd,CAAtB;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAvLH;AAAA;AAAA,WAyLE,mBAAU;AACR,aAAO,KAAK0B,QAAL,CAAc,CAAC,CAAf,EAAkBnB,GAAlB,GAAwBY,GAAxB,CAA4B,CAA5B,EAA+BiR,QAA/B,CAAwC,CAAxC,CAAP;AACD;AA3LH;AAAA;AAAA,WA6LE,2BAA0B;AACxB,UAAMrS,IAAI,GAAG,EAAb;AACA,UAAIuU,IAAI,GAAG,CAAX;;AACA,WAAK,IAAItU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACuU,IAAD,CAAJ,GAAa,EAAb;AACAvU,UAAAA,IAAI,CAACuU,IAAI,EAAL,CAAJ,CAAa,CAAb,IAAkB,KAAKvU,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAlB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAvMH;AAAA;AAAA,WAyME,eAAc;AACZ,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACiU,GAAL,CAAS,KAAKxU,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAT,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAlNH;AAAA;AAAA,WAoNE,gBAAO;AACL,UAAIuB,GAAG,GAAG,CAAV;AACA,UAAMkT,gBAAgB,GAAG,KAAK3U,IAAL,GAAY,KAAKC,IAA1C;;AAEA,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CqB,UAAAA,GAAG,IAAI,KAAKvB,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAP;AACD;AACF;;AAED,aAAOqB,GAAG,GAAGkT,gBAAb;AACD;AA/NH;AAAA;AAAA,WAiOE,eAAc;AACZ,UAAI1S,GAAG,GAAG,CAACsE,QAAX;;AACA,WAAK,IAAIpG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C6B,UAAAA,GAAG,GAAGxB,IAAI,CAACwB,GAAL,CAAS,KAAK/B,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAT,EAA8B6B,GAA9B,CAAN;AACD;AACF;;AACD,aAAOA,GAAP;AACD;AAzOH;AAAA;AAAA,WA2OE,gBAAOA,GAAP,EAA4B;AAC1B,UAAM/B,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC6F,GAAL,CAAS,KAAKpG,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAT,EAA8B6B,GAA9B,CAAjB;AACD;AACF;;AACD,aAAOrC,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AApPH;AAAA;AAAA,WAsPE,gBAAOoG,GAAP,EAA4B;AAC1B,UAAMpG,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACwB,GAAL,CAAS,KAAK/B,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAT,EAA8BkG,GAA9B,CAAjB;AACD;AACF;;AACD,aAAO1G,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AA/PH;AAAA;AAAA,WAiQE,oBAAmB;AACjB,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AA1QH;AAAA;AAAA,WA4QE,mBAAkB;AAChB,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AArRH;AAAA;AAAA,WAuRE,qBAAyC;AAAA,UAA/B2C,SAA+B,uEAAX,CAAW;AACvC,UAAM3C,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAACK,IAAI,CAACqC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BrC,IAAI,CAAC6B,IAAL,CAAU,IAAIO,SAAd,CAA3C,CAD2C,CAC0B;AACtE;AACF;;AACD,aAAOjD,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAhSH;AAAA;AAAA,WAkSE,oBAAkC;AAAA,UAAzBI,GAAyB,uEAAX,CAAW;AAChC,UAAMJ,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBE,GAAG,GAAG,KAAKJ,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAvB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AA3SH;AAAA;AAAA,WA6SE,gBAAe;AACb,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC6B,IAAL,CAAU,KAAKpC,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB,IAAhC,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAtTH;AAAA;AAAA,WAwTE,aAAIM,CAAJ,EAAuB;AACrB,aAAOqE,4DAAc,GAAG4J,OAAjB,CAAyB,UAAzB,EAAqC,IAArC,EAA2CjO,CAA3C,CAAP;AACD;AA1TH;AAAA;AAAA,WA4TE,kBAASF,GAAT,EAAuC;AACrC,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAMJ,IAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C;AACAF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsBE,GAAvC;AACD;AACF;;AACD,eAAOV,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD,OAVD,MAUO;AACL,YAAMA,KAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,KAAI,CAACC,KAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3C;AACAF,YAAAA,KAAI,CAACC,KAAD,CAAJ,CAAUC,KAAV,IAAiB,KAAKF,IAAL,CAAUC,KAAV,EAAeC,KAAf,IAAsBE,GAAG,CAACJ,IAAJ,CAASC,KAAT,EAAcC,KAAd,CAAvC;AACD;AACF;;AACD,eAAOR,MAAM,CAACe,IAAP,CAAYT,KAAZ,CAAP;AACD;AACF;AAlVH;AAAA;AAAA,WAoVE,kBAASM,CAAT,EAAqC;AACnC,UAAIA,CAAC,YAAYZ,MAAjB,EAAyB;AACvB,YAAMM,IAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsBI,CAAC,CAACN,IAAF,CAAOC,GAAP,EAAYC,GAAZ,CAAvC;AACD;AACF;;AACD,eAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD,OATD,MASO;AACL,YAAMA,MAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,MAAI,CAACC,KAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,MAAI,CAACC,KAAD,CAAJ,CAAUC,KAAV,IAAiB,KAAKF,IAAL,CAAUC,KAAV,EAAeC,KAAf,IAAsBI,CAAvC;AACD;AACF;;AACD,eAAOZ,MAAM,CAACe,IAAP,CAAYT,MAAZ,CAAP;AACD;AACF;AAxWH;AAAA;AAAA,WA0WE,iBAAQ0U,EAAR,EAA2C;AACzC,WAAK,IAAIzU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CwU,UAAAA,EAAE,CAAC,KAAK1U,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAD,CAAF;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAjXH;AAAA;AAAA,WAmXE,iBAAkB;AAChB,aAAO,CAAC,KAAKJ,IAAN,EAAY,KAAKC,IAAjB,CAAP;AACD;AArXH;AAAA;AAAA,WAuXE,gBAAOK,GAAP,EAAqC;AACnC,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAMJ,IAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsBE,GAAvC;AACD;AACF;;AACD,eAAOV,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD,OATD,MASO;AACL,YAAII,GAAG,CAACN,IAAJ,KAAa,KAAKA,IAAlB,IAA0BM,GAAG,CAACL,IAAJ,KAAa,KAAKA,IAAhD,EAAsD;AACpD,gBAAM,IAAIR,KAAJ,6BAA+B,KAAKO,IAApC,eAA6C,KAAKC,IAAlD,oBAAgEK,GAAG,CAACN,IAApE,eAA6EM,GAAG,CAACL,IAAjF,OAAN;AACD;;AACD,YAAMC,MAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,MAAI,CAACC,KAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,MAAI,CAACC,KAAD,CAAJ,CAAUC,KAAV,IAAiB,KAAKF,IAAL,CAAUC,KAAV,EAAeC,KAAf,IAAsBE,GAAG,CAACJ,IAAJ,CAASC,KAAT,EAAcC,KAAd,CAAvC;AACD;AACF;;AACD,eAAOR,MAAM,CAACe,IAAP,CAAYT,MAAZ,CAAP;AACD;AACF;AA9YH;AAAA;AAAA,WAgZE,oBAAmB;AACjB,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,IAAI,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAArB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAzZH;AAAA;AAAA,WA2ZE,4BAAmBI,GAAnB,EAAwC;AACtC,UAAMJ,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBE,GAAG,GAAG,KAAKJ,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAvB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AApaH;AAAA;AAAA,WAsaE,aAAIM,CAAJ,EAAgC;AAC9B,UAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,YAAMN,IAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,KAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsBI,CAAvC;AACD;AACF;;AACD,eAAOZ,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD,OATD,MASO,IAAIM,CAAC,YAAYZ,MAAjB,EAAyB;AAC9B,YAAIY,CAAC,CAACR,IAAF,KAAW,KAAKA,IAAhB,IAAwBQ,CAAC,CAACP,IAAF,KAAW,KAAKA,IAA5C,EAAkD;AAChD,gBAAM,IAAIR,KAAJ,qCAAuC,KAAKO,IAA5C,kBAAwD,KAAKC,IAA7D,uBAA8EO,CAAC,CAACR,IAAhF,kBAA4FQ,CAAC,CAACP,IAA9F,OAAN;AACD;;AACD,YAAMC,MAAI,GAAG,EAAb;;AACA,aAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CD,UAAAA,MAAI,CAACC,KAAD,CAAJ,GAAY,EAAZ;;AACA,eAAK,IAAIC,KAAG,GAAG,CAAf,EAAkBA,KAAG,GAAG,KAAKH,IAA7B,EAAmCG,KAAG,IAAI,CAA1C,EAA6C;AAC3CF,YAAAA,MAAI,CAACC,KAAD,CAAJ,CAAUC,KAAV,IAAiB,KAAKF,IAAL,CAAUC,KAAV,EAAeC,KAAf,IAAsBI,CAAC,CAACN,IAAF,CAAOC,KAAP,EAAYC,KAAZ,CAAvC;AACD;AACF;;AACD,eAAOR,MAAM,CAACe,IAAP,CAAYT,MAAZ,CAAP;AACD;;AACD,aAAO,IAAP;AACD;AA9bH;AAAA;AAAA,WAgcE,eAAc;AACZ,UAAMA,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACM,GAAL,CAAS,KAAKb,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB,IAA/B,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AAzcH;AAAA;AAAA,WA2cE,gBAAe;AACb,aAAO,KAAKQ,GAAL,GACJiC,QADI,CACK,KAAKd,QAAL,CAAc,CAAC,CAAf,EAAkBnB,GAAlB,EADL,EAEJuM,MAFI,CAEG,KAAKvM,GAAL,GAAWY,GAAX,CAAe,KAAKO,QAAL,CAAc,CAAC,CAAf,EAAkBnB,GAAlB,EAAf,CAFH,CAAP;AAGD;AA/cH;AAAA;AAAA,WAidE,mBAAkB;AAChB,UAAMuB,GAAG,GAAG,KAAKA,GAAL,KAAa,IAAzB;AACA,aAAO,KAAKU,QAAL,CAAcV,GAAd,EAAmBvB,GAAnB,GAAyBuM,MAAzB,CAAgC,KAAKC,UAAL,GAAkB3I,SAAlB,CAA4B,KAAKtE,IAAjC,EAAuC,CAAvC,EAA0CkD,SAA1C,EAAhC,CAAP;AACD;AApdH;AAAA;AAAA,WAsdE,eAAc;AACZ,UAAMjD,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAACC,GAAL,CAAS,KAAKR,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB,IAA/B,CAAjB;AACD;AACF;;AACD,aAAOR,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AA/dH;AAAA;AAAA,WAieE,aAAII,GAAJ,EAAiB;AACf,UAAMJ,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBK,IAAI,CAAC4B,GAAL,CAAS,KAAKnC,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAT,EAA8BE,GAA9B,CAAjB;AACD;AACF;;AACD,aAAOV,MAAM,CAACe,IAAP,CAAYT,IAAZ,CAAP;AACD;AA1eH;AAAA;AAAA,WA4eE,cAAYiF,GAAZ,EAAqC;AAAA;;AACnC,aAAO,IAAIvF,MAAJ,CAAWuF,GAAG,CAACC,MAAf,EAAuB,UAAAD,GAAG,CAAC,CAAD,CAAH,gDAAQC,MAAR,KAAkB,CAAzC,EAA4CD,GAA5C,CAAP;AACD;AA9eH;;AAAA;AAAA;AAifO,IAAM0P,QAAb;AAME,sBAAqF;AAAA,QAAzE7U,IAAyE,uEAAlE,CAAkE;AAAA,QAA/DC,IAA+D,uEAAxD,CAAwD;AAAA,QAArD0K,KAAqD,uEAArC,CAAqC;AAAA,QAAlCzK,IAAkC,uEAAN,IAAM;;AAAA;;AAAA,kCALvE,CAKuE;;AAAA,kCAJvE,CAIuE;;AAAA,mCAHtE,CAGsE;;AAAA,kCAFlD,IAEkD;;AACnF,SAAKuL,MAAL,CAAYzL,IAAZ,EAAkBC,IAAlB,EAAwB0K,KAAxB;;AACA,QAAIzK,IAAJ,EAAU;AACR,WAAKA,IAAL,GAAYA,IAAZ;AACD;AACF;;AAXH;AAAA;AAAA,WAaE,gBAAOF,IAAP,EAAqBC,IAArB,EAAmC0K,KAAnC,EAA4D;AAC1D,WAAK3K,IAAL,GAAYA,IAAZ;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACA,WAAK0K,KAAL,GAAaA,KAAb;AACA,WAAKzK,IAAL,GAAY,EAAZ;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,aAAKD,IAAL,CAAUC,GAAV,IAAiB,IAAIsC,KAAJ,CAAUxC,IAAV,CAAjB;;AACA,aAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3C,eAAKF,IAAL,CAAUC,GAAV,EAAeC,GAAf,IAAsB,IAAIqC,KAAJ,CAAUkI,KAAV,CAAtB;AACD;AACF;;AAED,aAAO,IAAP;AACD;AA1BH;AAAA;AAAA,WA4BE,oBAAW;AACT,UAAMzK,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,IAAIsC,KAAJ,CAAU,KAAKxC,IAAf,CAAZ;;AACA,aAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKH,IAA7B,EAAmCG,GAAG,IAAI,CAA1C,EAA6C;AAC3CF,UAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiB,IAAIqC,KAAJ,CAAU,KAAKkI,KAAf,CAAjB;;AACA,eAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAK1K,IAAjC,EAAuC0K,KAAK,IAAI,CAAhD,EAAmD;AACjDzK,YAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,EAAeuK,KAAf,IAAwB,CAAxB;AACD;AACF;AACF;;AACD,aAAO,IAAIkK,QAAJ,CAAa,KAAK7U,IAAlB,EAAwB,KAAKC,IAA7B,EAAmC,KAAK0K,KAAxC,EAA+CzK,IAA/C,CAAP;AACD;AAxCH;;AAAA;AAAA;;;;;;;;;;;;;;;;;ACnfA;AAGO,IAAM6P,MAAM,GAAG,SAATA,MAAS,CACpBlE,KADoB,EAEpBiJ,QAFoB,EAGpBpK,MAHoB,EAIpBD,KAJoB,EAKpBsK,QALoB,EAMpBC,QANoB,EAOpBC,KAPoB,EAQpBC,KARoB,EASpBC,QAToB,EAUpBC,QAVoB,EAWT;AACX,MAAMnV,IAAI,GAAG+U,QAAQ,GAAGD,QAAX,GAAsBD,QAAnC;AACA,MAAM9U,IAAI,GAAG,CAAC,CAACyK,KAAK,GAAGuK,QAAR,GAAmB,IAAIE,KAAxB,IAAiCE,QAAjC,GAA4C,CAA7C,KAAmD,CAAC1K,MAAM,GAAGqK,QAAT,GAAoB,IAAIE,KAAzB,IAAkCE,QAAlC,GAA6C,CAAhG,CAAb;AACA,MAAIE,gBAAgB,GAAG,CAAvB;AACA,MAAMzN,MAAM,GAAG,IAAIhI,2CAAJ,CAAWI,IAAX,EAAiBC,IAAjB,EAAuBoI,QAAvB,EAAf;;AAEA,OAAK,IAAIiN,SAAS,GAAG,CAACL,KAAtB,EAA6BK,SAAS,GAAGP,QAAZ,IAAwBrK,MAAM,GAAGuK,KAA9D,EAAqEK,SAAS,IAAIH,QAAlF,EAA4F;AAC1F,SAAK,IAAII,SAAS,GAAG,CAACL,KAAtB,EAA6BK,SAAS,GAAGP,QAAZ,IAAwBvK,KAAK,GAAGyK,KAA7D,EAAoEK,SAAS,IAAIH,QAAjF,EAA2F;AACzF,UAAII,gBAAgB,GAAG,CAAvB;;AACA,WAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGX,QAAhC,EAA0CW,OAAO,EAAjD,EAAqD;AACnD,YAAMhG,WAAW,GAAG/E,MAAM,GAAGD,KAAT,GAAiBgL,OAArC;;AACA,aAAK,IAAI1R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgR,QAApB,EAA8BhR,CAAC,EAA/B,EAAmC;AACjC,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkR,QAApB,EAA8BlR,CAAC,EAA/B,EAAmC;AACjC,gBAAIwR,SAAS,GAAGvR,CAAZ,IAAiB,CAAjB,IAAsBwR,SAAS,GAAGzR,CAAZ,IAAiB,CAAvC,IAA4CyR,SAAS,GAAGzR,CAAZ,GAAgB2G,KAA5D,IAAqE6K,SAAS,GAAGvR,CAAZ,GAAgB2G,MAAzF,EAAiG;AAC/F9C,cAAAA,MAAM,CAAC1H,IAAP,CAAYmV,gBAAZ,EAA8BG,gBAA9B,IACE3J,KAAK,CAAC3L,IAAN,CAAW,CAAC6D,CAAC,GAAGuR,SAAL,IAAkB7K,KAAlB,GAA0B8K,SAA1B,GAAsCzR,CAAtC,GAA0C2L,WAArD,EAAkE,CAAlE,CADF;AAED;;AACD+F,YAAAA,gBAAgB;AACjB;AACF;AACF;;AACDH,MAAAA,gBAAgB;AACjB;AACF;;AACD,SAAOzN,MAAP;AACD,CApCM;AAsCA,IAAM+F,OAAO,GAAG,SAAVA,OAAU,CACrB9B,KADqB,EAErBiJ,QAFqB,EAGrBpK,MAHqB,EAIrBD,KAJqB,EAKrBsK,QALqB,EAMrBC,QANqB,EAOrBG,QAPqB,EAQrBC,QARqB,EASV;AACX,MAAMM,WAAW,GAAG,CAACjL,KAAK,GAAGuK,QAAT,IAAqBI,QAArB,GAAgC,CAApD;AACA,MAAMO,YAAY,GAAG,CAACjL,MAAM,GAAGqK,QAAV,IAAsBI,QAAtB,GAAiC,CAAtD;AACA,MAAMS,WAAW,GAAGd,QAApB;AAEA,MAAIU,gBAAgB,GAAG,CAAvB;AACA,MAAM5N,MAAM,GAAG,IAAIhI,2CAAJ,CAAW8V,WAAW,GAAGC,YAAd,GAA6BC,WAAxC,EAAqD,CAArD,EAAwDvN,QAAxD,EAAf;;AAEA,OAAK,IAAIiN,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGP,QAAZ,IAAwBrK,MAAhD,EAAwD4K,SAAS,IAAIH,QAArE,EAA+E;AAC7E,SAAK,IAAII,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGP,QAAZ,IAAwBvK,KAAhD,EAAuD8K,SAAS,IAAIH,QAApE,EAA8E;AAC5E,WAAK,IAAIK,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGX,QAAhC,EAA0CW,OAAO,EAAjD,EAAqD;AACnD,YAAIjG,IAAI,GAAG,CAACjJ,QAAZ;;AACA,YAAMkJ,WAAW,GAAG/E,MAAM,GAAGD,KAAT,GAAiBgL,OAArC;AACA,YAAM/F,YAAY,GAAGgG,WAAW,GAAGC,YAAd,GAA6BF,OAAlD;;AACA,aAAK,IAAI1R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgR,QAApB,EAA8BhR,CAAC,EAA/B,EAAmC;AACjC,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkR,QAApB,EAA8BlR,CAAC,EAA/B,EAAmC;AACjC0L,YAAAA,IAAI,GAAG/O,IAAI,CAACwB,GAAL,CAASuN,IAAT,EAAe3D,KAAK,CAAC3L,IAAN,CAAWuP,WAAW,GAAG,CAAC1L,CAAC,GAAGuR,SAAL,IAAkB7K,KAAhC,GAAwC8K,SAAxC,GAAoDzR,CAA/D,EAAkE,CAAlE,CAAf,CAAP;AACD;AACF;;AACD8D,QAAAA,MAAM,CAAC1H,IAAP,CAAYwP,YAAY,GAAG8F,gBAA3B,EAA6C,CAA7C,IAAkDhG,IAAlD;AACD;;AACDgG,MAAAA,gBAAgB;AACjB;AACF;;AACD,SAAO5N,MAAP;AACD,CAlCM;AAoCA,IAAMiO,KAAK,GAAG,SAARA,KAAQ,CAACvV,GAAD,EAAcwV,aAAd,EAAgD;AACnE,SAAOrV,IAAI,CAACoV,KAAL,CAAW,CAACvV,GAAG,GAAG+E,MAAM,CAAC0Q,OAAd,IAAyBtV,IAAI,CAAC4B,GAAL,CAAS,EAAT,EAAayT,aAAb,CAApC,IAAmErV,IAAI,CAAC4B,GAAL,CAAS,EAAT,EAAayT,aAAb,CAA1E;AACD,CAFM;;;;;;;;;;;;;;;;;;;;;;;;;AC3EP;;IAGME;AAKJ,mBAAYC,UAAZ,EAAmC;AAAA;;AAAA,wCAJa,IAIb;;AAAA,kCAHpB,CAGoB;;AAAA,oCAFR,EAEQ;;AACjC,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;;;WAED,kBAASpJ,KAAT,EAAiC;AAC/B,WAAKqD,IAAL;AACA,WAAKgG,MAAL,CAAYpP,IAAZ,CAAiB+F,KAAjB;AAEA,aAAO,IAAP;AACD;;;WAED,qBAAsB;AACpB,aAAO,KAAKqJ,MAAZ;AACD;;;WAED,iBAAQrK,KAAR,EAA+B;AAC7B,UAAIhL,MAAM,GAAGgL,KAAb;AAEA,WAAKqK,MAAL,CAAYlP,OAAZ,CAAoB,UAAC6F,KAAD,EAAmB;AACrChM,QAAAA,MAAM,GAAGgM,KAAK,CAACsJ,OAAN,CAActV,MAAd,CAAT;AACD,OAFD;AAIA,aAAOA,MAAP;AACD;;;WAED,kBAASmH,CAAT,EAAoBC,CAApB,EAA+BnH,WAA/B,EAAoDiM,cAApD,EAAkF;AAChF,UAAMvM,CAAC,GAAGwH,CAAC,CAAC/H,IAAZ,CADgF,CAEhF;;AACA,UAAI0B,KAAK,GAAGb,WAAW,CAAC6B,QAAZ,CAAqBsF,CAArB,CAAZ;;AAEA,WAAK,IAAI4E,KAAK,GAAG,KAAKqJ,MAAL,CAAY9Q,MAAZ,GAAqB,CAAtC,EAAyCyH,KAAK,IAAI,CAAlD,EAAqDA,KAAK,IAAI,CAA9D,EAAiE;AAC/DlL,QAAAA,KAAK,GAAG,KAAKuU,MAAL,CAAYrJ,KAAZ,EACLuJ,kBADK,GAELC,SAFK,CAEKrO,CAFL,EAEQxH,CAFR,EAEWuM,cAFX,EAE2B,KAAKmJ,MAAL,CAAYrJ,KAAZ,EAAmByJ,UAAnB,CAA8B3U,KAA9B,CAF3B,CAAR;AAGD;AACF;;;WAED,cAAK+H,IAAL,EAAoC;AAClC,UAAM6M,UAAU,GAAG;AACjBN,QAAAA,UAAU,EAAE,KAAKA,UADA;AAEjBC,QAAAA,MAAM,EAAE;AAFS,OAAnB;AAKA,WAAKA,MAAL,CAAYlP,OAAZ,CAAoB,UAAC6F,KAAD,EAAmB;AACrC0J,QAAAA,UAAU,CAACL,MAAX,CAAkBpP,IAAlB,CAAuB;AACrB/B,UAAAA,IAAI,EAAE8H,KAAK,CAACY,OAAN,EADe;AAErByC,UAAAA,IAAI,EAAErD,KAAK,CAACZ,OAAN,EAFe;AAGrBuK,UAAAA,OAAO,EAAE;AACP1L,YAAAA,CAAC,EAAE+B,KAAK,CAAC/B,CAAN,CAAQ5K,IADJ;AAEP0D,YAAAA,CAAC,EAAEiJ,KAAK,CAACjJ,CAAN,CAAQ1D;AAFJ;AAHY,SAAvB;AAQD,OATD;AAWA,UAAM0H,MAAM,GAAG6O,IAAI,CAACC,SAAL,CAAeH,UAAf,CAAf;AAEA,aAAO,IAAIvN,OAAJ,CAAY,UAACC,OAAD,EAAUgB,MAAV,EAAqB;AACtCF,QAAAA,yCAAA,CAAaL,IAAb,EAAmB9B,MAAnB,EAA2B,UAACuC,GAAD,EAAS;AAClC,cAAIA,GAAJ,EAAS;AACPgD,YAAAA,OAAO,CAACyJ,KAAR,CAAczM,GAAd;AACAF,YAAAA,MAAM;AACP;;AACDhB,UAAAA,OAAO,CAACrB,MAAD,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD;;;;;;AAGH;AACA,iEAAeoO,OAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AAIO,IAAMa,UAAb;AAKE,sBAAYZ,UAAZ,EAAmC;AAAA;;AAAA,wCAJa,IAIb;;AAAA,kCAHpB,CAGoB;;AAAA,oCAFL,EAEK;;AACjC,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAPH;AAAA;AAAA,WASE,kBAASpJ,KAAT,EAAuC;AACrC,WAAKqD,IAAL;AACA,WAAKgG,MAAL,CAAYpP,IAAZ,CAAiB+F,KAAjB;AAEA,aAAO,IAAP;AACD;AAdH;AAAA;AAAA,WAgBE,qBAAsB;AACpB,aAAO,KAAKqJ,MAAZ;AACD;AAlBH;AAAA;AAAA,WAoBE,cAAKzO,cAAL,EAA6BqP,cAA7B,EAA6D;AAC3D,aAAO,CAACrW,IAAI,CAACM,GAAL,CAAS,IAAI0G,cAAb,CAAD,GAAgCqP,cAAvC;AACD;AAtBH;AAAA;AAAA,WAwBE,gBAAOhR,OAAP,EAAmC;AACjC,UAAMiN,GAAG,GAAG,KAAKmD,MAAL,CAAY,CAAZ,EAAenD,GAA3B;AACA,UAAMD,GAAG,GAAG,KAAKoD,MAAL,CAAY,CAAZ,EAAepD,GAA3B;AACA,UAAME,GAAG,GAAG,KAAKkD,MAAL,CAAY,CAAZ,EAAelD,GAA3B;AACA,UAAMf,EAAE,GAAG,KAAKiE,MAAL,CAAY,CAAZ,EAAejE,EAA1B;AACA,UAAMrO,CAAC,GAAG,KAAKsS,MAAL,CAAY,CAAZ,EAAetS,CAAzB;AACA,UAAM6D,cAAc,GAAG3B,OAAO,CAACiR,iBAAR,EAAvB;AACA,UAAMnO,OAAO,GAAG,EAAhB;AACA,UAAMoO,WAAW,GAAGlR,OAAO,CAACsC,cAAR,EAApB;AACA,UAAM6O,gBAAgB,GAAGD,WAAW,CAAC,IAAD,CAApC;AACA,UAAM5P,KAAK,GAAGtB,OAAO,CAACoR,QAAR,EAAd;AAEA,UAAIpT,CAAC,GAAG,IAAIlE,gDAAJ,CAAW,EAAX,EAAe,CAAf,EAAkByI,QAAlB,EAAR;AACA,UAAIqI,KAAK,GAAG,IAAI9Q,gDAAJ,CAAW,GAAX,EAAgB,CAAhB,EAAmByI,QAAnB,EAAZ;AAEA,UAAI8O,GAAG,GAAG,CAAC,CAAX;AACA,UAAIC,OAAO,GAAG,CAAd;;AAEA,aAAOD,GAAG,IAAIF,gBAAP,IAA2BG,OAAO,IAAI,EAA7C,EAAiD;AAC/C,YAAMzT,CAAC,GAAGmP,GAAG,CAACtQ,GAAJ,CAAQsB,CAAR,EAAWxC,GAAX,CAAeyR,GAAG,CAACvQ,GAAJ,CAAQkO,KAAR,CAAf,EAA+BpP,GAA/B,CAAmCsC,CAAnC,EAAsC8N,IAAtC,EAAV;AACA,YAAMpC,CAAC,GAAG0D,GAAG,CAACxQ,GAAJ,CAAQmB,CAAR,EAAWrC,GAAX,CAAe2Q,EAAf,CAAV;AACA,YAAMlO,CAAC,GAAGuL,CAAC,CAAC4C,OAAF,EAAV;AACAiF,QAAAA,GAAG,GAAGH,WAAW,CAAC5P,KAAK,CAACrD,CAAC,CAACsT,gBAAF,CAAmB,CAAnB,CAAD,CAAN,CAAjB;AAEAzO,QAAAA,OAAO,CAAC9B,IAAR,CAAaqQ,GAAb;AAEArT,QAAAA,CAAC,GAAG,IAAIlE,gDAAJ,CAAW,EAAX,EAAe,CAAf,EAAkByI,QAAlB,EAAJ;AACAvE,QAAAA,CAAC,CAAC5D,IAAF,CAAO6D,CAAC,CAACsT,gBAAF,CAAmB,CAAnB,CAAP,EAA8B,CAA9B,IAAmC,CAAnC;AAEA3G,QAAAA,KAAK,GAAG/M,CAAR;AAEAyT,QAAAA,OAAO,IAAI,CAAX;AACD;;AAED,aAAOxO,OAAO,CACXjB,GADI,CACA,UAACjF,CAAD,EAAO;AACV,eAAO0E,KAAK,CAAC1E,CAAD,CAAZ;AACD,OAHI,EAIJ4U,IAJI,CAIC,EAJD,CAAP;AAKD;AA/DH;AAAA;AAAA,WAiEE,iBAAQtP,CAAR,EAAmBC,CAAnB,EAA8BsP,EAA9B,EAAiF;AAAA,UAAvC9P,cAAuC,uEAAd,EAAc;AAC/E,UAAM3D,CAAC,GAAG,CAAC,IAAD,CAAV;AACA,UAAMH,CAAC,GAAG,CAAC4T,EAAD,CAAV;AACA,UAAMC,IAAI,GAAG,CAAC,IAAD,CAAb;AACA,UAAIC,IAAI,GAAG,CAAX;;AACA,WAAK,IAAI/O,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIV,CAAC,CAAChI,IAAvB,EAA6B0I,CAAC,IAAI,CAAlC,EAAqC;AACnC5E,QAAAA,CAAC,CAAC4E,CAAD,CAAD,GAAO,IAAI9I,gDAAJ,CAAW,EAAX,EAAe,CAAf,EAAkByI,QAAlB,EAAP;AACAvE,QAAAA,CAAC,CAAC4E,CAAD,CAAD,CAAKxI,IAAL,CAAU8H,CAAC,CAAC0P,gBAAF,CAAmBhP,CAAC,GAAG,CAAvB,CAAV,EAAqC,CAArC,IAA0C,CAA1C;;AACA,oCAAoB,KAAKwN,MAAL,CAAY,CAAZ,EAAeC,OAAf,CAAuBxS,CAAC,CAAC+E,CAAC,GAAG,CAAL,CAAxB,EAAiC5E,CAAC,CAAC4E,CAAD,CAAlC,CAApB;AAAA;AAAA,YAAOiP,EAAP;AAAA,YAAWC,KAAX;;AACAjU,QAAAA,CAAC,CAAC+E,CAAD,CAAD,GAAOiP,EAAP;AACAH,QAAAA,IAAI,CAAC9O,CAAD,CAAJ,GAAUkP,KAAK,CAACtH,MAAN,CAAa,IAAb,CAAV;AACAmH,QAAAA,IAAI,IAAIhX,IAAI,CAACM,GAAL,CAASyW,IAAI,CAAC9O,CAAD,CAAJ,CAAQxI,IAAR,CAAawI,CAAC,GAAG,CAAjB,EAAoB,CAApB,CAAT,CAAR;AACD;;AACD,WAAKwN,MAAL,CAAY,CAAZ,EAAenL,CAAf,GAAmBpH,CAAnB;AACA,WAAKuS,MAAL,CAAY,CAAZ,EAAelO,CAAf,GAAmBlE,CAAnB;AACA,WAAKoS,MAAL,CAAY,CAAZ,EAAejO,CAAf,GAAmBuP,IAAnB;AACA,aAAO,CAACC,IAAD,CAAP;AACD;AAlFH;AAAA;AAAA,WAoFE,kBAASzP,CAAT,EAAoBC,CAApB,EAAqC;AACnC,UAAMtE,CAAC,GAAG,KAAKuS,MAAL,CAAY,CAAZ,EAAenL,CAAzB;AACA,UAAMjH,CAAC,GAAG,KAAKoS,MAAL,CAAY,CAAZ,EAAelO,CAAzB;AACA,UAAMwP,IAAI,GAAG,KAAKtB,MAAL,CAAY,CAAZ,EAAejO,CAA5B;AAEA,WAAKiO,MAAL,CAAY,CAAZ,EAAejD,IAAf,GAAsB,IAAIrT,gDAAJ,CAAW,KAAKsW,MAAL,CAAY,CAAZ,EAAepD,GAAf,CAAmB9S,IAA9B,EAAoC,KAAKkW,MAAL,CAAY,CAAZ,EAAepD,GAAf,CAAmB7S,IAAvD,EAA6DoI,QAA7D,EAAtB;AACA,WAAK6N,MAAL,CAAY,CAAZ,EAAehD,IAAf,GAAsB,IAAItT,gDAAJ,CAAW,KAAKsW,MAAL,CAAY,CAAZ,EAAenD,GAAf,CAAmB/S,IAA9B,EAAoC,KAAKkW,MAAL,CAAY,CAAZ,EAAenD,GAAf,CAAmB9S,IAAvD,EAA6DoI,QAA7D,EAAtB;AACA,WAAK6N,MAAL,CAAY,CAAZ,EAAe/C,IAAf,GAAsB,IAAIvT,gDAAJ,CAAW,KAAKsW,MAAL,CAAY,CAAZ,EAAelD,GAAf,CAAmBhT,IAA9B,EAAoC,KAAKkW,MAAL,CAAY,CAAZ,EAAelD,GAAf,CAAmB/S,IAAvD,EAA6DoI,QAA7D,EAAtB;AACA,WAAK6N,MAAL,CAAY,CAAZ,EAAe1K,EAAf,GAAoB,IAAI5L,gDAAJ,CAAW,KAAKsW,MAAL,CAAY,CAAZ,EAAetS,CAAf,CAAiB5D,IAA5B,EAAkC,KAAKkW,MAAL,CAAY,CAAZ,EAAetS,CAAf,CAAiB3D,IAAnD,EAAyDoI,QAAzD,EAApB;AACA,WAAK6N,MAAL,CAAY,CAAZ,EAAe9C,GAAf,GAAqB,IAAIxT,gDAAJ,CAAW,KAAKsW,MAAL,CAAY,CAAZ,EAAejE,EAAf,CAAkBjS,IAA7B,EAAmC,KAAKkW,MAAL,CAAY,CAAZ,EAAejE,EAAf,CAAkBhS,IAArD,EAA2DoI,QAA3D,EAArB;;AAEA,WAAK,IAAIK,CAAC,GAAGV,CAAC,CAAChI,IAAF,GAAS,CAAtB,EAAyB0I,CAAC,IAAI,CAA9B,EAAiCA,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAM2K,EAAE,GAAGzT,qDAAA,CAAY4X,IAAI,CAAC9O,CAAD,CAAJ,CAAQxI,IAApB,CAAX;AACA,aAAKgW,MAAL,CAAY,CAAZ,EAAe2B,QAAf,CAAwBxE,EAAxB,EAA4BvP,CAAC,CAAC4E,CAAD,CAA7B,EAAkC/E,CAAC,CAAC+E,CAAD,CAAnC,EAAwC/E,CAAC,CAAC+E,CAAC,GAAG,CAAL,CAAzC;AACD;AACF;AAnGH;AAAA;AAAA,WAqGE,kBAASV,CAAT,EAAoBC,CAApB,EAA+ByI,KAA/B,EAA8CoH,YAA9C,EAAsF;AACpF,0BAAe,KAAK3B,OAAL,CAAanO,CAAb,EAAgBC,CAAhB,EAAmByI,KAAnB,CAAf;AAAA;AAAA,UAAO+G,IAAP;;AACA,WAAKI,QAAL,CAAc7P,CAAd,EAAiBC,CAAjB;AAEA,WAAKiO,MAAL,CAAY,CAAZ,EAAepD,GAAf,GAAqB,KAAKoD,MAAL,CAAY,CAAZ,EAAepD,GAAf,CAAmBxR,GAAnB,CAAuB,KAAK4U,MAAL,CAAY,CAAZ,EAAejD,IAAf,CAAoBpR,QAApB,CAA6B,CAACiW,YAA9B,CAAvB,CAArB;AACA,WAAK5B,MAAL,CAAY,CAAZ,EAAenD,GAAf,GAAqB,KAAKmD,MAAL,CAAY,CAAZ,EAAenD,GAAf,CAAmBzR,GAAnB,CAAuB,KAAK4U,MAAL,CAAY,CAAZ,EAAehD,IAAf,CAAoBrR,QAApB,CAA6B,CAACiW,YAA9B,CAAvB,CAArB;AACA,WAAK5B,MAAL,CAAY,CAAZ,EAAelD,GAAf,GAAqB,KAAKkD,MAAL,CAAY,CAAZ,EAAelD,GAAf,CAAmB1R,GAAnB,CAAuB,KAAK4U,MAAL,CAAY,CAAZ,EAAe/C,IAAf,CAAoBtR,QAApB,CAA6B,CAACiW,YAA9B,CAAvB,CAArB;AACA,WAAK5B,MAAL,CAAY,CAAZ,EAAetS,CAAf,GAAmB,KAAKsS,MAAL,CAAY,CAAZ,EAAetS,CAAf,CAAiBtC,GAAjB,CAAqB,KAAK4U,MAAL,CAAY,CAAZ,EAAe1K,EAAf,CAAkB3J,QAAlB,CAA2B,CAACiW,YAA5B,CAArB,CAAnB;AACA,WAAK5B,MAAL,CAAY,CAAZ,EAAejE,EAAf,GAAoB,KAAKiE,MAAL,CAAY,CAAZ,EAAejE,EAAf,CAAkB3Q,GAAlB,CAAsB,KAAK4U,MAAL,CAAY,CAAZ,EAAe9C,GAAf,CAAmBvR,QAAnB,CAA4B,CAACiW,YAA7B,CAAtB,CAApB;AAEA,aAAO,CAACL,IAAD,EAAO,KAAKvB,MAAL,CAAY,CAAZ,EAAenL,CAAf,CAAiB/C,CAAC,CAAChI,IAAF,GAAS,CAA1B,CAAP,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3IA;;AAAA;AAAA;;;;;;;;;;;;;;;;;ACLA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;IAEe+X;AAKb,kCAAYtL,SAAZ,EAAkC;AAAA;;AAAA,wCAJO,IAIP;;AAAA,uCAHG,IAGH;;AAAA,qCAFE,IAEF;;AAChC,SAAKwJ,UAAL,GAAkBxJ,SAAlB;AACA,SAAKuL,OAAL,GAAe,IAAIhC,6CAAJ,CAAYvJ,SAAZ,CAAf;AACD;;;;WAED,qBAAYwL,UAAZ,EAAyG;AAAA,UAAzE9R,QAAyE,uEAA9B,IAA8B;AACvG;AACA,UAAM0G,KAAa,GAAG,IAAIoL,UAAJ,EAAtB;;AAEA,UAAI,OAAO9R,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,QAAAA,QAAQ,CAAC0G,KAAD,CAAR;AACD;;AAED,UAAI,KAAKqL,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,aAAKC,oBAAL,CAA0BtL,KAA1B;AACD,OAFD,MAEO;AACL;AACAA,QAAAA,KAAK,CAACuL,UAAN,CAAiB,KAAKF,SAAtB;AACD;;AAEDrL,MAAAA,KAAK,CAACwL,SAAN;AACAxL,MAAAA,KAAK,CAACyL,kBAAN,CAAyB9K,wGAAA,CAA8B,KAAK0K,SAAnC,EAA8CrL,KAA9C,CAAzB;AAEA,WAAKmL,OAAL,CAAaQ,QAAb,CAAsB3L,KAAtB;AACA,WAAKqL,SAAL,GAAiBrL,KAAjB;AAEA,aAAO,IAAP;AACD;;;WAED,sBAA6B;AAC3B,aAAO,KAAKmL,OAAZ;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCH;AAGA;AACA;AACA;;IAGMS;;;;;;;;;;;;;WACJ,8BAAqB5L,KAArB,EAA0C;AACxCA,MAAAA,KAAK,CAACb,QAAN,CAAe,KAAKiK,UAAL,CAAgB,CAAhB,CAAf;AACD;;;WAED,kBAAgByC,QAAhB,EAAoD;AAClD,aAAO,IAAI1P,OAAJ,CAAY,UAACC,OAAD,EAAUgB,MAAV,EAAqB;AACtCF,QAAAA,wCAAA,CAAY2O,QAAZ,EAAsB,UAACvO,GAAD,EAAMjK,IAAN,EAAe;AACnC,cAAIiK,GAAJ,EAAS;AACPF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACD;;AACD,cAAMwO,IAAI,GAAGlC,IAAI,CAACpN,KAAL,CAAWnJ,IAAI,CAACmK,QAAL,EAAX,CAAb;AAEA,cAAMuO,OAAO,GAAG,IAAIH,gBAAJ,CAAqBE,IAAI,CAAC,YAAD,CAAzB,CAAhB;AAEAA,UAAAA,IAAI,CAAC,QAAD,CAAJ,CAAe3R,OAAf,CAAuB,UAAC6R,SAAD,EAA8B;AACnD,gBAAIZ,UAAU,GAAG,IAAjB;;AAEA,gBAAIY,SAAS,CAAC,MAAD,CAAT,KAAsB,UAA1B,EAAsC;AACpCZ,cAAAA,UAAU,GAAG3F,kDAAb;AACD,aAFD,MAEO,IAAIuG,SAAS,CAAC,MAAD,CAAT,KAAsB,SAA1B,EAAqC;AAC1CZ,cAAAA,UAAU,GAAGtE,iDAAb;AACD,aAFM,MAEA,IAAIkF,SAAS,CAAC,MAAD,CAAT,KAAsB,MAA1B,EAAkC;AACvCZ,cAAAA,UAAU,GAAGxE,8CAAb;AACD,aAFM,MAEA,IAAIoF,SAAS,CAAC,MAAD,CAAT,KAAsB,UAA1B,EAAsC;AAC3CZ,cAAAA,UAAU,GAAGrE,kDAAb;AACD,aAFM,MAEA,IAAIiF,SAAS,CAAC,MAAD,CAAT,KAAsB,MAA1B,EAAkC;AACvCZ,cAAAA,UAAU,GAAGnE,8CAAb;AACD;;AAED8E,YAAAA,OAAO,CAACE,WAAR,CAAoBb,UAApB,EAAgC,UAACpL,KAAD,EAAW;AACzC;AACAA,cAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,aAHD;AAID,WAnBD;AAqBA,cAAMb,OAAO,GAAGY,OAAO,CAACG,UAAR,EAAhB;AAEAf,UAAAA,OAAO,CAACgB,SAAR,GAAoBhS,OAApB,CAA4B,UAAC6F,KAAD,EAAQnK,CAAR,EAAc;AACxCmK,YAAAA,KAAK,CAAC/B,CAAN,GAAU,IAAIlL,gDAAJ,CACR+Y,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,EAAkC0C,MAD1B,EAERuT,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,EAAkC,CAAlC,EAAqC0C,MAF7B,EAGRuT,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,CAHQ,CAAV;AAKAmK,YAAAA,KAAK,CAACjJ,CAAN,GAAU,IAAIhE,gDAAJ,CACR+Y,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,EAAkC0C,MAD1B,EAERuT,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,EAAkC,CAAlC,EAAqC0C,MAF7B,EAGRuT,IAAI,CAAC,QAAD,CAAJ,CAAejW,CAAf,EAAkB,SAAlB,EAA6B,GAA7B,CAHQ,CAAV;AAKD,WAXD;AAaAuG,UAAAA,OAAO,CAAC+O,OAAD,CAAP;AACD,SA9CD;AA+CD,OAhDM,CAAP;AAiDD;;;;EAvD4BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR/B;AAGA;AACA;AACA;AACA;;IAGMkB;;;;;;;;;;;;;WACJ,8BAAqBpM,KAArB,EAA0C;AACxC,UAAI,KAAKoJ,UAAT,EAAqB;AACnB;AACApJ,QAAAA,KAAK,CAACL,OAAN,CAAc,KAAKyJ,UAAnB;AACD;AACF;;;WAED,kBAAgByC,QAAhB,EAAoD;AAClD,aAAO,IAAI1P,OAAJ,CAAY,UAACC,OAAD,EAAUgB,MAAV,EAAqB;AACtCF,QAAAA,wCAAA,CAAY2O,QAAZ,EAAsB,UAACvO,GAAD,EAAMjK,IAAN,EAAe;AACnC,cAAIiK,GAAJ,EAAS;AACPF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACD;;AACD,cAAMwO,IAAI,GAAGlC,IAAI,CAACpN,KAAL,CAAWnJ,IAAI,CAACmK,QAAL,EAAX,CAAb;AAEA,cAAMuO,OAAO,GAAG,IAAIK,gBAAJ,CAAqBN,IAAI,CAAC,MAAD,CAAzB,CAAhB;AAEAA,UAAAA,IAAI,CAAC,QAAD,CAAJ,CAAe3R,OAAf,CAAuB,UAAC6R,SAAD,EAA8B;AACnD,gBAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,UAA1B,EAAsC;AACpC;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBxG,kDAApB,EAAmC,UAACzF,KAAD,EAAW;AAC5C;AACAA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,eAHD;AAID,aAND,MAMO,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,SAA1B,EAAqC;AAC1C;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBnF,iDAApB,EAAkC,UAAC9G,KAAD,EAAW;AAC3C;AACAA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,eAHD;AAID,aANM,MAMA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,MAA1B,EAAkC;AACvC;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBrF,8CAApB,EAA+B,UAAC5G,KAAD,EAAW;AACxC;AACAA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,eAHD;AAID,aANM,MAMA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,UAA1B,EAAsC;AAC3C;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBlF,kDAApB,EAAmC,UAAC/G,KAAD,EAAW;AAC5C;AACAA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,eAHD;AAID,aANM,MAMA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,MAA1B,EAAkC;AACvC;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBhF,8CAApB,EAA+B,UAACjH,KAAD,EAAW;AACxC;AACAA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACD,eAHD;AAID,aANM,MAMA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,MAA1B,EAAkC;AACvC;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoB9I,8CAApB,EAA+B,UAACnD,KAAD,EAAsB;AACnDA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACAhM,gBAAAA,KAAK,CAACqM,aAAN,CAAoBL,SAAS,CAAC,YAAD,CAA7B;AACAhM,gBAAAA,KAAK,CAACsM,SAAN,CAAgBN,SAAS,CAAC,QAAD,CAAzB;AACAhM,gBAAAA,KAAK,CAACuM,aAAN,CAAoBP,SAAS,CAAC,YAAD,CAA7B;AACAhM,gBAAAA,KAAK,CAACwM,UAAN,CAAiBR,SAAS,CAAC,SAAD,CAA1B;AACD,eAND;AAOD,aATM,MASA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,SAA1B,EAAqC;AAC1C;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBrG,iDAApB,EAAkC,UAAC5F,KAAD,EAAyB;AACzDA,gBAAAA,KAAK,CAACL,OAAN,CAAcqM,SAAS,CAAC,MAAD,CAAvB;AACAhM,gBAAAA,KAAK,CAACqM,aAAN,CAAoBL,SAAS,CAAC,YAAD,CAA7B;AACAhM,gBAAAA,KAAK,CAACsM,SAAN,CAAgBN,SAAS,CAAC,QAAD,CAAzB;AACD,eAJD;AAKD,aAPM,MAOA,IAAIA,SAAS,CAAC,MAAD,CAAT,KAAsB,gBAA1B,EAA4C;AACjD;AACAD,cAAAA,OAAO,CAACE,WAAR,CAAoBrG,iDAApB;AACD;AACF,WAnDD;AAqDA,cAAMuF,OAAO,GAAGY,OAAO,CAACG,UAAR,EAAhB;;AAEA,cAAIf,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACgB,SAAR,GAAoBhS,OAApB,CAA4B,UAAC6F,KAAD,EAAQnK,CAAR,EAAc;AACxCmK,cAAAA,KAAK,CAAC/B,CAAN,GAAU6N,IAAI,CAAC,QAAD,CAAJ,CAAe,GAAf,CAAV;AACA9L,cAAAA,KAAK,CAACjJ,CAAN,GAAU+U,IAAI,CAAC,QAAD,CAAJ,CAAe,GAAf,CAAV;AACD,aAHD;AAKA1P,YAAAA,OAAO,CAAC+O,OAAD,CAAP;AACD;AACF,SAxED;AAyED,OA1EM,CAAP;AA2ED;;;;EApF4BD;;;;;;;;;;;;;;;;;;;;;ACT/B;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACaO,IAAeuB,eAAtB;AAUE,2BAAYtB,OAAZ,EAA8BuB,SAA9B,EAA4D;AAAA;;AAAA,qCATlC,IASkC;;AAAA,uCARtB,IAQsB;;AAAA,4CAP3C,IAO2C;;AAAA,wCAN/C,IAM+C;;AAAA,0CAL7C,KAK6C;;AAAA,qCAJlD,IAIkD;;AAAA,yCAH9C,CAG8C;;AAAA,0CAF7C,UAACrZ,IAAD;AAAA,aAAwCsZ,SAAxC;AAAA,KAE6C;;AAC1D,SAAKxB,OAAL,GAAeA,OAAf;AACA,SAAKuB,SAAL,GAAiBA,SAAjB;AACD;;AAbH;AAAA;AAAA,WAiBE,2BAAkBxM,cAAlB,EAA2D;AACzD,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;AApBH;AAAA;AAAA,WAsBE,uBAAc0M,UAAd,EAAmD;AACjD,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACD;AAzBH;AAAA;AAAA,WA2BE,yBAAgB3B,YAAhB,EAAuD;AACrD,WAAKA,YAAL,GAAoBA,YAApB;AACA,aAAO,IAAP;AACD;AA9BH;AAAA;AAAA,WAgCE,oBAAW4B,OAAX,EAA8C;AAC5C,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACD;AAnCH;AAAA;AAAA,WAqCE,wBAAeC,WAAf,EAAqD;AACnD,WAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAO,IAAP;AACD;AAxCH;AAAA;AAAA,WA0CE,yBAAgBC,YAAhB,EAAuF;AACrF,WAAKA,YAAL,GAAoBA,YAApB;AACA,aAAO,IAAP;AACD;AA7CH;AAAA;AAAA,WA+CE,cAAK5R,CAAL,EAAgBC,CAAhB,EAAuC;AACrC,UAAM/C,gBAAgB,GAAG8C,CAAC,CAAC/H,IAA3B;AAEA,UAAI4Z,QAAQ,GAAG,CAAf;AACA,UAAIzX,OAAO,GAAG,CAAd;AAEA,WAAK4V,OAAL,CAAagB,SAAb,GAAyBhS,OAAzB,CAAiC,UAAC6F,KAAD,EAAW;AAC1CzK,QAAAA,OAAO,IAAIyK,KAAK,CAACzK,OAAN,EAAX;AACD,OAFD;AAIA,UAAMtB,WAAW,GAAG,KAAKkX,OAAL,CAAa7B,OAAb,CAAqBnO,CAArB,CAApB;AACA,UAAM8R,aAAa,GAAG7R,CAAtB;AAEA;AACJ;AACA;AACA;;AACI,UAAM2O,KAAK,GAAG3O,CAAC,CAACpG,QAAF,CAAWf,WAAW,CAACC,GAAZ,EAAX,EAA8BU,GAA9B,EAAd;AACA,UAAMsY,IAAI,GAAI,CAAC,CAAD,GAAK7U,gBAAN,GAA0B0R,KAA1B,GAAkC,KAAK7J,cAAL,IAAuB3K,OAAO,IAAI,IAAI4F,CAAC,CAAC/H,IAAV,CAA9B,CAA/C;;AAEA,WAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGU,WAAW,CAACb,IAApC,EAA0CG,GAAG,IAAI,CAAjD,EAAoD;AAClD,YAAM4Z,MAAM,GAAGlZ,WAAW,CAACuW,gBAAZ,CAA6BjX,GAA7B,CAAf;AACA,YAAM6Z,MAAM,GAAGH,aAAa,CAACzC,gBAAd,CAA+BjX,GAA/B,CAAf;;AAEA,YAAI4Z,MAAM,KAAKC,MAAf,EAAuB;AACrBJ,UAAAA,QAAQ;AACT;AACF;;AAED,aAAO;AACLE,QAAAA,IAAI,EAAJA,IADK;AAELF,QAAAA,QAAQ,EAAGA,QAAQ,GAAG3U,gBAAZ,GAAgC;AAFrC,OAAP;AAID;AAhFH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AAEO,IAAMgV,gBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,gEACc,GADd;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,sBAAazU,SAAb,EAAkD;AAChD,WAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAO,IAAP;AACD;AANH;AAAA;AAAA,WAQE,eAAM0U,YAAN,EAA6BC,aAA7B,EAAuE;AAAA;;AACrE,UAAMlV,gBAAgB,GAAGiV,YAAY,CAACjU,mBAAb,EAAzB;AAEA,UAAIwC,CAAC,GAAG,CAAR;AAEA,WAAK6Q,SAAL,CAAec,YAAf,CAA4B,KAAK5U,SAAjC;AACA,WAAK8T,SAAL,CAAee,eAAf,CAA+B,KAAKxC,YAApC;;AAEA,WAAK,IAAIpV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK+W,UAAzB,EAAqC/W,CAAC,IAAI,CAA1C,EAA6C;AAC3C,YAAM6X,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,YAAMC,kBAAkB,GAAG,IAAIF,IAAJ,GAAWC,OAAX,EAA3B;;AAEA,aAAK,IAAIE,KAAK,GAAG,CAAZ,EAAenV,MAAM,GAAG,CAA7B,EAAgCmV,KAAK,GAAGzV,gBAAxC,EAA0DyV,KAAK,IAAI,KAAKlV,SAAd,EAAyBD,MAAM,IAAI,KAAKC,SAAlG,EAA6G;AAC3G,cAAMmV,mBAAmB,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAA5B;AACA,cAAM5O,KAAK,GAAGsO,YAAY,CAACU,QAAb,CAAsBrV,MAAtB,EAA8B,KAAKC,SAAnC,CAAd;AACA,cAAM5E,MAAM,GAAGuZ,aAAa,CAACS,QAAd,CAAuBrV,MAAvB,EAA+B,KAAKC,SAApC,CAAf;AACA,cAAM3E,WAAW,GAAG,KAAKkX,OAAL,CAAa7B,OAAb,CAAqBtK,KAAK,CAAC3L,IAA3B,CAApB;AAEA,eAAK8X,OAAL,CAAaH,QAAb,CAAsBhM,KAAK,CAAC3L,IAA5B,EAAkCW,MAAM,CAACX,IAAzC,EAA+CY,WAA/C,EAA4D,KAAKiM,cAAjE;AAEA,eAAKwM,SAAL,CAAeuB,IAAf,CAAoB,EAAEpS,CAAtB;AAEA,eAAKsP,OAAL,CAAagB,SAAb,GAAyBhS,OAAzB,CAAiC,UAAC6F,KAAD,EAAW;AAC1C,kBAAI,CAAC0M,SAAL,CAAewB,QAAf,CAAwBlO,KAAxB;AACD,WAFD;;AAIA,cAAI,KAAK6M,OAAT,EAAkB;AAChB,gBAAMK,IAAI,GAAG,KAAKA,IAAL,CAAUlO,KAAK,CAAC3L,IAAhB,EAAsBW,MAAM,CAACX,IAA7B,CAAb;AACA,gBAAM8a,gBAAgB,GAAG,IAAIR,IAAJ,GAAWC,OAAX,EAAzB;AACAtN,YAAAA,OAAO,CAACpM,GAAR,kBACYyE,MADZ,gBACwBN,gBADxB,4BAEI8V,gBAAgB,GAAGJ,mBAFvB,mCAG2B/E,iDAAK,CAAC,CAACmF,gBAAgB,GAAGN,kBAApB,IAA0C,IAA3C,EAAiD,CAAjD,CAHhC,wBAGiG7E,iDAAK,CAClGkE,IAAI,CAACA,IAD6F,EAElG,CAFkG,CAHtG,qBAMcA,IAAI,CAACF,QANnB;AAQD;AACF;;AAED,YAAI,KAAKH,OAAT,EAAkB;AAChB,cAAI,CAAChX,CAAC,GAAG,CAAL,IAAU,KAAKiX,WAAf,KAA+B,CAAnC,EAAsC;AACpC,gBAAMsB,OAAO,GAAG,IAAIT,IAAJ,GAAWC,OAAX,EAAhB;AACA,gBAAMS,aAAa,GAAG,KAAKnB,IAAL,CAAUI,YAAY,CAACja,IAAvB,EAA6Bka,aAAa,CAACla,IAA3C,CAAtB;AAEAiN,YAAAA,OAAO,CAACpM,GAAR,sBACgB2B,CAAC,GAAG,CADpB,sBACiCmT,iDAAK,CAACqF,aAAa,CAACnB,IAAf,EAAqB,CAArB,CADtC,0BAEImB,aAAa,CAACrB,QAFlB,uBAGe,CAACoB,OAAO,GAAGV,SAAX,IAAwB,IAHvC;AAKD;AACF;;AAED,aAAKX,YAAL,CAAkB;AAChBuB,UAAAA,SAAS,EAAEzY;AADK,SAAlB;AAGD;;AAED,aAAO,IAAP;AACD;AAnEH;;AAAA;AAAA,EAAsC4W,6DAAtC;;;;;;;;;;;;;;;;;;;;;;ACFO,IAAe8B,iBAAtB;AAAA;AAAA;;AAAA,uCACwB,CADxB;;AAAA,+BAEgB,CAFhB;;AAAA,0CAG2B,CAH3B;AAAA;;AAAA;AAAA;AAAA,WAKE,sBAAa3V,SAAb,EAAmD;AACjD,WAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAO,IAAP;AACD;AARH;AAAA;AAAA,WAUE,cAAKiD,CAAL,EAAmC;AACjC,WAAKA,CAAL,GAASA,CAAT;AACA,aAAO,IAAP;AACD;AAbH;AAAA;AAAA,WAeE,yBAAgBoP,YAAhB,EAAyD;AACvD,WAAKA,YAAL,GAAoBA,YAApB;AACA,aAAO,IAAP;AACD;AAlBH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAGO,IAAMuD,gBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,kBAASxO,KAAT,EAA8B;AAC5B,WAAKyO,OAAL,CAAazO,KAAb,EAAoB,KAAKiL,YAAzB;AACD;AAHH;AAAA;AAAA,WAKE,iBAAQjL,KAAR,EAAuBiL,YAAvB,EAAmD;AACjDjL,MAAAA,KAAK,CAACtB,EAAN,GAAWsB,KAAK,CAACtB,EAAN,CAASjK,GAAT,CAAauL,KAAK,CAAC5B,EAAN,CAAS5I,GAAT,CAAa,CAAb,CAAb,CAAX;AACAwK,MAAAA,KAAK,CAAC/B,CAAN,GAAU+B,KAAK,CAAC/B,CAAN,CAAQnI,QAAR,CAAiBkK,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkBiW,YAAlB,EAAgC7K,MAAhC,CAAuCJ,KAAK,CAACtB,EAAN,CAASjJ,IAAT,GAAgBhB,GAAhB,CAAoB,IAApB,CAAvC,EAAkEO,QAAlE,CAA2EgL,KAAK,CAAC5B,EAAjF,CAAjB,CAAV;AAEA4B,MAAAA,KAAK,CAACrB,EAAN,GAAWqB,KAAK,CAACrB,EAAN,CAASlK,GAAT,CAAauL,KAAK,CAAC3B,EAAN,CAAS7I,GAAT,CAAa,CAAb,CAAb,CAAX;AACAwK,MAAAA,KAAK,CAACjJ,CAAN,GAAUiJ,KAAK,CAACjJ,CAAN,CAAQjB,QAAR,CAAiBkK,KAAK,CAACrB,EAAN,CAAS3J,QAAT,CAAkBiW,YAAlB,EAAgC7K,MAAhC,CAAuCJ,KAAK,CAACrB,EAAN,CAASlJ,IAAT,GAAgBhB,GAAhB,CAAoB,IAApB,CAAvC,EAAkEO,QAAlE,CAA2EgL,KAAK,CAAC3B,EAAjF,CAAjB,CAAV;AACD;AAXH;;AAAA;AAAA,EAAsCkQ,iEAAtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAKO,IAAMG,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACoB,GADpB;;AAAA,4DAEoB,KAFpB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,kBAASC,KAAT,EAAuC;AACrC,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD;AAPH;AAAA;AAAA,WASE,kBAASC,KAAT,EAAuC;AACrC,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD;AAZH;AAAA;AAAA,WAcE,kBAAS5O,KAAT,EAA8B;AAC5B,WAAK6O,IAAL,CAAU7O,KAAV,EAAiB,KAAKiL,YAAtB,EAAoC,KAAKpP,CAAzC;AACD;AAhBH;AAAA;AAAA,WAkBE,cAAKmE,KAAL,EAAoBiL,YAApB,EAA0CpP,CAA1C,EAA2D;AACzDmE,MAAAA,KAAK,CAAC1B,EAAN,GAAW0B,KAAK,CAAC1B,EAAN,CAAStJ,QAAT,CAAkB,KAAK2Z,KAAvB,EAA8Bla,GAA9B,CAAkCuL,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkB,IAAI,KAAK2Z,KAA3B,CAAlC,CAAX;AACA3O,MAAAA,KAAK,CAACzB,EAAN,GAAWyB,KAAK,CAACzB,EAAN,CAASvJ,QAAT,CAAkB,KAAK2Z,KAAvB,EAA8Bla,GAA9B,CAAkCuL,KAAK,CAAC3B,EAAN,CAASrJ,QAAT,CAAkB,IAAI,KAAK2Z,KAA3B,CAAlC,CAAX;AAEA3O,MAAAA,KAAK,CAACxB,EAAN,GAAWwB,KAAK,CAACxB,EAAN,CAASxJ,QAAT,CAAkB,KAAK4Z,KAAvB,EAA8Bna,GAA9B,CAAkCuL,KAAK,CAAC5B,EAAN,CAAS5I,GAAT,CAAa,CAAb,EAAgBR,QAAhB,CAAyB,IAAI,KAAK4Z,KAAlC,CAAlC,CAAX;AACA5O,MAAAA,KAAK,CAACvB,EAAN,GAAWuB,KAAK,CAACvB,EAAN,CAASzJ,QAAT,CAAkB,KAAK4Z,KAAvB,EAA8Bna,GAA9B,CAAkCuL,KAAK,CAAC3B,EAAN,CAAS7I,GAAT,CAAa,CAAb,EAAgBR,QAAhB,CAAyB,IAAI,KAAK4Z,KAAlC,CAAlC,CAAX;AAEA,UAAME,WAAW,GAAG9O,KAAK,CAAC1B,EAAN,CAAS8B,MAAT,CAAgB,IAAIxM,IAAI,CAAC4B,GAAL,CAAS,KAAKmZ,KAAd,EAAqB,CAArB,CAApB,CAApB;AACA,UAAMI,WAAW,GAAG/O,KAAK,CAACzB,EAAN,CAAS6B,MAAT,CAAgB,IAAIxM,IAAI,CAAC4B,GAAL,CAAS,KAAKmZ,KAAd,EAAqB,CAArB,CAApB,CAApB;AAEA,UAAMK,WAAW,GAAGhP,KAAK,CAACxB,EAAN,CAAS4B,MAAT,CAAgB,IAAIxM,IAAI,CAAC4B,GAAL,CAAS,KAAKoZ,KAAd,EAAqB,CAArB,CAApB,CAApB;AACA,UAAMK,WAAW,GAAGjP,KAAK,CAACvB,EAAN,CAAS2B,MAAT,CAAgB,IAAIxM,IAAI,CAAC4B,GAAL,CAAS,KAAKoZ,KAAd,EAAqB,CAArB,CAApB,CAApB;AAEA5O,MAAAA,KAAK,CAAC/B,CAAN,GAAU+B,KAAK,CAAC/B,CAAN,CAAQnI,QAAR,CAAiBgZ,WAAW,CAAC9Z,QAAZ,CAAqBiW,YAArB,EAAmC7K,MAAnC,CAA0C4O,WAAW,CAACvZ,IAAZ,GAAmBhB,GAAnB,CAAuB,IAAvB,CAA1C,CAAjB,CAAV;AACAuL,MAAAA,KAAK,CAACjJ,CAAN,GAAUiJ,KAAK,CAACjJ,CAAN,CAAQjB,QAAR,CAAiBiZ,WAAW,CAAC/Z,QAAZ,CAAqBiW,YAArB,EAAmC7K,MAAnC,CAA0C6O,WAAW,CAACxZ,IAAZ,GAAmBhB,GAAnB,CAAuB,IAAvB,CAA1C,CAAjB,CAAV;AACD;AAjCH;;AAAA;AAAA,EAAmC8Z,iEAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAKO,IAAMW,wBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,kBAASlP,KAAT,EAA8B;AAC5B,WAAKmP,eAAL,CAAqBnP,KAArB,EAA4B,KAAKiL,YAAjC;AACD;AAHH;AAAA;AAAA,WAKE,yBAAgBjL,KAAhB,EAA+BiL,YAA/B,EAA2D;AACzDjL,MAAAA,KAAK,CAAC/B,CAAN,GAAU+B,KAAK,CAAC/B,CAAN,CAAQnI,QAAR,CAAiBkK,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkBiW,YAAlB,CAAjB,CAAV;AACAjL,MAAAA,KAAK,CAACjJ,CAAN,GAAUiJ,KAAK,CAACjJ,CAAN,CAAQjB,QAAR,CAAiBkK,KAAK,CAACjJ,CAAN,CAAQ/B,QAAR,CAAiBiW,YAAjB,CAAjB,CAAV;AACD;AARH;;AAAA;AAAA,EAA8CsD,iEAA9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAGO,IAAMa,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,2DACmB,GADnB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,kBAASpP,KAAT,EAA8B;AAC5B,WAAKqP,QAAL,CAAcrP,KAAd,EAAqB,KAAKiL,YAA1B;AACD;AALH;AAAA;AAAA,WAOE,iBAAQqE,IAAR,EAAyC;AACvC,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACD;AAVH;AAAA;AAAA,WAYE,kBAAStP,KAAT,EAAwBiL,YAAxB,EAAoD;AAClDjL,MAAAA,KAAK,CAAC1B,EAAN,GAAW0B,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkB,KAAKsa,IAAvB,EAA6B7a,GAA7B,CAAiCuL,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkB,IAAI,KAAKsa,IAA3B,CAAjC,CAAX;AACAtP,MAAAA,KAAK,CAACzB,EAAN,GAAWyB,KAAK,CAAC3B,EAAN,CAASrJ,QAAT,CAAkB,KAAKsa,IAAvB,EAA6B7a,GAA7B,CAAiCuL,KAAK,CAAC3B,EAAN,CAASrJ,QAAT,CAAkB,IAAI,KAAKsa,IAA3B,CAAjC,CAAX;AAEAtP,MAAAA,KAAK,CAAC/B,CAAN,GAAU+B,KAAK,CAAC/B,CAAN,CAAQnI,QAAR,CAAiBkK,KAAK,CAAC1B,EAAN,CAAStJ,QAAT,CAAkBiW,YAAlB,CAAjB,CAAV;AACAjL,MAAAA,KAAK,CAACjJ,CAAN,GAAUiJ,KAAK,CAACjJ,CAAN,CAAQjB,QAAR,CAAiBkK,KAAK,CAACzB,EAAN,CAASvJ,QAAT,CAAkBiW,YAAlB,CAAjB,CAAV;AACD;AAlBH;;AAAA;AAAA,EAAuCsD,iEAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGO,IAAMgB,gBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACoB,IADpB;;AAAA,2DAEmB,GAFnB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,iBAAQD,IAAR,EAAwC;AACtC,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACD;AAPH;AAAA;AAAA,WASE,kBAASE,KAAT,EAA0C;AACxC,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD;AAZH;AAAA;AAAA,WAcE,kBAASxP,KAAT,EAA8B;AAC5B,WAAKyP,OAAL,CAAazP,KAAb,EAAoB,KAAKiL,YAAzB,EAAuC,KAAKuE,KAA5C,EAAmD,KAAKF,IAAxD;AACD;AAhBH;AAAA;AAAA,WAkBE,iBAAQtP,KAAR,EAAuBiL,YAAvB,EAA6CuE,KAA7C,EAA4DF,IAA5D,EAAgF;AAC9EtP,MAAAA,KAAK,CAACxB,EAAN,GAAWwB,KAAK,CAACxB,EAAN,CAASxJ,QAAT,CAAkBsa,IAAlB,EAAwB7a,GAAxB,CAA4BuL,KAAK,CAAC5B,EAAN,CAAS5I,GAAT,CAAa,CAAb,EAAgBR,QAAhB,CAAyB,IAAIsa,IAA7B,CAA5B,CAAX;AACAtP,MAAAA,KAAK,CAACvB,EAAN,GAAWuB,KAAK,CAACvB,EAAN,CAASzJ,QAAT,CAAkBsa,IAAlB,EAAwB7a,GAAxB,CAA4BuL,KAAK,CAAC3B,EAAN,CAAS7I,GAAT,CAAa,CAAb,EAAgBR,QAAhB,CAAyB,IAAIsa,IAA7B,CAA5B,CAAX;AAEAtP,MAAAA,KAAK,CAAC/B,CAAN,GAAU+B,KAAK,CAAC/B,CAAN,CAAQnI,QAAR,CAAiBkK,KAAK,CAAC5B,EAAN,CAASpJ,QAAT,CAAkBwa,KAAlB,EAAyBpP,MAAzB,CAAgCJ,KAAK,CAACxB,EAAN,CAAS/I,IAAT,GAAgBhB,GAAhB,CAAoB,IAApB,CAAhC,CAAjB,CAAV;AACAuL,MAAAA,KAAK,CAACjJ,CAAN,GAAUiJ,KAAK,CAACjJ,CAAN,CAAQjB,QAAR,CAAiBkK,KAAK,CAAC3B,EAAN,CAASrJ,QAAT,CAAkBwa,KAAlB,EAAyBpP,MAAzB,CAAgCJ,KAAK,CAACvB,EAAN,CAAShJ,IAAT,GAAgBhB,GAAhB,CAAoB,IAApB,CAAhC,CAAjB,CAAV;AACD;AAxBH;;AAAA;AAAA,EAAsC8Z,iEAAtC;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEO,IAAMmB,UAAb;AAKE,sBAAYvE,OAAZ,EAAiC;AAAA;;AAAA,qCAJM,IAIN;;AAAA,wCAHF,IAGE;;AAAA,0CAFA,KAEA;;AAC/B,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAPH;AAAA;AAAA,WASE,eAAMlS,OAAN,EAA4C;AAC1C,UAAI2R,IAAI,GAAG,KAAKO,OAAL,CAAaP,IAAb,CAAkB3R,OAAO,CAACiR,iBAAR,EAAlB,EAA+C,CAA/C,CAAX;AACA,UAAMyF,QAAkB,GAAG1W,OAAO,CAAC6C,WAAR,EAA3B;AACA,UAAMC,OAAO,GAAG9C,OAAO,CAACsC,cAAR,EAAhB;AAEA,UAAIsI,KAAK,GAAG,IAAI9Q,gDAAJ,CAAW,GAAX,EAAgB,CAAhB,EAAmBgM,SAAnB,CAA6B,CAA7B,EAAgC8I,GAAhC,GAAsCpB,MAAtC,CAA6CxN,OAAO,CAACiR,iBAAR,EAA7C,EAA0EzG,MAA1E,CAAiF,CAAjF,CAAZ;;AAEA,WAAK,IAAImM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhD,UAAzB,EAAqCgD,CAAC,IAAI,CAA1C,EAA6C;AAC3CtP,QAAAA,OAAO,CAACpM,GAAR,qBAAyB0b,CAAC,GAAG,CAA7B;AACA,YAAMlX,KAAK,GAAGkX,CAAC,GAAGD,QAAQ,CAACpX,MAA3B;AACA,YAAMtB,CAAC,GAAGgC,OAAO,CAAC4W,WAAR,CAAoBnX,KAApB,CAAV;AACA,YAAMxB,CAAC,GAAG+B,OAAO,CAAC6W,WAAR,CAAoBpX,KAApB,CAAV;;AACA,oCAAgB,KAAKyS,OAAL,CAAa7B,OAAb,CAAqBrS,CAArB,EAAwBC,CAAxB,EAA2B2M,KAA3B,CAAhB;AAAA;AAAA,YAAOkM,KAAP;;AACAnF,QAAAA,IAAI,GAAGmF,KAAP;AACA,aAAK5E,OAAL,CAAaH,QAAb,CAAsB/T,CAAtB,EAAyBC,CAAzB;;AACA,oCAA8B,KAAKiU,OAAL,CAAa+C,QAAb,CAAsBjX,CAAtB,EAAyBC,CAAzB,EAA4B2M,KAA5B,EAAmC,KAAKoH,YAAxC,CAA9B;AAAA;AAAA,YAAO+E,WAAP;AAAA,YAAoBC,MAApB;;AACApM,QAAAA,KAAK,GAAGoM,MAAR;AACArF,QAAAA,IAAI,GAAGA,IAAI,GAAG,KAAP,GAAeoF,WAAW,GAAG,KAApC;AACA1P,QAAAA,OAAO,CAACpM,GAAR,qBAAyB0b,CAAC,GAAG,CAA7B,sBAA0ChF,IAA1C,wBAA4D,KAAKO,OAAL,CAAa+E,MAAb,CAAoBjX,OAApB,EAA6BkX,IAA7B,EAA5D;AACD;;AACD,aAAO,CAACvF,IAAD,CAAP;AACD;AA9BH;AAAA;AAAA,WAgCE,uBAAcnX,GAAd,EAAuC;AACrC,WAAKmZ,UAAL,GAAkBnZ,GAAlB;AACA,aAAO,IAAP;AACD;AAnCH;AAAA;AAAA,WAqCE,yBAAgBA,GAAhB,EAAyC;AACvC,WAAKwX,YAAL,GAAoBxX,GAApB;AACA,aAAO,IAAP;AACD;AAxCH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEO,IAAM2c,OAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,eAAM9C,YAAN,EAA6BC,aAA7B,EAAsE;AAAA;;AACpE,UAAMlV,gBAAgB,GAAGiV,YAAY,CAACjU,mBAAb,EAAzB;AAEA,UAAIwC,CAAC,GAAG,CAAR;AAEA,WAAK6Q,SAAL,CAAec,YAAf,CAA4BnV,gBAA5B;AACA,WAAKqU,SAAL,CAAee,eAAf,CAA+B,KAAKxC,YAApC;;AAEA,WAAK,IAAIpV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK+W,UAAzB,EAAqC/W,CAAC,IAAI,CAA1C,EAA6C;AAC3C,YAAM6X,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,YAAM3Z,WAAW,GAAG,KAAKkX,OAAL,CAAa7B,OAAb,CAAqBgE,YAAY,CAACja,IAAlC,CAApB;AAEA,aAAK8X,OAAL,CAAaH,QAAb,CAAsBsC,YAAY,CAACja,IAAnC,EAAyCka,aAAa,CAACla,IAAvD,EAA6DY,WAA7D,EAA0E,KAAKiM,cAA/E;AAEA,aAAKwM,SAAL,CAAeuB,IAAf,CAAoB,EAAEpS,CAAtB;AAEA,aAAKsP,OAAL,CAAagB,SAAb,GAAyBhS,OAAzB,CAAiC,UAAC6F,KAAD,EAAW;AAC1C,eAAI,CAAC0M,SAAL,CAAewB,QAAf,CAAwBlO,KAAxB;AACD,SAFD;;AAIA,YAAI,KAAK6M,OAAT,EAAkB;AAChB,cAAI,CAAChX,CAAC,GAAG,CAAL,IAAU,KAAKiX,WAAf,KAA+B,CAAnC,EAAsC;AACpC,gBAAMuB,aAAa,GAAG,KAAKnB,IAAL,CAAUI,YAAY,CAACja,IAAvB,EAA6Bka,aAAa,CAACla,IAA3C,CAAtB;AACA,gBAAM+a,OAAO,GAAG,IAAIT,IAAJ,GAAWC,OAAX,EAAhB;AAEAtN,YAAAA,OAAO,CAACpM,GAAR,sBACgB2B,CAAC,GAAG,CADpB,sBACiCmT,iDAAK,CAACqF,aAAa,CAACnB,IAAf,EAAqB,CAArB,CADtC,0BAC6ElE,iDAAK,CAC9EqF,aAAa,CAACrB,QADgE,EAE9E,CAF8E,CADlF,uBAIgB,CAACoB,OAAO,GAAGV,SAAX,IAAwB,IAJxC;AAMD;AACF;;AAED,aAAKX,YAAL,CAAkB;AAChBuB,UAAAA,SAAS,EAAEzY;AADK,SAAlB;AAGD;;AAED,aAAO,IAAP;AACD;AAzCH;;AAAA;AAAA,EAA6B4W,6DAA7B;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;ACUO,IAAKjM,SAAZ;;WAAYA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;AAAAA,EAAAA;GAAAA,cAAAA;;;;;;;;;;ACZZ;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAWA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AACA;AACA;AAEA,IAAMgQ,cAAc,GAAG;AAAE5E,EAAAA,gBAAgB,EAAhBA,6DAAF;AAAoBQ,EAAAA,gBAAgB,EAAhBA,6DAAgBA;AAApC,CAAvB;AACA,IAAMxY,IAAI,GAAG;AACXb,EAAAA,MAAM,EAANA,gDAAMA;AADK,CAAb;AAGA,IAAM0d,KAAK,GAAG;AACZ3J,EAAAA,YAAY,EAAZA,gDADY;AAEZrB,EAAAA,aAAa,EAAbA,iDAFY;AAGZmB,EAAAA,SAAS,EAATA,6CAHY;AAIZG,EAAAA,aAAa,EAAbA,iDAJY;AAKZE,EAAAA,SAAS,EAATA,6CALY;AAMZ9D,EAAAA,SAAS,EAATA,6CANY;AAOZyC,EAAAA,YAAY,EAAZA,gDAPY;AAQZjC,EAAAA,mBAAmB,EAAnBA,uDARY;AASZqC,EAAAA,QAAQ,EAARA,4CAAQA;AATI,CAAd;AAWA,IAAM/J,cAAc,GAAG;AACrBA,EAAAA,cAAc,EAAEqU,2DADK;AAErBtT,EAAAA,wBAAwB,EAAxBA,qEAAwBA;AAFH,CAAvB;AAIA,IAAM0T,SAAS,GAAG;AAChBhC,EAAAA,aAAa,EAAbA,6DADgB;AAEhBQ,EAAAA,wBAAwB,EAAxBA,wEAFgB;AAGhBV,EAAAA,gBAAgB,EAAhBA,gEAHgB;AAIhBY,EAAAA,iBAAiB,EAAjBA,iEAJgB;AAKhBG,EAAAA,gBAAgB,EAAhBA,gEAAgBA;AALA,CAAlB;AAOA,IAAMa,OAAO,GAAG;AACd/C,EAAAA,gBAAgB,EAAhBA,sDADc;AAEd+C,EAAAA,OAAO,EAAEG,6CAFK;AAGdb,EAAAA,UAAU,EAAVA,gDAAUA;AAHI,CAAhB;AAKA,IAAMiB,eAAe,GAAG;AACtBzX,EAAAA,wBAAwB,EAAxBA,8EADsB;AAEtBM,EAAAA,6BAA6B,EAA7BA,mFAFsB;AAGtBG,EAAAA,kCAAkC,EAAlCA,wFAAkCA;AAHZ,CAAxB;AAKA,IAAMiX,WAAW,GAAG;AAClBra,EAAAA,cAAc,EAAdA,wDADkB;AAElBuB,EAAAA,cAAc,EAAdA,wDAFkB;AAGlBC,EAAAA,cAAc,EAAdA,wDAHkB;AAIlBC,EAAAA,cAAc,EAAdA,wDAAcA;AAJI,CAApB;AAMA,IAAMG,OAAO,GAAG;AACdA,EAAAA,OAAO,EAAEkY,6CAAcA;AADT,CAAhB;AAGA,IAAMQ,oBAAoB,GAAG;AAC3BjU,EAAAA,uBAAuB,EAAvBA,yFAD2B;AAE3BO,EAAAA,sCAAsC,EAAtCA,mHAAsCA;AAFX,CAA7B;AAIA,IAAMgM,OAAO,GAAG;AACda,EAAAA,UAAU,EAAVA,iDAAUA;AADI,CAAhB","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/index.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/index.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-ts/./src/typescript/Dataset/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/index.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/LSTM.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Purelin.ts","webpack://impulse-ts/./src/typescript/Layer/RNN.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/index.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/Network/index.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/index.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/index.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { CallbackDatabaseModifier } from \"./Callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./MissingData\";\n\nexport { CallbackDatabaseModifier, MissingDataScalingDatabaseModifier, MinMaxScalingDatabaseModifier };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    const indices = this.getCharIndices();\n    example.split(\"\").forEach((ch, i) => {\n      data[i] = [];\n      for (let col = 0; col < this.vocabularySize; col += 1) {\n        data[i][col] = 0;\n      }\n      data[i][indices[ch]] = 1;\n    });\n    return Matrix.from(data).transpose();\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    const indices = this.getCharIndices();\n    example.split(\"\").forEach((ch, i) => {\n      data[i] = [];\n      for (let col = 0; col < this.vocabularySize; col += 1) {\n        data[i][col] = 0;\n      }\n      data[i][indices[ch]] = 1;\n    });\n    return Matrix.from(data).transpose();\n  }\n}\n","import { Dataset } from \"./Dataset\";\n\nexport { Dataset };\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { DatasetBuilderSourceCSV } from \"./DatasetBuilderSourceCSV\";\n\nexport { DatasetBuilderSourceCSV };\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetVocabularyBuilderSourceTextFile\";\n\nexport { DatasetVocabularyBuilderSourceTextFile };\n","import { DatasetBuilder } from \"./DatasetBuilder\";\nimport { DatasetVocabularyBuilder } from \"./DatasetVocabularyBuilder\";\n\nexport { DatasetBuilder, DatasetVocabularyBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = sigma.dot(previousActivations.transpose()).divide(numberOfExamples);\n    this.layer.gW = this.layer.gW.add(this.layer.W.multiply(regularization).divide(numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        console.log(\n          this.layer.W.rows,\n          this.layer.W.cols,\n          sigma.rows,\n          sigma.cols,\n          this.layer.gW.rows,\n          this.layer.gW.cols\n        );\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = this.vb.setZeros();\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m.setMin(0);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class LSTMLayer extends AbstractLayer {\n  public Wf: Matrix | null = null;\n  public bf: Matrix | null = null;\n  public Wi: Matrix | null = null;\n  public bi: Matrix | null = null;\n  public Wc: Matrix | null = null;\n  public bc: Matrix | null = null;\n  public Wo: Matrix | null = null;\n  public bo: Matrix | null = null;\n  public Wy: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dxt: Matrix | null = null;\n  public dWf: Matrix | null = null;\n  public dWi: Matrix | null = null;\n  public dWc: Matrix | null = null;\n  public dWo: Matrix | null = null;\n  public dbf: Matrix | null = null;\n  public dbi: Matrix | null = null;\n  public dbc: Matrix | null = null;\n  public dbo: Matrix | null = null;\n\n  configure(): void {}\n\n  forward(input: Matrix, aPrev: Matrix, cPrev): Matrix[] {\n    const nx = input.rows;\n    const m = input.cols;\n    const ny = this.Wy.rows;\n    const na = this.Wy.cols;\n\n    const concat = new Matrix(nx + na, m);\n\n    const ft = this.Wf.dot(concat).add(this.bf).sigmoid();\n    const it = this.Wi.dot(concat).add(this.bi).sigmoid();\n    const cct = this.Wc.dot(concat).add(this.bc).tanh();\n    const cNext = ft.multiply(cPrev).add(it.multiply(cct));\n    const ot = this.Wo.dot(concat).add(this.bo).sigmoid();\n    const aNext = ot.multiply(cNext.tanh());\n\n    const ytPred = this.Wy.dot(aNext).add(this.by).softmax();\n    return [aNext, cPrev];\n  }\n\n  backward(daNext: Matrix, dcNext: Matrix): void {}\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): LSTMLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      );\n\n      result.setCol(i, pool.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass PurelinLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.purelin;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.setOnes();\n  }\n}\n\nexport { PurelinLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class RNNLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public daNext: Matrix | null = null;\n  public dxt: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(100, 27);\n    this.Wax = this.Wax.setRandom(1);\n\n    this.Waa = new Matrix(100, 100);\n    this.Waa = this.Waa.setRandom(1);\n\n    this.Wya = new Matrix(27, 100);\n    this.Wya = this.Wya.setRandom(1);\n\n    this.b = new Matrix(100, 1);\n    this.b = this.b.setRandom(1);\n\n    this.by = new Matrix(27, 1);\n    this.by = this.by.setRandom(1);\n\n    this.dWax = new Matrix(100, 27);\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(100, 100);\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(27, 100);\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(100, 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(27, 1);\n    this.dby = this.dby.setZeros();\n  }\n\n  forward(aPrev: Matrix, x: Matrix): Matrix[] {\n    const aNext = this.Waa.dot(aPrev).add(this.Wax.dot(x)).add(this.b).tanh();\n    const y = this.Wya.dot(aNext).add(this.by).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): void {\n    this.dWya = this.dWya.add(dy.dot(a.transpose())).setMax(5).setMin(-5);\n    this.dby = this.dby.add(dy).setMax(5).setMin(-5);\n    const da = this.Wya.transpose().dot(dy).add(this.daNext);\n    const daraw = a.multiply(a).minusOne().multiply(da);\n    this.db = this.db.add(daraw).setMax(5).setMin(-5);\n    this.dWax = this.dWax.add(daraw.dot(x.transpose())).setMax(5).setMin(-5);\n    this.dWaa = this.dWaa.add(daraw.dot(aPrev.transpose())).setMax(5).setMin(-5);\n    this.daNext = this.Waa.transpose().dot(daraw).setMax(5).setMin(-5);\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RNNLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\nimport { RNNLayer } from \"./RNN\";\nimport { PurelinLayer } from \"./Purelin\";\nimport { LSTMLayer } from \"./LSTM\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RNNLayer,\n  PurelinLayer,\n  LSTMLayer,\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => void): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        cb(this.data[row][col]);\n      }\n    }\n    return this;\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n\nexport class Matrix3D {\n  public rows = 0;\n  public cols = 0;\n  public depth = 0;\n  public data: number[][][] | null = null;\n\n  constructor(rows = 0, cols = 0, depth: number = 0, data: number[][][] | null = null) {\n    this.resize(rows, cols, depth);\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  resize(rows: number, cols: number, depth: number): Matrix3D {\n    this.rows = rows;\n    this.cols = cols;\n    this.depth = depth;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        this.data[row][col] = new Array(depth);\n      }\n    }\n\n    return this;\n  }\n\n  setZeros() {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = new Array(this.depth);\n        for (let depth = 0; depth < this.cols; depth += 1) {\n          data[row][col][depth] = 0;\n        }\n      }\n    }\n    return new Matrix3D(this.rows, this.cols, this.depth, data);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Dimension, Layers, LayersRNN } from \"../types\";\nimport { Matrix, Matrix3D } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const vocabularySize = dataset.getVocabularySize();\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(27, 1).setZeros();\n    let aPrev = new Matrix(100, 1).setZeros();\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n\n      indices.push(idx);\n\n      x = new Matrix(27, 1).setZeros();\n      x.data[y.colMaxCoeffIndex(0)][0] = 1;\n\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix, vocabularySize: number = 20): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(27, 1).setZeros();\n      x[t].data[X.rowMaxCoeffIndex(t - 1)][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(a[t - 1], x[t]);\n      a[t] = _a;\n      yHat[t] = _yHat.setMin(1e-5);\n      loss -= Math.log(yHat[t].data[t - 1][0]);\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix, Y: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    this.layers[0].dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    this.layers[0].dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    this.layers[0].dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    this.layers[0].db = new Matrix(this.layers[0].b.rows, this.layers[0].b.cols).setZeros();\n    this.layers[0].dby = new Matrix(this.layers[0].by.rows, this.layers[0].by.cols).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      const dy = Matrix.from(yHat[t].data);\n      this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n    }\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X, Y);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(this.layers[0].dWax.multiply(-learningRate));\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    this.layers[0].by = this.layers[0].by.add(this.layers[0].dby.multiply(-learningRate));\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { Network } from \"./Network\";\nimport { NetworkRNN } from \"./NetworkRNN\";\n\nexport { Network, NetworkRNN };\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(X: Matrix, Y: Matrix): CostResult {\n    const numberOfExamples = X.cols;\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(X);\n    const correctOutput = Y;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = Y.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * X.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input.data, output.data);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.gW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.gb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWcorrected = layer.sW.divide(1 - Math.pow(this.beta2, 2));\n    const sbCorrected = layer.sb.divide(1 - Math.pow(this.beta2, 2));\n\n    layer.W = layer.W.subtract(vWCorrected.multiply(learningRate).divide(sWcorrected.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(vbCorrected.multiply(learningRate).divide(sbCorrected.sqrt().add(1e-8)));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\nimport { OptimizerAdagrad } from \"./OptimizerAdagrad\";\nimport { OptimizerMomentum } from \"./OptimizerMomentum\";\nimport { OptimizerRMSProp } from \"./OptimizerRMSProp\";\n\nexport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdagrad, OptimizerMomentum, OptimizerRMSProp };\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.001;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n    const examples: string[] = dataset.getExamples();\n    const indices = dataset.getCharIndices();\n\n    let aPrev = new Matrix(100, 1).setRandom(1).abs().setMax(dataset.getVocabularySize()).setMin(0);\n\n    for (let j = 0; j < this.iterations; j += 1) {\n      console.log(`Iteration ${j + 1}`);\n      const index = j % examples.length;\n      const x = dataset.getExampleX(index);\n      const y = dataset.getExampleY(index);\n      const [_loss] = this.network.forward(x, y, aPrev);\n      loss = _loss;\n      this.network.backward(x, y);\n      const [currentLoss, _aPrev] = this.network.optimize(x, y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${j + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset).trim()}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\nimport { Trainer } from \"./Trainer\";\nimport { RNNTrainer } from \"./RNNTrainer\";\n\nexport { MiniBatchTrainer, Trainer, RNNTrainer };\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RNNLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RNNLayer;\nexport type LayersLSTM = LSTMLayer;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"gpu.js\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RNNLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { NetworkRNN } from \"./Network\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RNNLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n  Network,\n};\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","logisticActivation","m","Math","exp","from","logisticLoss","output","predictions","log","epsilon","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","GPU","gpu","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","softmaxActivation","divider","colwiseSum","replicate","softmaxLoss","kernel2","kernel3","ComputationGPU","setComputation","getComputation","currentComputation","type","Dataset","exampleSize","numberOfExamples","arr","length","Number","NaN","index","offset","batchSize","block","fromMatrix","instance","AbstractDatasetModifier","dataset","CallbackDatabaseModifier","example","exampleIndex","getNumberOfExamples","callback","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","push","modificationType","forEach","DatasetVocabulary","str","toLowerCase","chars","Set","split","sort","dataSize","vocabularySize","replace","map","result","char","tx","stride","X","Y","substr","nx","getCharIndices","setZeros","xIndex","rowIndex","sentence","_m","t","getExamples","indices","ch","DatasetBuilder","sourcePromise","Promise","resolve","then","source","matrix","parse","AbstractDatasetBuilderSource","csvtojson","CSVState","DatasetBuilderSourceCSV","path","noheader","fromFile","DatasetVocabularyBuilder","AbstractDatasetVocabularyBuilderSource","fs","DatasetVocabularyBuilderSourceTextFile","reject","readFile","err","buffer","toString","AbstractLayer","backPropagation","value","width","height","depth","previousLayer","AbstractLayer1D","W","A","Z","gW","gb","vW","vb","sW","sb","dW","db","resize","getHeight","getWidth","setRandom","input","activation","is1D","setWidth","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getDepth","AbstractBackPropagation","layer","Backpropagation1Dto1D","regularization","previousActivations","divide","rowwiseSum","console","Backpropagation3Dto1D","LayerType","BackpropagationToMaxPool","BackpropagationToConv","BackpropagationFactory","getType","conv","maxpool","fullyconnected","padding","getPadding","getStride","filterSize","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","execute","c","h","w","vertStart","vertEnd","horizStart","horizEnd","d","vertical","verticalPad","horizontal","horizontalPad","z","prevLayer","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","im2col","ConvLayer","numFilters","size","tmp","setCol","rollToColMatrix","setMin","delta","FullyConnectedLayer","LSTMLayer","aPrev","cPrev","ny","Wy","na","concat","ft","Wf","bf","sigmoid","it","Wi","bi","cct","Wc","bc","tanh","cNext","ot","Wo","bo","aNext","ytPred","by","softmax","daNext","dcNext","rnnlayer","LogisticLayer","fraction","logistic","MaxPoolLayer","pool","PurelinLayer","purelin","RNNLayer","Wax","Waa","Wya","dWax","dWaa","dWya","dby","dy","setMax","da","daraw","ReluLayer","relu","SoftmaxLayer","SoftplusLayer","softplus","TanhLayer","generateData","Float32Array","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","abs","numberOfElements","cb","Matrix3D","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","boundingY","boundingX","currentResultCol","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","Network","dimensions","layers","forward","getBackPropagation","propagate","derivative","resultJSON","weights","JSON","stringify","writeFile","error","NetworkRNN","sequenceLength","getVocabularySize","charIndices","newLineCharacter","getChars","idx","counter","colMaxCoeffIndex","join","a0","yHat","loss","rowMaxCoeffIndex","_a","_yHat","backward","learningRate","AbstractNetworkBuilder","network","layerClass","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","json","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","undefined","iterations","verbose","verboseStep","stepCallback","accuracy","correctOutput","cost","index1","index2","MiniBatchTrainer","inputDataset","outputDataset","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractOptimizer","OptimizerAdagrad","adagrad","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWcorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","RNNTrainer","examples","j","getExampleX","getExampleY","_loss","currentLoss","_aPrev","sample","trim","Trainer","DatasetDataset","DatasetBuilderBuilder","TrainerTrainer","NetworkBuilder","Layer","Optimizer","DatasetModifier","Computation","DatasetBuilderSource"],"sourceRoot":""}