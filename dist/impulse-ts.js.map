{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/RNN.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-ts/./src/typescript/main.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max();\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(1, this.cols).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n\nexport class Matrix3D {\n  public rows = 0;\n  public cols = 0;\n  public depth = 0;\n  public data: number[][][] | null = null;\n\n  constructor(rows = 0, cols = 0, depth: number = 0, data: number[][][] | null = null) {\n    this.resize(rows, cols, depth);\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  resize(rows: number, cols: number, depth: number): Matrix3D {\n    this.rows = rows;\n    this.cols = cols;\n    this.depth = depth;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        this.data[row][col] = new Array(depth);\n      }\n    }\n\n    return this;\n  }\n\n  setZeros() {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = new Array(this.depth);\n        for (let depth = 0; depth < this.cols; depth += 1) {\n          data[row][col][depth] = 0;\n        }\n      }\n    }\n    return new Matrix3D(this.rows, this.cols, this.depth, data);\n  }\n}\n","import { Dimension, Layers, LayersRNN } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  sample(charIndices: Object) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const vocabularySize = this.layers[0].getWidth();\n    const na = this.layers[0].getWidth();\n    const indices = [];\n    const newLineCharacter = charIndices[\"\\n\"];\n\n    let x = new Matrix(vocabularySize, 1).setZeros();\n    let aPrev = new Matrix(na, 1).setZeros();\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n\n      const flat = y.flatten();\n\n      idx = parseInt(String(Math.random() * vocabularySize));\n\n      indices.push(idx);\n\n      x = new Matrix(vocabularySize, 1);\n      x.data[idx][0] = 1;\n\n      aPrev = a;\n\n      counter = +1;\n    }\n  }\n\n  forward(input: DatasetVocabulary, a0: Matrix): Matrix {\n    //const examples = input.getExamples();\n    //for (let t = 0; t < examples.length; t += 1) {\n    //const [_aNext, _predicted] = this.layers[0].forward(output, a);\n    //}\n    //return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].derivative(sigma));\n    }\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RNNLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RNNLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = sigma.dot(previousActivations.transpose()).divide(numberOfExamples);\n    this.layer.gW = this.layer.gW.add(this.layer.W.multiply(regularization).divide(numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        console.log(\n          this.layer.W.rows,\n          this.layer.W.cols,\n          sigma.rows,\n          sigma.cols,\n          this.layer.gW.rows,\n          this.layer.gW.cols\n        );\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n  const result = [[]];\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result[currentResultCol][currentResultRow] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n      result[currentResultCol] = [];\n    }\n  }\n  return Matrix.from(result);\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      console.log(conv.rows, conv.cols, this.W.rows, this.W.cols);\n      process.exit();\n\n      const tmp = this.W.dot(conv).add(this.b.replicate(1, conv.cols));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class RNNLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(this.getWidth(), this.getHeight());\n    this.Wax = this.Wax.setRandom(this.getWidth());\n\n    this.Waa = new Matrix(this.getWidth(), this.getWidth());\n    this.Waa = this.Waa.setRandom(this.getWidth());\n\n    this.Wya = new Matrix(this.getDepth(), this.getWidth());\n    this.Wya = this.Wax.setRandom(this.getWidth());\n\n    this.b = new Matrix(this.getWidth(), 1);\n    this.b = this.b.setZeros();\n\n    this.by = new Matrix(this.getDepth(), 1);\n    this.by = this.by.setZeros();\n  }\n\n  forward(input: Matrix, aPrev: Matrix): Matrix[] {\n    const aNext = this.Wax.dot(input).add(this.Waa.dot(aPrev)).add(this.b);\n    const predicted = this.Wya.dot(aNext).add(this.by).softmax();\n    return [aNext, predicted];\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RNNLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n}\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix3D, Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number, tx: number = 40) {\n    const m = X.length;\n    const x = new Matrix3D(m, tx, nx).setZeros();\n    const y = new Matrix(m, nx).setZeros();\n    const chars = this.getCharIndices();\n\n    X.forEach((sentence, i) => {\n      sentence.split(\"\").forEach((char, t) => {\n        x.data[i][t][chars[char]] = 1;\n      });\n      y.data[i][chars[Y[i]]] = 1;\n    });\n\n    return [x, y];\n  }\n}\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.gW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.gb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWcorrected = layer.sW.divide(1 - Math.pow(this.beta2, 2));\n    const sbCorrected = layer.sb.divide(1 - Math.pow(this.beta2, 2));\n\n    layer.W = layer.W.subtract(vWCorrected.multiply(learningRate).divide(sWcorrected.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(vbCorrected.multiply(learningRate).divide(sbCorrected.sqrt().add(1e-8)));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(X: Matrix, Y: Matrix): CostResult {\n    const numberOfExamples = X.cols;\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(X);\n    const correctOutput = Y;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = Y.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * X.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input.data, output.data);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RNNLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { NetworkRNN } from \"./Network\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RNNLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n  Network,\n};\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Network","dimensions","this","layer","size","layers","push","input","output","forEach","forward","X","Y","predictions","regularization","m","cols","sigma","subtract","length","getBackPropagation","propagate","derivative","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractComputation","name","func","kernels","Error","args","apply","gpu","GPU","mode","elementWiseDivide","m1","m2","rows","kernel","createKernel","a","thread","x","y","setOutput","Matrix","divideNumber","num","constants","number","setConstants","softmaxActivation","Math","exp","divider","colwiseSum","replicate","softmaxLoss","log","elementWiseMultiply","sum","logisticActivation","logisticLoss","kernel2","kernel3","add","tanhActivation","reluActivation","max","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","i","fillRandom","parameter","random","fillZeros","multiplyNumber","transpose","ComputationGPU","addKernel","row","col","firstMatrix","sub","toMultiply2","toMultiply1","subtractFromNumber","logisticBackpropagation","oldY","multiply","minusOne","reluBackpropagation","Array","logMinusOne","addNumber","ComputationCPU","currentComputation","getComputation","resize","generateData","arr","Float32Array","Number","NaN","t","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","numberOfElements","cb","divide","rowwiseSum","Matrix3D","depth","LayerType","NetworkRNN","charIndices","Waa","Wax","Wya","by","vocabularySize","getWidth","na","indices","newLineCharacter","setZeros","aPrev","idx","counter","tanh","softmax","flatten","parseInt","String","a0","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","A","gW","gb","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","backPropagation","width","height","AbstractLayer1D","vW","vb","sW","sb","dW","db","setRandom","activation","setWidth","is3D","setHeight","SoftmaxLayer","delta","fraction","LogisticLayer","logistic","TanhLayer","ReluLayer","setMax","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","process","exit","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","RNNLayer","aNext","rnnlayer","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","dataset","DatasetVocabulary","str","toLowerCase","chars","Set","split","sort","dataSize","replace","map","example","char","tx","substr","nx","getCharIndices","sentence","DatasetVocabularyBuilder","AbstractOptimizer","learningRate","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWcorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerAdagrad","adagrad","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","accuracy","correctOutput","cost","colMaxCoeffIndex","MiniBatchTrainer","inputDataset","outputDataset","getNumberOfExamples","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","Trainer","AbstractDatasetModifier","CallbackDatabaseModifier","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","TrainerTrainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource","DatasetVocabularyBuilderSourceTextFile","buffer"],"sourceRoot":""}