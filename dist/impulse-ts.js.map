{"version":3,"file":"impulse-ts.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,8NCL9D,MAAM,EAA+BC,QAAQ,M,+yBCEpB,IAGnBC,EAAO,WAKX,WAAYC,I,4FAAuB,6BAJa,MAAI,cACrC,GAAC,gBACW,IAGzBC,KAAKD,WAAaA,CACpB,C,QA+DC,O,EA/DA,G,EAAA,uBAED,SAASE,GAIP,OAHAD,KAAKE,OACLF,KAAKG,OAAOC,KAAKH,GAEVD,IACT,GAAC,uBAED,WACE,OAAOA,KAAKG,MACd,GAAC,qBAED,SAAQE,GACN,IAAIC,EAASD,EAMb,OAJAL,KAAKG,OAAOI,SAAQ,SAACN,GACnBK,EAASL,EAAMO,QAAQF,EACzB,IAEOA,CACT,GAAC,sBAED,SAASG,EAAWC,EAAWC,EAAqBC,GAKlD,IAJA,IAAMC,EAAIJ,EAAEK,KAERC,EAAQJ,EAAYK,SAASN,GAExBT,EAAQD,KAAKG,OAAOc,OAAS,EAAGhB,GAAS,EAAGA,GAAS,EAC5Dc,EAAQf,KAAKG,OAAOF,GACjBiB,qBACAC,UAAUV,EAAGI,EAAGD,EAAgBZ,KAAKG,OAAOF,GAAQD,KAAKG,OAAOF,GAAOmB,WAAWL,GAEzF,GAAC,kBAED,SAAKM,GACH,IAAMC,EAAa,CACjBvB,WAAYC,KAAKD,WACjBI,OAAQ,IAGVH,KAAKG,OAAOI,SAAQ,SAACN,GACnBqB,EAAWnB,OAAOC,KAAK,CACrBmB,KAAMtB,EAAMuB,UACZtB,KAAMD,EAAMwB,UACZC,QAAS,CACPC,EAAG1B,EAAM0B,EAAEC,KACXC,EAAG5B,EAAM4B,EAAED,OAGjB,IAEA,IAAME,EAASC,KAAKC,UAAUV,GAE9B,OAAO,IAAIW,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,UAAaf,EAAMS,GAAQ,SAACO,GACtBA,IACFC,QAAQC,MAAMF,GACdF,KAEFD,EAAQJ,EACV,GACF,GACF,M,oEAAC,EAtEU,G,krBCCN,IAAMU,EAAmB,wB,uGAAA,S,EAAA,K,EACQ,CAAC,G,MADT,c,uFACU,C,QAYvC,O,EAZuC,E,EAAA,wBAExC,SAAUC,EAAcC,GAEtB,OADA1C,KAAK2C,QAAQF,GAAQC,EACd1C,IACT,GAAC,qBAED,SAAQyC,GACN,IAAKzC,KAAK2C,QAAQF,GAChB,MAAM,IAAIG,MAAM,WAAD,OAAYH,EAAI,kBAChC,2BAHsBI,EAAI,iCAAJA,EAAI,kBAI3B,OAAO7C,KAAK2C,QAAQF,GAAMK,MAAM,KAAMD,EACxC,I,uEAAC,EAb6B,G,ixBCCzB,IAAME,EAAoB,SAACC,EAAYC,GAC5C,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,0BAGlB,IAAMO,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,OAAOyB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAK5B,EAAE7B,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,EACxE,IACCC,UAAU,CAACV,EAAGE,KAAMD,EAAGnC,OAE1B,OAAO,IAAI6C,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMqC,EAAOH,EAAGpB,KAAMqB,EAAGrB,MACzD,EAEagC,EAAe,SAACZ,EAAYa,GACvC,IAAMV,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOA,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAKzD,KAAK8D,UAAUC,MAC1D,IACCL,UAAU,CAACV,EAAGE,KAAMF,EAAGlC,OACvBkD,aAAa,CACZD,OAAQF,IAGZ,OAAO,IAAIF,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMqC,EAAOH,EAAGpB,MAChD,EAEaqC,EAAoB,SAACpD,GAChC,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKC,IAAIb,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAC/C,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OAClBc,EAAO,IAAI+B,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,OAC3CwC,EAAU,IAAIT,GAAO,EAAG9C,EAAEC,KAAMc,EAAKyC,aAAazC,MAAM0C,UAAUzD,EAAEqC,KAAM,GAChF,OAAO,IAAIS,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMiC,EAAkBnB,EAAMwC,GAASxC,KACrE,EAEa2C,EAAc,SAACjE,EAAgBK,GAC1C,IAAMwC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKM,IAAIlB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAC/C,IACCC,UAAU,CAAC/C,EAAYuC,KAAMvC,EAAYG,OAC5C,OAAO,IAAI6C,GACTrD,EAAO4C,KACP5C,EAAOQ,KACP2D,EAAoBnE,EAAQ,IAAIqD,GAAOrD,EAAO4C,KAAM5C,EAAOQ,KAAMqC,EAAOxC,EAAYiB,QAAsBA,MAC1G8C,KACJ,EAEaC,EAAqB,SAAC9D,GACjC,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAO,GAAO,EAAMY,KAAKC,KAAKb,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,IAC7D,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,MAC7C,EAEagD,EAAe,SAACtE,EAAgBK,GAC3C,IAAMwC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKM,IAAIlB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAC/C,IACCC,UAAU,CAACpD,EAAO4C,KAAM5C,EAAOQ,OAC5B+D,EAAUzB,IACbC,cAAa,SAAUC,GAEtB,OAAO,EAAMA,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,EAC5C,IACCC,UAAU,CAACpD,EAAO4C,KAAM5C,EAAOQ,OAC5BgE,EAAU1B,IACbC,cAAa,SAAUC,GAEtB,OAAOY,KAAKM,IAAI,EAAMlB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GACrD,IACCC,UAAU,CAAC/C,EAAYuC,KAAMvC,EAAYG,OAE5C,OAAOiE,EACLN,EAAoBnE,EAAQ,IAAIqD,GAAOrD,EAAO4C,KAAM5C,EAAOQ,KAAMqC,EAAO7C,EAAOsB,QAC/E6C,EACE,IAAId,GAAOrD,EAAO4C,KAAM5C,EAAOQ,KAAM+D,EAAQvE,EAAOsB,OACpD,IAAI+B,GAAOhD,EAAYuC,KAAMvC,EAAYG,KAAMgE,EAAQnE,EAAYiB,SAErE8C,KACJ,EAEaM,EAAiB,SAACnE,GAC7B,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAO,GAAO,EAAMY,KAAKC,KAAK,EAAMb,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,KAAO,CAC1E,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,MAC7C,EACaqD,EAAiB,SAACpE,GAC7B,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKgB,IAAI,EAAK5B,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GACpD,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,MAC7C,EAEauD,EAAqB,SAACtE,GACjC,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKM,IAAI,EAAIN,KAAKC,IAAIb,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,IAC5D,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,MAC7C,EAEawD,EAAU,SAACvE,GACtB,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKmB,IAAI/B,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAI,EACnD,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,OAAqB8C,KAClE,EAEaY,EAAO,SAACzE,GACnB,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOY,KAAKoB,KAAKhC,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAK,KACrD,IACCC,UAAU,CAAC7C,EAAEqC,KAAMrC,EAAEC,OACxB,OAAO,IAAI6C,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMqC,EAAOtC,EAAEe,MAC7C,EAEa2D,EAAc,SAACjF,EAAgBK,GAC1C,IAAMwC,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,OAAOA,EAAE7B,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAKS,KAAKmB,IAAI/B,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAI,EACrF,IACCC,UAAU,CAACpD,EAAO4C,KAAM5C,EAAOQ,OAClC,OAAO,IAAI6C,GAAOrD,EAAO4C,KAAM5C,EAAOQ,KAAMqC,EAAO7C,EAAOsB,OAAqB8C,KACjF,EAEac,EAAM,SAACxC,EAAYC,GAC9B,GAAID,EAAGlC,OAASmC,EAAGC,KACjB,MAAM,IAAIN,MAAM,6BAAD,OAA8BI,EAAGlC,KAAI,wBAAgBmC,EAAGC,KAAI,MAG7E,IAAMC,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,IADA,IAAI6C,EAAM,EACDe,EAAI,EAAGA,EAAIzF,KAAK8D,UAAUhD,KAAM2E,IAEvCf,GAAOpB,EAAEtD,KAAKuD,OAAOC,GAAGiC,GAAK5D,EAAE4D,GAAGzF,KAAKuD,OAAOE,GAEhD,OAAOiB,CACT,IACChB,UAAU,CAACV,EAAGE,KAAMD,EAAGnC,OACvBkD,aAAa,CACZlD,KAAMkC,EAAGE,OAGb,OAAO,IAAIS,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMqC,EAAOH,EAAGpB,KAAMqB,EAAGrB,MACzD,EAEamD,EAAM,SAAC/B,EAAYC,GAC9B,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,0BAGlB,IAAMO,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,OAAOyB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAK5B,EAAE7B,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,EACxE,IACCC,UAAU,CAACV,EAAGE,KAAMD,EAAGnC,OAE1B,OAAO,IAAI6C,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMqC,EAAOH,EAAGpB,KAAMqB,EAAGrB,MACzD,EAEaZ,EAAW,SAACgC,EAAYC,GACnC,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,0BAGlB,IAAMO,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,OAAOyB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAK5B,EAAE7B,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,EACxE,IACCC,UAAU,CAACV,EAAGE,KAAMD,EAAGnC,OAE1B,OAAO,IAAI6C,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMqC,EAAOH,EAAGpB,KAAMqB,EAAGrB,MACzD,EAEa8D,EAAa,SAAC1C,EAAY2C,GACrC,IAAMxC,EAASC,IACZC,cAAa,WACZ,OAAOa,KAAK0B,SAAW,EACzB,IACClC,UAAU,CAACV,EAAGE,KAAMF,EAAGlC,OACvBkD,aAAa,CACZ2B,UAAAA,IAGJ,OAAO,IAAIhC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMqC,IACtC,EAEa0C,EAAY,SAAC7C,GACxB,IAAMG,EAASC,IACZC,cAAa,WACZ,OAAO,CACT,IACCK,UAAU,CAACV,EAAGE,KAAMF,EAAGlC,OAC1B,OAAO,IAAI6C,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMqC,IACtC,EAWasB,EAAsB,SAACzB,EAAYC,GAC9C,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,0BAGlB,IAAMO,EAASC,IACZC,cAAa,SAAUC,EAAGzB,GAEzB,OAAOyB,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAK5B,EAAE7B,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,EACxE,IACCC,UAAU,CAACV,EAAGE,KAAMD,EAAGnC,OAE1B,OAAO,IAAI6C,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMqC,EAAOH,EAAGpB,KAAMqB,EAAGrB,MACzD,EAEakE,EAAiB,SAAC9C,EAAYa,GACzC,IAAMV,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOA,EAAEtD,KAAKuD,OAAOC,GAAGxD,KAAKuD,OAAOE,GAAKzD,KAAK8D,UAAUC,MAC1D,IACCL,UAAU,CAACV,EAAGE,KAAMF,EAAGlC,OACvBkD,aAAa,CACZD,OAAQF,IAGZ,OAAO,IAAIF,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMqC,EAAOH,EAAGpB,MAChD,EAEamE,EAAY,SAAClF,GACxB,IAAMsC,EAASC,IACZC,cAAa,SAAUC,GAEtB,OAAOA,EAAEtD,KAAKuD,OAAOE,GAAGzD,KAAKuD,OAAOC,EACtC,IACCE,UAAU,CAAC7C,EAAEC,KAAMD,EAAEqC,OAExB,OAAO,IAAIS,GAAO9C,EAAEC,KAAMD,EAAEqC,KAAMC,EAAOtC,EAAEe,MAC7C,EAEaoE,EAAc,a,qRAAA,U,MAAA,G,EAAA,E,+YACzB,aAAc,MAsB2B,O,4FAtB3B,UACZ,gBAEKC,UAAU,WAAYT,GAC3B,EAAKS,UAAU,MAAOlB,GACtB,EAAKkB,UAAU,WAAYjF,GAC3B,EAAKiF,UAAU,aAAcP,GAC7B,EAAKO,UAAU,YAAaJ,GAC5B,EAAKI,UAAU,sBAAuBxB,GACtC,EAAKwB,UAAU,iBAAkBH,GACjC,EAAKG,UAAU,oBAAqBlD,GACpC,EAAKkD,UAAU,eAAgBrC,GAC/B,EAAKqC,UAAU,oBAAqBhC,GACpC,EAAKgC,UAAU,cAAe1B,GAC9B,EAAK0B,UAAU,qBAAsBtB,GACrC,EAAKsB,UAAU,eAAgBrB,GAC/B,EAAKqB,UAAU,iBAAkBjB,GACjC,EAAKiB,UAAU,iBAAkBhB,GACjC,EAAKgB,UAAU,qBAAsBd,GACrC,EAAKc,UAAU,UAAWb,GAC1B,EAAKa,UAAU,OAAQX,GACvB,EAAKW,UAAU,cAAeV,GAC9B,EAAKU,UAAU,YAAaF,GAAW,CACzC,CAAC,O,EAAA,E,oDAAA,CAxBwB,CAASvD,G,ixBCpS7B,IAAMO,EAAoB,SAACC,EAAYC,GAC5C,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,0BAKlB,IAFA,IAAMhB,EAAO,GAEJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EACtCvE,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOlD,EAAGrB,KAAKsE,GAAKC,EAEtD,CAEA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMc,EACtC,EAEagC,EAAe,SAACZ,EAAYa,GAGvC,IAFA,IAAMjC,EAAO,GAEJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EACtCvE,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOtC,CAEzC,CAEA,OAAO,IAAIF,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEa+C,EAAqB,SAAC9D,GAEjC,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACrCvE,EAAKsE,GAAKC,GAAO,GAAO,EAAMjC,KAAKC,KAAKtD,EAAEe,KAAKsE,GAAKC,IAExD,CACA,OAAOxC,GAAAA,KAAY/B,EACrB,EAEagD,EAAe,SAACtE,EAAgBK,GAI3C,IAHA,IAAM6D,EAAM,GAGH0B,EAAM,EAAGA,EAAMvF,EAAYuC,KAAMgD,GAAO,EAAG,CAClD1B,EAAI0B,GAAO,GACX,IAAK,IAAIC,EAAM,EAAGA,EAAMxF,EAAYG,KAAMqF,GAAO,EAC3CxF,EAAYiB,OACd4C,EAAI0B,GAAKC,GAAOjC,KAAKM,IAAI7D,EAAYiB,KAAKsE,GAAKC,GANrC,MAShB,CAIA,IAHA,IAAMC,EAAc3B,GAAoB,IAAId,GAAOhD,EAAYuC,KAAMvC,EAAYG,KAAM0D,GAAMlE,GAEvF+F,EAAM,GACHH,EAAM,EAAGA,EAAM5F,EAAO4C,KAAMgD,GAAO,EAAG,CAC7CG,EAAIH,GAAO,GACX,IAAK,IAAIC,EAAM,EAAGA,EAAM7F,EAAOQ,KAAMqF,GAAO,EACtC7F,EAAOsB,OACTyE,EAAIH,GAAKC,GAAO,EAAM7F,EAAOsB,KAAKsE,GAAKC,GAG7C,CAIA,IAHA,IAAMG,EAAc,IAAI3C,GAAOrD,EAAO4C,KAAM5C,EAAOQ,KAAMuF,GAEnDzE,EAAO,GACJsE,EAAM,EAAGA,EAAMvF,EAAYuC,KAAMgD,GAAO,EAAG,CAClDtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMxF,EAAYG,KAAMqF,GAAO,EAC3CxF,EAAYiB,OACdA,EAAKsE,GAAKC,GAAOjC,KAAKM,IAAI,EAAM7D,EAAYiB,KAAKsE,GAAKC,GA5B5C,MA+BhB,CACA,IAAMI,EAAc,IAAI5C,GAAOhD,EAAYuC,KAAMvC,EAAYG,KAAMc,GAEnE,OAAOmD,EACLN,GAAoBqB,GAAeM,GAAc,GAAI9F,GACrDmE,GAAoBqB,GAAeS,GAAc,GAAIC,GAAmBF,EAAa,KACrF5B,KACJ,EAEa+B,EAA0B,SAAC1F,EAAe2F,GACrD,OAAO/B,EAAmB+B,GAAMC,SAAShC,EAAmB+B,GAAME,WACpE,EAEa5B,EAAiB,SAACnE,GAE7B,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACrCvE,EAAKsE,GAAKC,IAAQ,EAAIjC,KAAKC,KAAK,EAAItD,EAAEe,KAAKsE,GAAKC,MAAU,EAAIjC,KAAKC,KAAK,EAAItD,EAAEe,KAAKsE,GAAKC,IAE5F,CACA,OAAOxC,GAAAA,KAAY/B,EACrB,EAEaqD,EAAiB,SAACpE,GAE7B,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACjCtF,EAAEe,OACJA,EAAKsE,GAAKC,GAAOjC,KAAKgB,IAAI,EAAKrE,EAAEe,KAAKsE,GAAKC,IAGjD,CACA,OAAO,IAAIxC,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMc,EACpC,EAEaiF,EAAsB,SAAC9F,EAAe2F,GAEjD,IADA,IAAM9E,EAAO,GACJsE,EAAM,EAAGA,EAAMnF,EAAMmC,KAAMgD,GAAO,EAAG,CAC5CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMpF,EAAMD,KAAMqF,GAAO,EACrCpF,EAAMa,OACRA,EAAKsE,GAAKC,GAAOO,EAAK9E,KAAKsE,GAAKC,GAAO,EAAI,EAAI,EAGrD,CACA,OAAO1B,GAAoB,IAAId,GAAO5C,EAAMmC,KAAMnC,EAAMD,KAAMc,GAAOb,EACvE,EAEaoE,EAAqB,SAACtE,GAEjC,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACjCtF,EAAEe,OACJA,EAAKsE,GAAKC,GAAOjC,KAAKM,IAAI,EAAIN,KAAKC,IAAItD,EAAEe,KAAKsE,GAAKC,KAGzD,CACA,OAAO,IAAIxC,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMc,EACpC,EAEawD,EAAU,SAACvE,GAEtB,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACjCtF,EAAEe,OACJA,EAAKsE,GAAKC,GAAOjC,KAAKmB,IAAIxE,EAAEe,KAAKsE,GAAKC,GAAM,GAGlD,CACA,OAAO,IAAIxC,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMc,GAAM8C,KAC1C,EAEaY,EAAO,SAACzE,GAEnB,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EACjCtF,EAAEe,OACJA,EAAKsE,GAAKC,GAAOjC,KAAKoB,KAAKzE,EAAEe,KAAKsE,GAAKC,GAAO,MAGpD,CACA,OAAO,IAAIxC,GAAO9C,EAAEqC,KAAMrC,EAAEC,KAAMc,EACpC,EAea4D,EAAM,SAACxC,EAAYC,GAC9B,GAAID,EAAGlC,OAASmC,EAAGC,KACjB,MAAM,IAAIN,MAAM,6BAAD,OAA8BI,EAAGE,KAAI,YAAIF,EAAGlC,KAAI,wBAAgBmC,EAAGC,KAAI,YAAID,EAAGnC,KAAI,MAGnG,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,OAAQgD,EAAK,CACtCtE,EAAKsE,GAAO,IAAIY,MAAM7D,EAAGnC,MACzB,IAAK,IAAIqF,EAAM,EAAGA,EAAMlD,EAAGnC,OAAQqF,EAAK,CACtCvE,EAAKsE,GAAKC,GAAO,EACjB,IAAK,IAAIV,EAAI,EAAGA,EAAIzC,EAAGlC,OAAQ2E,EACzBzC,EAAGpB,MAAQqB,EAAGrB,OAChBA,EAAKsE,GAAKC,IAAQnD,EAAGpB,KAAKsE,GAAKT,GAAKxC,EAAGrB,KAAK6D,GAAGU,GAGrD,CACF,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMD,EAAGnC,KAAMc,EACtC,EAEamD,EAAM,SAAC/B,EAAYC,GAC9B,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,0BAElB,GAAII,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,kCAAD,OAAmCI,EAAGlC,KAAI,wBAAgBmC,EAAGnC,OAI9E,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,MAAQqB,EAAGrB,OAChBA,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOlD,EAAGrB,KAAKsE,GAAKC,GAGxD,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEaZ,GAAW,SAACgC,EAAYC,GACnC,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,kCAAD,OAAmCI,EAAGE,KAAI,wBAAgBD,EAAGC,OAE9E,GAAIF,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,kCAAD,OAAmCI,EAAGlC,KAAI,wBAAgBmC,EAAGnC,OAI9E,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,MAAQqB,EAAGrB,OAChBA,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOlD,EAAGrB,KAAKsE,GAAKC,GAGxD,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEa8D,GAAa,SAAC1C,EAAY2C,GAErC,IADA,IAAM/D,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EACtCvE,EAAKsE,GAAKC,IAAwB,EAAhBjC,KAAK0B,SAAe,GAAK1B,KAAKoB,KAAK,EAAIK,EAE7D,CACA,OAAO,IAAIhC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEaiE,GAAY,SAAC7C,GAExB,IADA,IAAMpB,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EACtCvE,EAAKsE,GAAKC,GAAO,CAErB,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAaa6C,GAAsB,SAACzB,EAAYC,GAC9C,GAAID,EAAGE,OAASD,EAAGC,KACjB,MAAM,IAAIN,MAAM,kCAAD,OAAmCI,EAAGE,KAAI,wBAAgBD,EAAGC,OAE9E,GAAIF,EAAGlC,OAASmC,EAAGnC,KACjB,MAAM,IAAI8B,MAAM,kCAAD,OAAmCI,EAAGlC,KAAI,wBAAgBmC,EAAGnC,OAI9E,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,MAAQqB,EAAGrB,OAChBA,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOlD,EAAGrB,KAAKsE,GAAKC,GAGxD,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEakE,GAAiB,SAAC9C,EAAYa,GAEzC,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,OACLA,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOtC,EAG3C,CACA,OAAO,IAAIF,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEa4E,GAAqB,SAACxD,EAAYa,GAE7C,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,OACLA,EAAKsE,GAAKC,GAAOtC,EAAMb,EAAGpB,KAAKsE,GAAKC,GAG1C,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEayD,GAAM,SAACrC,EAAYqC,GAE9B,IADA,IAAMzD,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,OACLA,EAAKsE,GAAKC,GAAOjC,KAAKmB,IAAIrC,EAAGpB,KAAKsE,GAAKC,GAAMd,GAGnD,CACA,OAAO,IAAI1B,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEa4C,GAAM,SAACxB,EAAYqC,GAE9B,IADA,IAAMzD,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,OACLA,EAAKsE,GAAKC,GAAOjC,KAAKM,IAAIxB,EAAGpB,KAAKsE,GAAKC,GAAO,MAGpD,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEamF,GAAc,SAAC/D,EAAYqC,GAEtC,IADA,IAAMzD,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EAClCnD,EAAGpB,OACLA,EAAKsE,GAAKC,GAAOjC,KAAKM,IAAI,EAAIxB,EAAGpB,KAAKsE,GAAKC,IAGjD,CACA,OAAO,IAAIxC,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEaoF,GAAY,SAAChE,EAAYa,GAEpC,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlD,EAAGE,KAAMgD,GAAO,EAAG,CACzCtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnD,EAAGlC,KAAMqF,GAAO,EACtCvE,EAAKsE,GAAKC,GAAOnD,EAAGpB,KAAKsE,GAAKC,GAAOtC,CAEzC,CACA,OAAO,IAAIF,GAAOX,EAAGE,KAAMF,EAAGlC,KAAMc,EACtC,EAEamE,GAAY,SAAClF,GAExB,IADA,IAAMe,EAAO,GACJuE,EAAM,EAAGA,EAAMtF,EAAEC,KAAMqF,GAAO,EAAG,CACxCvE,EAAKuE,GAAO,GACZ,IAAK,IAAID,EAAM,EAAGA,EAAMrF,EAAEqC,KAAMgD,GAAO,EACjCrF,EAAEe,OACJA,EAAKuE,GAAKD,GAAOrF,EAAEe,KAAKsE,GAAKC,GAGnC,CACA,OAAO,IAAIxC,GAAO9C,EAAEC,KAAMD,EAAEqC,KAAMtB,EACpC,EAEaqF,GAAc,a,qRAAA,U,MAAA,G,EAAA,E,+YACzB,aAAc,MA0B2B,O,4FA1B3B,UACZ,gBAEKhB,UAAU,WAAYT,GAC3B,EAAKS,UAAU,MAAOlB,GACtB,EAAKkB,UAAU,WAAYjF,IAC3B,EAAKiF,UAAU,qBAAsBO,IACrC,EAAKP,UAAU,aAAcP,IAC7B,EAAKO,UAAU,YAAaJ,IAC5B,EAAKI,UAAU,sBAAuBxB,IACtC,EAAKwB,UAAU,iBAAkBH,IACjC,EAAKG,UAAU,oBAAqBlD,GACpC,EAAKkD,UAAU,eAAgBrC,GAC/B,EAAKqC,UAAU,qBAAsBtB,GACrC,EAAKsB,UAAU,eAAgBrB,GAC/B,EAAKqB,UAAU,0BAA2BQ,GAC1C,EAAKR,UAAU,iBAAkBjB,GACjC,EAAKiB,UAAU,iBAAkBhB,GACjC,EAAKgB,UAAU,sBAAuBY,GACtC,EAAKZ,UAAU,qBAAsBd,GACrC,EAAKc,UAAU,UAAWb,GAC1B,EAAKa,UAAU,OAAQX,GACvB,EAAKW,UAAU,YAAaF,IAC5B,EAAKE,UAAU,MAAOZ,IACtB,EAAKY,UAAU,MAAOzB,IACtB,EAAKyB,UAAU,cAAec,IAC9B,EAAKd,UAAU,YAAae,IAAW,CACzC,CAAC,O,EAAA,E,oDAAA,CA5BwB,CAASxE,GC3XhC0E,GAA0C,IAAID,GAMrCE,GAAiB,WAC5B,OAAOD,EACT,E,y5BCVO,IAAMvD,GAAM,WAKjB,aAA6E,IAAjET,EAAO,UAAH,6CAAG,EAAGpC,EAAO,UAAH,6CAAG,EAAGc,EAAuC,UAAH,6CAAG,KAAI,0BAJ7D,GAAC,eACD,GAAC,eACkB,MAG/B5B,KAAKoH,OAAOlE,EAAMpC,GACdc,GACF5B,KAAKqH,aAAazF,EAEtB,C,UA4eC,O,EA5eA,E,EAAA,qBAED,SAAOsB,EAAcpC,GACnBd,KAAKkD,KAAOA,EACZlD,KAAKc,KAAOA,EACZd,KAAK4B,KAAO,GACZ,IAAK,IAAIsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxClG,KAAK4B,KAAKsE,GAAO,IAAIY,MAAM9G,KAAKc,MAGlC,OAAOd,IACT,GAAC,0BAED,SAAasH,GAEX,IADA,IAAM1F,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxCtE,EAAKsE,GAAO,IAAIY,MAAM9G,KAAKc,MAE7B,IAAK,IAAIqF,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxC,IAAK,IAAID,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAChB,iBAAboB,EAAIpB,GACbtE,EAAKsE,GAAKC,GAAOmB,EAAIpB,GACZoB,EAAIpB,aAAgBqB,cAEpBD,EAAIpB,IAAiC,iBAAlBoB,EAAIpB,GAAKC,GADrCvE,EAAKsE,GAAKC,GAAOmB,EAAIpB,GAAKC,GAGQ,iBAAlBmB,EAAIpB,GAAKC,GAEzBvE,EAAKsE,GAAKC,GAAOmB,EAAIpB,GAAKC,GAAKlF,OAASuG,OAAOF,EAAIpB,GAAKC,IAAQsB,IAEhE7F,EAAKsE,GAAKC,GAAOsB,IAKvB,OADAzH,KAAK4B,KAAOA,EACL5B,IACT,GAAC,iBAED,WAEE,IADA,IAAI0E,EAAM,EACDwB,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCzB,GAAO1E,KAAK4B,KAAKsE,GAAKC,GAG1B,OAAOzB,CACT,GAAC,wBAED,WAGE,IAFA,IAAM9C,EAAO,GACP8F,EAAI1H,KAAK+F,YACNG,EAAM,EAAGA,EAAMwB,EAAExE,KAAMgD,GAAO,EAAG,CACxCtE,EAAKsE,GAAO,CAAC,GACb,IAAK,IAAIC,EAAM,EAAGA,EAAMuB,EAAE5G,KAAMqF,GAAO,EACrCvE,EAAKsE,GAAK,IAAMwB,EAAE9F,KAAKsE,GAAKC,EAEhC,CACA,OAAO,IAAIxC,EAAO3D,KAAKc,KAAM,EAAGc,EAClC,GAAC,wBAED,WAEE,IADA,IAAMA,EAAO,CAAC,IACLsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAE3C,IADA,IAAIxB,EAAM,EACDyB,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCzB,GAAO1E,KAAK4B,KAAKsE,GAAKC,GAExBvE,EAAK,GAAGxB,KAAKsE,EACf,CACA,OAAO,IAAIf,EAAO,EAAG3D,KAAKkD,KAAMtB,EAClC,GAAC,qBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKxB,KAAKJ,KAAK4B,KAAKsE,GAAKC,IAG7B,OAAOvE,CACT,GAAC,uBAED,SAAUsB,EAAcpC,GACtB,GAAa,IAAToC,GAA4B,IAAdlD,KAAKc,MAAcA,EAAO,EAAG,CAE7C,IADA,IAAM6G,EAAU,GACPzB,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CyB,EAAQzB,GAAO,GACf,IAAK,IAAIC,EAAM,EAAGA,EAAMrF,EAAMqF,GAAO,EACnCwB,EAAQzB,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAK,EAEvC,CACA,OAAOvC,EAAOiE,KAAKD,EACrB,CAAO,GAAa,IAAT7G,GAA4B,IAAdd,KAAKkD,MAAcA,EAAO,EAAG,CAEpD,IADA,IAAMyE,EAAU,GACPzB,EAAM,EAAGA,EAAMhD,EAAMgD,GAAO,EAAG,CACtCyB,EAAQzB,GAAO,GACf,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCwB,EAAQzB,GAAKC,GAAOnG,KAAK4B,KAAK,GAAGuE,EAErC,CACA,OAAOxC,EAAOiE,KAAKD,EACrB,CACA,OAAO3H,IACT,GAAC,uBAED,WACE,OAAOmH,KAAiBU,QAAQ,YAAa7H,KAC/C,GAAC,8BAED,SAAiBmG,GAIf,IAHA,IAAI2B,GAAY,EACZ5C,GAAM,IAEDgB,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACpClG,KAAK4B,MAAQ5B,KAAK4B,KAAKsE,GAAKC,GAAOjB,IACrCA,EAAMlF,KAAK4B,KAAKsE,GAAKC,GACrB2B,EAAW5B,GAIf,OAAO4B,CACT,GAAC,8BAED,SAAiB5B,GAIf,IAHA,IAAI4B,GAAY,EACZ5C,GAAM,IAEDiB,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACpCnG,KAAK4B,KAAKsE,GAAKC,GAAOjB,IACxBA,EAAMlF,KAAK4B,KAAKsE,GAAKC,GACrB2B,EAAW3B,GAIf,OAAO2B,CACT,GAAC,mBAED,SAAMC,EAAkBC,EAAkBC,EAAmBC,GAG3D,IAFA,IAAMtG,EAAO,GAEJsE,EAAM6B,EAAUI,EAAS,EAAGjC,EAAMlG,KAAKkD,MAAQgD,EAAM6B,EAAWE,EAAW/B,GAAO,EAAGiC,GAAU,EAAG,CACzGvG,EAAKuG,GAAU,IAAIrB,MAAMoB,GACzB,IAAK,IAAI/B,EAAM6B,EAAUI,EAAS,EAAGjC,EAAMnG,KAAKc,MAAQqF,EAAM6B,EAAWE,EAAW/B,GAAO,EAAGiC,GAAU,EACtGxG,EAAKuG,GAAQC,GAAUpI,KAAK4B,KAAKsE,GAAKC,EAE1C,CAEA,OAAO,IAAIxC,EAAOsE,EAAWC,EAAWtG,EAC1C,GAAC,iBAED,SAAIuE,GAEF,IADA,IAAMvE,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxCtE,EAAKsE,GAAO,CAAClG,KAAK4B,KAAKsE,GAAKC,IAE9B,OAAO,IAAIxC,EAAO3D,KAAKkD,KAAM,EAAGtB,EAClC,GAAC,iBAED,SAAIsE,GAEF,IADA,IAAMtE,EAAO,GACJuE,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKuE,GAAO,CAACnG,KAAK4B,KAAKsE,GAAKC,IAE9B,OAAO,IAAIxC,EAAO3D,KAAKc,KAAM,EAAGc,EAClC,GAAC,oBAED,SAAOuE,EAAakC,GAClB,IAAK,IAAInC,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACpClG,KAAK4B,MAAQyG,EAAIzG,OACnB5B,KAAK4B,KAAKsE,GAAKC,GAAOkC,EAAIzG,KAAKsE,GAAK,IAGxC,OAAOlG,IACT,GAAC,qBAED,WACE,OAAOA,KAAK2G,UAAU,GAAGxC,MAAMY,IAAI,GAAGuD,SAAS,EACjD,GAAC,6BAED,WAGE,IAFA,IAAM1G,EAAO,GACT2G,EAAO,EACFrC,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAK2G,GAAQ,GACb3G,EAAK2G,KAAQ,GAAKvI,KAAK4B,KAAKsE,GAAKC,GAGrC,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,iBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKsE,IAAIxI,KAAK4B,KAAKsE,GAAKC,GAE7C,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,kBAED,WAIE,IAHA,IAAI8C,EAAM,EACJ+D,EAAmBzI,KAAKkD,KAAOlD,KAAKc,KAEjCoF,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCzB,GAAO1E,KAAK4B,KAAKsE,GAAKC,GAI1B,OAAOzB,EAAM+D,CACf,GAAC,iBAED,WAEE,IADA,IAAIvD,GAAM,IACDgB,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCjB,EAAMhB,KAAKgB,IAAIlF,KAAK4B,KAAKsE,GAAKC,GAAMjB,GAGxC,OAAOA,CACT,GAAC,oBAED,SAAOA,GAEL,IADA,IAAMtD,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKwE,IAAI1I,KAAK4B,KAAKsE,GAAKC,GAAMjB,EAEnD,CACA,OAAOvB,EAAOiE,KAAKhG,EACrB,GAAC,oBAED,SAAO8G,GAEL,IADA,IAAM9G,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKgB,IAAIlF,KAAK4B,KAAKsE,GAAKC,GAAMuC,EAEnD,CACA,OAAO/E,EAAOiE,KAAKhG,EACrB,GAAC,sBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAO,CAErB,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,qBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAO,CAErB,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,uBAED,WAEE,IAFuC,IAA/B+D,EAAoB,UAAH,6CAAG,EACtB/D,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,IAAwB,EAAhBjC,KAAK0B,SAAe,GAAK1B,KAAKoB,KAAK,EAAIK,EAE7D,CACA,OAAOhC,EAAOiE,KAAKhG,EACrB,GAAC,sBAED,WAEE,IAFgC,IAAzBiC,EAAc,UAAH,6CAAG,EACfjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOtC,EAAM7D,KAAK4B,KAAKsE,GAAKC,EAE1C,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,kBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKoB,KAAKtF,KAAK4B,KAAKsE,GAAKC,GAAO,KAErD,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,iBAED,SAAIf,GACF,OAAOsG,KAAiBU,QAAQ,WAAY7H,KAAMa,EACpD,GAAC,sBAED,SAASgD,GACP,GAAmB,iBAARA,EAAkB,CAE3B,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EAExCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtC,CAE3C,CACA,OAAOF,EAAOiE,KAAKhG,EACrB,CACE,GAAIiC,EAAIX,OAASlD,KAAKkD,MAAQlD,KAAKc,OAAS+C,EAAI/C,KAC9C,MAAM,IAAI8B,MAAM,oBAAD,OAAqB5C,KAAK2I,QAAO,gBAAQ9E,EAAI8E,UAG9D,IADA,IAAM/G,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EAExCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtC,EAAIjC,KAAKsE,GAAKC,EAEzD,CACA,OAAOxC,EAAOiE,KAAKhG,EAEvB,GAAC,sBAED,SAASf,GACP,GAAIA,aAAa8C,EAAQ,CACvB,GAAI3D,KAAKkD,OAASrC,EAAEqC,MAAQlD,KAAKc,OAASD,EAAEC,KAC1C,MAAM,IAAI8B,MAAM,qBAAD,OAAsB5C,KAAKkD,KAAI,aAAKlD,KAAKc,KAAI,gBAAQD,EAAEqC,KAAI,aAAKrC,EAAEC,OAGnF,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtF,EAAEe,KAAKsE,GAAKC,EAEvD,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,CAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtF,CAE3C,CACA,OAAO8C,EAAOiE,KAAKhG,EAEvB,GAAC,qBAED,SAAQgH,GAEN,IADA,IAAMhH,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOyC,EAAG5I,KAAK4B,KAAKsE,GAAKC,GAEvC,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,mBAED,WACE,MAAO,CAAC5B,KAAKkD,KAAMlD,KAAKc,KAC1B,GAAC,oBAED,SAAO+C,GACL,GAAmB,iBAARA,EAAkB,CAE3B,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtC,CAE3C,CACA,OAAOF,EAAOiE,KAAKhG,EACrB,CACE,GAAIiC,EAAIX,OAASlD,KAAKkD,MAAQW,EAAI/C,OAASd,KAAKc,KAC9C,MAAM,IAAI8B,MAAM,qBAAD,OAAsB5C,KAAKkD,KAAI,aAAKlD,KAAKc,KAAI,kBAAU+C,EAAIX,KAAI,aAAKW,EAAI/C,KAAI,MAG7F,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtC,EAAIjC,KAAKsE,GAAKC,EAEzD,CACA,OAAOxC,EAAOiE,KAAKhG,EAEvB,GAAC,sBAED,WAEE,IADA,IAAMA,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAO,EAAInG,KAAK4B,KAAKsE,GAAKC,EAExC,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,gCAED,SAAmBiC,GAEjB,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOtC,EAAM7D,KAAK4B,KAAKsE,GAAKC,EAE1C,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,iBAED,SAAIf,GACF,GAAiB,iBAANA,EAAgB,CAEzB,IADA,IAAMe,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtF,CAE3C,CACA,OAAO8C,EAAOiE,KAAKhG,EACrB,CAAO,GAAIf,aAAa8C,EAAQ,CAC9B,GAAI9C,EAAEqC,OAASlD,KAAKkD,MAAQrC,EAAEC,OAASd,KAAKc,KAC1C,MAAM,IAAI8B,MAAM,6BAAD,OAA8B5C,KAAKkD,KAAI,gBAAQlD,KAAKc,KAAI,qBAAaD,EAAEqC,KAAI,gBAAQrC,EAAEC,KAAI,MAG1G,IADA,IAAMc,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOnG,KAAK4B,KAAKsE,GAAKC,GAAOtF,EAAEe,KAAKsE,GAAKC,EAEvD,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,CACA,OAAO5B,IACT,GAAC,iBAED,WAEE,IADA,IAAM4B,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKM,IAAIxE,KAAK4B,KAAKsE,GAAKC,GAAO,KAEpD,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,kBAED,WACE,OAAO5B,KAAKmE,MACTnD,SAAShB,KAAK2G,UAAU,GAAGxC,OAC3B0E,OAAO7I,KAAKmE,MAAMY,IAAI/E,KAAK2G,UAAU,GAAGxC,OAC7C,GAAC,qBAED,WACE,IAAMe,EAAMlF,KAAKkF,MAAQ,KACzB,OAAOlF,KAAKgB,SAASkE,GAAKf,MAAM0E,OAAO7I,KAAK8I,aAAaxE,UAAUtE,KAAKc,KAAM,GAAGiF,YACnF,GAAC,iBAED,WAEE,IADA,IAAMnE,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKC,IAAInE,KAAK4B,KAAKsE,GAAKC,GAAO,KAEpD,CACA,OAAOxC,EAAOiE,KAAKhG,EACrB,GAAC,iBAED,SAAIiC,GAEF,IADA,IAAMjC,EAAO,GACJsE,EAAM,EAAGA,EAAMlG,KAAKkD,KAAMgD,GAAO,EAAG,CAC3CtE,EAAKsE,GAAO,GACZ,IAAK,IAAIC,EAAM,EAAGA,EAAMnG,KAAKc,KAAMqF,GAAO,EACxCvE,EAAKsE,GAAKC,GAAOjC,KAAKmB,IAAIrF,KAAK4B,KAAKsE,GAAKC,GAAMtC,EAEnD,CACA,OAAOF,EAAOiE,KAAKhG,EACrB,I,EAAC,mBAED,SAAY0F,GAAyB,MACnC,OAAO,IAAI3D,EAAO2D,EAAIrG,QAAc,QAAN,EAAAqG,EAAI,UAAE,aAAN,EAAQrG,SAAU,EAAGqG,EACrD,I,mFAAC,EAtfgB,G,g1DCEZ,ICQKyB,GAAAA,GDRCC,GAAU,WAKrB,WAAYjJ,I,4FAAuB,8BAJa,MAAI,eACrC,GAAC,iBACc,IAG5BC,KAAKD,WAAaA,CACpB,C,QA2IA,O,EA3IC,G,EAAA,uBAED,SAASE,GAIP,OAHAD,KAAKE,OACLF,KAAKG,OAAOC,KAAKH,GAEVD,IACT,GAAC,uBAED,WACE,OAAOA,KAAKG,MACd,GAAC,kBAED,SAAK8I,EAAwBC,GAC3B,OAAQhF,KAAKM,IAAI,EAAIyE,GAAkBC,CACzC,GAAC,oBAED,SAAOC,GAiBL,IAhBA,IAAMC,EAAMpJ,KAAKG,OAAO,GAAGiJ,IACrBC,EAAMrJ,KAAKG,OAAO,GAAGkJ,IACrBC,EAAMtJ,KAAKG,OAAO,GAAGmJ,IACrBC,EAAKvJ,KAAKG,OAAO,GAAGoJ,GACpB1H,EAAI7B,KAAKG,OAAO,GAAG0B,EACnB2H,EAAU,GACVC,EAAcN,EAAQO,iBACtBC,EAAmBF,EAAY,MAC/BG,EAAQT,EAAQU,WAElBrG,EAAI,IAAIG,GAAO3D,KAAKD,WAAW,GAAI,GAAG+J,WACtCC,EAAQ,IAAIpG,GAAO3D,KAAKD,WAAW,GAAI,GAAGiK,UAAUhK,KAAKD,WAAW,IAEpEkK,GAAO,EACPC,EAAU,EAEPD,GAAON,GAA+B,IAAXO,GAAe,CAC/C,IAAM5G,EAAI+F,EAAI7D,IAAIhC,GAAGuB,IAAIqE,EAAI5D,IAAIuE,IAAQhF,IAAIlD,GAAGsI,OAAO,MAAMC,OAEvD3G,EADI6F,EAAI9D,IAAIlC,GAAGyB,IAAIwE,GACbc,UAEZJ,EAAMR,EAAYG,EAAMnG,EAAE6G,iBAAiB,KAC3C9G,EAAI,IAAIG,GAAO3D,KAAKD,WAAW,GAAI,GAAG+J,WACtC,IAAIhC,EAAWrE,EAAE6G,iBAAiB,IAChB,IAAdxC,IACFA,EAAW5D,KAAKqG,MAAMrG,KAAK0B,SAAW5F,KAAKD,WAAW,IACtDkK,EAAMR,EAAYG,EAAM9B,KAE1BtE,EAAE5B,KAAKkG,GAAU,GAAK,EAEtB0B,EAAQpJ,KAAK6J,GACbF,EAAQzG,EAER4G,GAAW,CACb,CAMA,OAJgB,KAAZA,GACFV,EAAQpJ,KAAKuJ,GAGRH,EACJgB,KAAI,SAAC/E,GACJ,OAAOmE,EAAMnE,EACf,IACCgF,KAAK,GACV,GAAC,qBAED,SAAQhK,EAAWC,EAAWgK,GAK5B,IAJA,IAAMlH,EAAI,CAAC,MACLF,EAAI,CAACoH,GACLC,EAAO,CAAC,MACVC,EAAO,EACFlD,EAAI,EAAGA,GAAKjH,EAAEyC,KAAMwE,GAAK,EAAG,CACnClE,EAAEkE,GAAK,IAAI/D,GAAO3D,KAAKD,WAAW,GAAIC,KAAKD,WAAW,IAAI+J,WAC1DtG,EAAEkE,GAAG9F,KAAKnB,EAAEmB,KAAK8F,EAAI,GAAG,IAAI,GAAK,EACjC,IAA0D,KAAtC1H,KAAKG,OAAO,GAAGK,QAAQgD,EAAEkE,GAAIpE,EAAEoE,EAAI,IAAG,GAAnDmD,EAAE,KAAEC,EAAK,KAChBxH,EAAEoE,GAAKmD,EACPF,EAAKjD,GAAKoD,EACVF,GAAQ,CACV,CAIA,OAHA5K,KAAKG,OAAO,GAAG4K,EAAIzH,EACnBtD,KAAKG,OAAO,GAAGM,EAAI+C,EACnBxD,KAAKG,OAAO,GAAGO,EAAIiK,EACZ,CAACC,EACV,GAAC,sBAED,SAASnK,GAYP,IAXA,IAAM6C,EAAItD,KAAKG,OAAO,GAAG4K,EACnBvH,EAAIxD,KAAKG,OAAO,GAAGM,EAGrBuK,GAFShL,KAAKG,OAAO,GAAGO,EAEhB,IAAIiD,GAAO3D,KAAKG,OAAO,GAAGkJ,IAAInG,KAAMlD,KAAKG,OAAO,GAAGkJ,IAAIvI,MAAMgJ,YACrEmB,EAAQ,IAAItH,GAAO3D,KAAKG,OAAO,GAAGiJ,IAAIlG,KAAMlD,KAAKG,OAAO,GAAGiJ,IAAItI,MAAMgJ,WACrEoB,EAAQ,IAAIvH,GAAO3D,KAAKG,OAAO,GAAGmJ,IAAIpG,KAAMlD,KAAKG,OAAO,GAAGmJ,IAAIxI,MAAMgJ,WACrEqB,EAAM,IAAIxH,GAAO3D,KAAKG,OAAO,GAAGiL,GAAGlI,KAAMlD,KAAKG,OAAO,GAAGiL,GAAGtK,MAAMgJ,WACjEuB,EAAO,IAAI1H,GAAO3D,KAAKG,OAAO,GAAGmL,IAAIpI,KAAMlD,KAAKG,OAAO,GAAGmL,IAAIxK,MAAMgJ,WACpEyB,EAAU,IAAI5H,GAAO3D,KAAKG,OAAO,GAAGqL,OAAOtI,KAAMlD,KAAKG,OAAO,GAAGqL,OAAOtI,MAAM4G,WAExEpC,EAAIjH,EAAEyC,KAAO,EAAGwE,GAAK,EAAGA,GAAK,EAAG,CAEvC,IAAM+D,EAAK9H,GAAAA,KAAYL,EAAEoE,GAAG9F,MAC5B6J,EAAG7J,KAAKnB,EAAEmB,KAAK8F,EAAI,GAAG,IAAI,IAAM,EAChC,MAA8C1H,KAAKG,OAAO,GAAGuL,SAASD,EAAIjI,EAAEkE,GAAIpE,EAAEoE,GAAIpE,EAAEoE,EAAI,IAApFiE,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAMT,EAAE,EAAFA,GAAIE,EAAG,EAAHA,IAAKE,EAAM,EAANA,OACnCR,EAAQA,EAAMjG,IAAI4G,EAAKrH,UAAU,EAAG0G,EAAMlK,OAC1CmK,EAAQA,EAAMlG,IAAI8G,EAAKvH,UAAU,EAAG2G,EAAMnK,OAC1CoK,EAAQA,EAAMnG,IAAI6G,GAClBT,EAAMA,EAAIpG,IAAIqG,GACdC,EAAOA,EAAKtG,IAAIuG,GAChBC,EAAUA,EAAQxG,IAAIyG,EACxB,CAGAxL,KAAKG,OAAO,GAAGwL,KAAOX,EAAMb,QAAQ,GAAG2B,OAAO,GAC9C9L,KAAKG,OAAO,GAAG0L,KAAOZ,EAAMd,QAAQ,GAAG2B,OAAO,GAC9C9L,KAAKG,OAAO,GAAGyL,KAAOV,EAAMf,QAAQ,GAAG2B,OAAO,GAC9C9L,KAAKG,OAAO,GAAGiL,GAAKC,EAAKlB,QAAQ,GAAG2B,OAAO,GAC3C9L,KAAKG,OAAO,GAAGmL,IAAMD,EAAKlB,QAAQ,GAAG2B,OAAO,GAC5C9L,KAAKG,OAAO,GAAGqL,OAASD,EAAQpB,QAAQ,GAAG2B,OAAO,EACpD,GAAC,sBAED,SAASrL,EAAWC,EAAWqJ,EAAegC,GAC5C,IAAOnB,EAAiC,GAAzB5K,KAAKQ,QAAQC,EAAGC,EAAGqJ,GAAM,GAA7B,GAaX,OAZA/J,KAAK0L,SAASjL,GAEdT,KAAKG,OAAO,GAAGkJ,IAAMrJ,KAAKG,OAAO,GAAGkJ,IAAItE,IACtC/E,KAAKG,OAAO,GAAGwL,KAAKrH,UAAU,EAAGtE,KAAKgM,gBAAgB,IAAIrF,UAAUoF,IAEtE/L,KAAKG,OAAO,GAAGiJ,IAAMpJ,KAAKG,OAAO,GAAGiJ,IAAIrE,IAAI/E,KAAKG,OAAO,GAAG0L,KAAKlF,UAAUoF,IAC1E/L,KAAKG,OAAO,GAAGmJ,IAAMtJ,KAAKG,OAAO,GAAGmJ,IAAIvE,IAAI/E,KAAKG,OAAO,GAAGyL,KAAKjF,UAAUoF,IAMnE,CAACnB,EAAM5K,KAAKG,OAAO,GAAG4K,EAAEtK,EAAEyC,KAAO,GAC1C,GAAC,2BAED,WACE,OAAOlD,KAAKD,UACd,M,qEAEA,EAlJqB,G,06BCQXgJ,GAAAA,KAAAA,GAAS,yBAATA,GAAS,kBAATA,GAAS,YAATA,GAAS,YAATA,GAAS,oBAATA,GAAS,YAATA,GAAS,kBAATA,GAAS,gCAATA,GAAS,kBAATA,GAAS,oBCTd,IAAekD,GAAuB,IAI3C,WAAYhM,EAAsBiM,I,4FAAuB,yBAHxB,MAAI,wBACI,MAGvClM,KAAKC,MAAQA,EACbD,KAAKkM,cAAgBA,CACvB,I,4zCCLK,IAAMC,GAAqB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDA6B/B,O,EA7B+B,G,EAAA,wBAChC,SAAU9L,EAAe+L,EAA0BxL,EAAwBX,EAAec,GACxF,IAAMsL,EAA6C,OAAvBrM,KAAKkM,cAAyBlM,KAAKkM,cAAcnB,EAAI1K,EAE3EiM,EAAQvL,EAAMyE,IAAI6G,EAAoBtG,aAI5C,GAHA/F,KAAKC,MAAMsM,GAAKD,EAAMzD,OAAOuD,GAAkBrH,IAAI9E,EAAM0B,EAAEgF,SAAS/F,EAAiBwL,IACrFpM,KAAKC,MAAMuM,GAAKzL,EAAM+H,aAAa/C,YAAY8C,OAAOuD,GAE3B,OAAvBpM,KAAKkM,cAAwB,CAE/B,IAAMpK,EAAS9B,KAAKC,MAAM0B,EAAEoE,YAAYP,IAAIzE,GAC5C,GAAIe,EAAOoB,OAASmJ,EAAoBnJ,MAAQpB,EAAOhB,OAASuL,EAAoBvL,KAClF,MAAM,IAAI8B,MAAM,uBAAD,OACUd,EAAOoB,KAAI,aAAKpB,EAAOhB,KAAI,gBAAQuL,EAAoBnJ,KAAI,aAAKmJ,EAAoBvL,KAAI,MAGnH,GAAId,KAAKC,MAAMsM,GAAGrJ,OAASlD,KAAKC,MAAM0B,EAAEuB,MAAQlD,KAAKC,MAAMsM,GAAGzL,OAASd,KAAKC,MAAM0B,EAAEb,KAClF,MAAM,IAAI8B,MAAM,uBAAD,OACU5C,KAAKC,MAAMsM,GAAGrJ,KAAI,aAAKlD,KAAKC,MAAMsM,GAAGzL,KAAI,gBAAQd,KAAKC,MAAM0B,EAAEuB,KAAI,aAAKlD,KAAKC,MAAM0B,EAAEb,KAAI,MAGnH,GAAId,KAAKC,MAAMuM,GAAGtJ,OAASlD,KAAKC,MAAM4B,EAAEqB,MAAQlD,KAAKC,MAAMuM,GAAG1L,OAASd,KAAKC,MAAM4B,EAAEf,KAClF,MAAM,IAAI8B,MAAM,uBAAD,OACU5C,KAAKC,MAAMuM,GAAGtJ,KAAI,aAAKlD,KAAKC,MAAMuM,GAAG1L,KAAI,gBAAQd,KAAKC,MAAM4B,EAAEqB,KAAI,aAAKlD,KAAKC,MAAM4B,EAAEf,KAAI,MAGnH,OAAOgB,CACT,CACA,OAAO,IAAI6B,EACb,M,qEAAC,EA7B+B,CAASsI,I,4zCCDpC,IAAMQ,GAAqB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAG/B,O,EAH+B,G,EAAA,wBAChC,SAAUpM,EAAe+L,EAA0BxL,EAAwBX,EAAec,GACxF,OAAOA,CACT,M,qEAAC,EAH+B,CAASkL,I,i9CCCpC,IAAMS,GAAwB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACY,OADZ,0DACQ,MAAI,EAsD9C,O,EAtD8C,G,EAAA,wBAE/C,SAAUrM,EAAe+L,EAA0BxL,EAAwBX,EAAec,GACxF,IAAM4L,EAAY3M,KAAKkM,cACvB,GAAIS,EAAW,CAYb,IAXA,IAAM7K,EAASqF,KAAiBU,QAAQ,YAAa,IAAIlE,GAAOgJ,EAAUC,EAAE1J,KAAMyJ,EAAUC,EAAE9L,OAExF+L,EAAaF,EAAUG,gBACvBC,EAASJ,EAAUK,YACnBC,EAAaN,EAAUO,WACvBC,EAAcR,EAAUS,YAExBC,GADaV,EAAUW,WACTX,EAAUY,kBACxBC,EAAeb,EAAUc,kBACzBC,EAAcf,EAAUgB,iBAErB9M,EAAI,EAAGA,EAAIuL,EAAkBvL,IACpC,IAAK,IAAI+M,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAYpC,IAXA,IAEMC,EAAahB,EAASe,EAGxBE,GAAO,IACLC,EAAcd,EAAcF,EAAaW,EACzCM,EAAeV,EAAeH,EAAcO,EAC9CO,EAAO,EACPC,EAAO,EAEF3K,EAAI,EAAG4K,EAXEtB,EAASc,EAWSpK,EAAIoJ,EAAYpJ,IAAK4K,IACvD,IAAK,IAAI7K,EAAI,EAAG8K,EAASP,EAAYvK,EAAIqJ,EAAYrJ,IAAK8K,IACpD3B,EAAUC,EAAEhL,MAAQoM,EAAOrB,EAAUC,EAAEhL,KAAKqM,EAAcI,EAASpB,EAAaqB,GAAQzN,KAC1FmN,EAAOrB,EAAUC,EAAEhL,KAAKqM,EAAcI,EAASpB,EAAaqB,GAAQzN,GACpEsN,EAAOG,EACPF,EAAOC,GAKTvM,EAAOF,MAAQb,EAAMa,OACvBE,EAAOF,KAAKqM,EAAcG,EAAOnB,EAAakB,GAAMtN,GAClDE,EAAMa,KAAKsM,EAAeL,EAAIR,EAAcS,GAAGjN,GAErD,CAKN,OAAOiB,CACT,CAEA,OAAO,IAAI6B,EACb,M,qEAAC,EAvDkC,CAASsI,I,i9CCAvC,IAAMsC,GAAqB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACe,OADf,0DACW,MAAI,EAqH9C,O,EArH8C,G,EAAA,wBAE/C,SAAUlO,EAAe+L,EAA0BxL,EAAwBX,EAAec,GACxF,IAAMmL,EAAgBlM,KAAKkM,cAE3B,GAAIA,EAAe,CACjB,IAAMsC,EAAUtC,EAAcuC,aACxB1B,EAASb,EAAcc,YACvBH,EAAaX,EAAcY,gBAC3BO,EAAcnB,EAAcqB,iBAC5BC,EAAetB,EAAcuB,kBAC7BC,EAAcxB,EAAcyB,iBAC5BV,EAAaf,EAAcgB,WAC3BC,EAAcjB,EAAckB,YAC5BsB,EAAaxC,EAAcoB,WAE3BqB,EAAYxH,KAAiBU,QACjC,YACA,IAAIlE,IAAQsJ,EAAa,EAAIuB,IAAYrB,EAAc,EAAIqB,GAAWE,EAAYtC,IAG9EtK,EAAS,IAAI6B,GAAOsJ,EAAaE,EAAcuB,EAAYtC,GAEjEF,EAAcK,GAAKpF,KAAiBU,QAAQ,YAAaqE,EAAcK,IACvEL,EAAcM,GAAKrF,KAAiBU,QAAQ,YAAaqE,EAAcM,IAEvE,IAAK,IAAI3L,EAAI,EAAGA,EAAIuL,EAAkBvL,IAAK,CACzC,IAAK,IAAI+M,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAOpC,IANA,IAAMc,EAAY7B,EAASc,EAErBE,EAAahB,EAASe,EAInBe,EAAI,EAAGA,EAAIH,EAAYG,IAC9B,IACE,IAAIpL,EAAI,EAAGqL,EAAWF,EAAWG,GAAeP,EAChD/K,EAAIoJ,EACJpJ,IAAKqL,IAAYC,IAEjB,IACE,IAAIvL,EAAI,EAAGwL,EAAajB,EAAYkB,GAAiBT,EACrDhL,EAAIqJ,EACJrJ,IAAKwL,IAAcC,IACnB,CACI/C,EAAcvK,EAAEC,MAAQ+M,EAAU/M,MAAQb,EAAMa,OAClD+M,EAAU/M,KACRiN,GAAK5B,EAAa,EAAIuB,IAAYrB,EAAc,EAAIqB,GAClDM,GAAY7B,EAAa,EAAIuB,GAC7BQ,GACFnO,IACAqL,EAAcvK,EAAEC,KAAKgM,GAAGiB,EAAIhC,EAAaA,EAAapJ,EAAIoJ,EAAarJ,GACvEzC,EAAMa,KAAKgM,EAAIP,EAAcG,EAAeK,EAAIR,EAAcS,GAAGjN,IAGrE,IAAIqO,EAAI,EACO,GAAXV,EACEtC,EAAcU,EAAEhL,OAClBsN,EAAIhD,EAAcU,EAAEhL,KAAKiN,EAAI5B,EAAaE,EAAc2B,EAAW7B,EAAa+B,GAAYnO,IAI5FkO,GAAe,GACfE,GAAiB,GACjBF,EAAc5B,GACd8B,EAAgBhC,GAEZf,EAAcU,EAAEhL,OAClBsN,EACEhD,EAAcU,EAAEhL,KACdiN,EAAI5B,EAAaE,EAAc4B,EAAc9B,EAAagC,GAC1DpO,IAKNqL,EAAcK,GAAG3K,MAAQb,EAAMa,OACjCsK,EAAcK,GAAG3K,KAAKgM,GAAGiB,EAAIhC,EAAaA,EAAapJ,EAAIoJ,EAAarJ,IACrE0L,EAAInO,EAAMa,KAAKgM,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GAAGjN,GAAMuL,EAEpF,CAIAF,EAAcM,GAAG5K,MAAQb,EAAMa,OACjCsK,EAAcM,GAAG5K,KAAKgM,GAAG,IACvB7M,EAAMa,KAAKgM,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GAAGjN,GAAKuL,EAE9E,CAIJ,GAAIoC,EAAU,EAEZ,IAAK,IAAIZ,EAAI,EAAGA,EAAIc,EAAYd,IAC9B,IAAK,IAAIC,GAAKW,EAAS/K,EAAI,EAAGoK,EAAIV,EAAcqB,EAASX,IAAKpK,IAC5D,IAAK,IAAIqK,GAAKU,EAAShL,EAAI,EAAGsK,EAAIb,EAAauB,EAASV,IAAKtK,IACvDsK,GAAK,GAAKD,GAAK,GAAKC,EAAIb,GAAcY,EAAIV,GAAerL,EAAOF,MAAQ+M,EAAU/M,OACpFE,EAAOF,KAAKgM,EAAIX,EAAaE,EAAcU,EAAIZ,EAAaa,GAAGjN,GAC7D8N,EAAU/M,KACRgM,GAAKX,EAAa,EAAIuB,IAAYrB,EAAc,EAAIqB,GAAW/K,GAAKwJ,EAAa,EAAIuB,GAAWhL,GAChG3C,GAMhB,CAEA,OAAI2N,EAAU,EACL1M,EAGF6M,CACT,CACF,M,qEAAC,EAtH+B,CAAS1C,I,0qBCEpC,IAAMkD,GAAsB,yB,4FAAA,S,QAkBhC,O,EAlBgC,E,EAAA,qBACjC,SAAcjD,EAAuBjM,GACnC,GAAqB,MAAjBiM,EAAuB,CACzB,GAAIjM,EAAMmP,OACR,OAAO,IAAIjD,GAAsBlM,EAAOiM,GACnC,GAAIjM,EAAMuB,WAAauH,GAAAA,KAC5B,OAAO,IAAI0D,GAAsBxM,EAAOiM,EAE5C,KAAO,CACL,GAAIA,EAAc1K,WAAauH,GAAAA,QAC7B,OAAO,IAAI2D,GAAyBzM,EAAOiM,GACtC,GAAIA,EAAc1K,WAAauH,GAAAA,KACpC,OAAO,IAAIwF,GAAsBtO,EAAOiM,GACnC,GAAIA,EAAckD,QAAUlD,EAAc1K,WAAauH,GAAAA,eAC5D,OAAO,IAAIoD,GAAsBlM,EAAOiM,EAE5C,CACA,OAAO,IACT,IAlBiC,M,eAAA,M,8DAkBhC,EAlBgC,G,0zBCLsD,IAE1EmD,GAAsB,WAKnC,WAAYC,I,4FAAsB,8BAJO,MAAI,oBACR,MAAI,kBACL,MAGlCtP,KAAKD,WAAauP,EAClBtP,KAAKuP,QAAU,IAAIzP,EAAQwP,EAC7B,C,QA4BC,O,EA5BA,E,EAAA,0BAED,SAAYE,GAA6F,IAAzEC,EAA2C,UAAH,6CAAG,KAEnExP,EAAgB,IAAIuP,EAmB1B,MAjBwB,mBAAbC,GACTA,EAASxP,GAGY,OAAnBD,KAAK0P,UACP1P,KAAK2P,qBAAqB1P,GAG1BA,EAAM2P,WAAW5P,KAAK0P,WAGxBzP,EAAM4P,YACN5P,EAAM6P,mBAAmBX,GAAuBY,OAAO/P,KAAK0P,UAAWzP,IAEvED,KAAKuP,QAAQS,SAAS/P,GACtBD,KAAK0P,UAAYzP,EAEVD,IACT,GAAC,wBAED,WACE,OAAOA,KAAKuP,OACd,I,wEAAC,EApCkC,G,8zBCCtBU,GAAa,WAO1B,c,4FAAc,yBANI,GAAC,iBACA,GAAC,gBACF,GAAC,wBACsB,MAAI,0BACe,KAE7C,C,QAqDd,O,EArDe,G,EAAA,iCAEhB,SAAmBC,GAEjB,OADAlQ,KAAKkQ,gBAAkBA,EAChBlQ,IACT,GAAC,gCAED,WACE,OAAOA,KAAKkQ,eACd,GAAC,sBAED,SAAStQ,GAEP,OADAI,KAAKmQ,MAAQvQ,EACNI,IACT,GAAC,sBAED,WACE,OAAOA,KAAKmQ,KACd,GAAC,uBAED,SAAUvQ,GAER,OADAI,KAAKoQ,OAASxQ,EACPI,IACT,GAAC,uBAED,WACE,OAAOA,KAAKoQ,MACd,GAAC,sBAED,SAASxQ,GAEP,OADAI,KAAKqQ,MAAQzQ,EACNI,IACT,GAAC,sBAED,WACE,OAAOA,KAAKqQ,KACd,GAAC,wBAcD,SAAWnE,GAET,OADAlM,KAAKkM,cAAgBA,EACdlM,IACT,M,qEAAC,EA5DyB,G,ukDCHY,IAGzBsQ,GAAe,a,sRAAA,U,QAAA,G,EAAA,E,kZAgB5B,aAAc,M,IAaW,O,4FAbX,S,EACJ,GAAR,gBAhBgB,G,OAgBR,Y,mCAhBQ,E,iDAAA,EAiBhB,EAAK3O,EAAI,IAAIgC,GACb,EAAK9B,EAAI,IAAI8B,GACb,EAAKoH,EAAI,IAAIpH,GACb,EAAKiJ,EAAI,IAAIjJ,GACb,EAAK4I,GAAK,IAAI5I,GACd,EAAK6I,GAAK,IAAI7I,GACd,EAAK4M,GAAK,IAAI5M,GACd,EAAK6M,GAAK,IAAI7M,GACd,EAAK8M,GAAK,IAAI9M,GACd,EAAK+M,GAAK,IAAI/M,GACd,EAAKgN,GAAK,IAAIhN,GACd,EAAKyH,GAAK,IAAIzH,GAAS,CACzB,CAoFC,O,EApFA,G,EAAA,wBAED,WACE3D,KAAK2B,EAAEyF,OAAOpH,KAAKoN,YAAapN,KAAKkN,YACrClN,KAAK2B,EAAI3B,KAAK2B,EAAEqI,UAAUhK,KAAKkM,cAAiBlM,KAAKkM,cAAckB,YAAyBpN,KAAKoN,aAEjGpN,KAAK6B,EAAEuF,OAAOpH,KAAKoN,YAAa,GAChCpN,KAAK6B,EAAI7B,KAAK6B,EAAEmI,UAAUhK,KAAKkM,cAAiBlM,KAAKkM,cAAckB,YAAyBpN,KAAKoN,aAEjGpN,KAAKuM,GAAGnF,OAAOpH,KAAKoN,YAAapN,KAAKkN,YACtClN,KAAKuM,GAAKvM,KAAK2B,EAAEmI,WAEjB9J,KAAKwM,GAAGpF,OAAOpH,KAAKoN,YAAa,GACjCpN,KAAKwM,GAAKxM,KAAKwM,GAAG1C,WAElB9J,KAAKyQ,GAAGrJ,OAAOpH,KAAKoN,YAAapN,KAAKkN,YACtClN,KAAKyQ,GAAKzQ,KAAKyQ,GAAG3G,WAElB9J,KAAK0Q,GAAGtJ,OAAOpH,KAAKoN,YAAa,GACjCpN,KAAK0Q,GAAK1Q,KAAK0Q,GAAG5G,WAElB9J,KAAKuQ,GAAGnJ,OAAOpH,KAAKoN,YAAapN,KAAKkN,YACtClN,KAAKuQ,GAAKvQ,KAAKuQ,GAAGzG,WAElB9J,KAAKwQ,GAAGpJ,OAAOpH,KAAKoN,YAAa,GACjCpN,KAAKwQ,GAAKxQ,KAAKwQ,GAAG1G,WAElB9J,KAAK2Q,GAAGvJ,OAAOpH,KAAKoN,YAAapN,KAAKkN,YACtClN,KAAK2Q,GAAK3Q,KAAK2Q,GAAG7G,WAElB9J,KAAKoL,GAAGhE,OAAOpH,KAAKoN,YAAa,GACjCpN,KAAKoL,GAAKpL,KAAKoL,GAAGtB,UACpB,GAAC,qBAED,SAAQzJ,GAGN,OAFAL,KAAK4M,EAAI5M,KAAK2B,EAAE6D,IAAInF,GAAO0E,IAAI/E,KAAK6B,EAAEyC,UAAU,EAAGjE,EAAMS,OACzDd,KAAK+K,EAAI/K,KAAK4Q,WAAW5Q,KAAK4M,GACvB5M,KAAK+K,CACd,GAAC,kBAED,WACE,OAAO,CACT,GAAC,kBAED,WACE,OAAO,CACT,GAAC,wBAED,SAAWmB,GAST,OARIA,EAAckD,OAChBpP,KAAK6Q,SAAS3E,EAAczK,WACnByK,EAAc4E,QACvB9Q,KAAK6Q,SAAS3E,EAAcqB,iBAAmBrB,EAAcuB,kBAAoBvB,EAAcyB,kBAGjG,gDAAiBzB,GAEVlM,IACT,GAAC,qBAED,SAAQJ,GAGN,OAFAI,KAAK+Q,UAAUnR,GAERI,IACT,GAAC,qBAED,WACE,OAAOA,KAAKoQ,MACd,GAAC,4BAED,WACE,OAAOpQ,KAAKmQ,KACd,GAAC,6BAED,WACE,OAAOnQ,KAAKoQ,MACd,GAAC,4BAED,WACE,OAAO,CACT,GAAC,qBAED,WACE,OAAOpQ,KAAK2B,EAAE0D,IAAI,GAAGX,KACvB,M,qEAAC,EAlH2B,CAASuL,I,4zCCHa,IAE9Ce,GAAY,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAWf,O,EAXe,G,EAAA,yBAChB,SAAWnQ,GACT,OAAOA,EAAEwJ,SACX,GAAC,qBAED,WACE,OAAOtB,GAAAA,OACT,GAAC,wBAED,SAAWuD,GACT,OAAOA,EAAM3F,UAAU,GAAG5B,IAAI,GAAGuD,SAAS,EAC5C,M,qEAAC,EAXe,CAASgI,I,4zCCFyB,IAE9CW,GAAa,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAWhB,O,EAXgB,G,EAAA,yBACjB,SAAWpQ,GACT,OAAOA,EAAE8F,UAAU,GAAGxC,MAAMY,IAAI,GAAGuD,SAAS,EAC9C,GAAC,qBAED,WACE,OAAOS,GAAAA,QACT,GAAC,wBAED,SAAWuD,GACT,OAAOA,EAAM3F,SAAS3G,KAAK4Q,WAAWtE,GAAO3F,SAAS3G,KAAK4Q,WAAWtE,EAAM1F,aAC9E,M,qEAAC,EAXgB,CAAS0J,I,4zCCFwB,IAE9CY,GAAS,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAWZ,O,EAXY,G,EAAA,yBACb,SAAWrQ,GACT,OAAOA,EAAEuJ,MACX,GAAC,qBAED,WACE,OAAOrB,GAAAA,IACT,GAAC,wBAED,SAAWhI,GACT,OAAOf,KAAK4Q,WAAW7P,GAAOsE,IAAI,GAAGuB,UACvC,M,qEAAC,EAXY,CAAS0J,I,4zCCDwB,IAE1Ca,GAAS,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAWZ,O,EAXY,G,EAAA,yBACb,SAAWtQ,GACT,OAAOA,EAAEiL,OAAO,EAClB,GAAC,qBAED,WACE,OAAO/C,GAAAA,IACT,GAAC,wBAED,SAAWuD,GACT,OAAOnF,KAAiBU,QAAQ,sBAAuByE,EAAOtM,KAAK+K,EACrE,M,qEAAC,EAXY,CAASuF,I,4zCCH4B,IAE9Cc,GAAa,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAWhB,O,EAXgB,G,EAAA,yBACjB,SAAWvQ,GACT,OAAOA,EAAEsD,MAAMY,IAAI,GAAGP,KACxB,GAAC,qBAED,WACE,OAAOuE,GAAAA,QACT,GAAC,wBAED,SAAWuD,GACT,OAAOA,EAAM3F,UAAU,GAAGxC,MAAMY,IAAI,GAAGuD,SAAS,EAClD,M,qEAAC,EAXgB,CAASgI,ICDfe,GAAS,SACpBhR,EACAiR,EACAlB,EACAD,EACAoB,EACAC,EACAC,EACAC,EACAC,EACAC,GAOA,IALA,IAEIC,EAAmB,EACjB/P,EAAS,IAAI6B,KAFJwM,EAAQqB,EAAW,EAAIE,GAASE,EAAW,KAAOxB,EAASmB,EAAW,EAAIE,GAASE,EAAW,GADhGH,EAAWD,EAAWD,GAGGxH,WAE7BgI,GAAaL,EAAOK,EAAYP,GAAYnB,EAASqB,EAAOK,GAAaH,EAChF,IAAK,IAAII,GAAaL,EAAOK,EAAYP,GAAYrB,EAAQuB,EAAOK,GAAaH,EAAU,CAEzF,IADA,IAAII,EAAmB,EACdC,EAAU,EAAGA,EAAUX,EAAUW,IAExC,IADA,IAAMhE,EAAcmC,EAASD,EAAQ8B,EAC5BxO,EAAI,EAAGA,EAAI8N,EAAU9N,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIgO,EAAUhO,IACxBsO,EAAYrO,GAAK,GAAKsO,EAAYvO,GAAK,GAAKuO,EAAYvO,EAAI2M,GAAS2B,EAAYrO,EAAI2M,IACvFtO,EAAOF,KAAKiQ,GAAkBG,GAC5B3R,EAAMuB,MAAM6B,EAAIqO,GAAa3B,EAAQ4B,EAAYvO,EAAIyK,GAAa,IAEtE+D,IAINH,GACF,CAEF,OAAO/P,CACT,EAEaoQ,GAAU,SACrB7R,EACAiR,EACAlB,EACAD,EACAoB,EACAC,EACAG,EACAC,GASA,IAPA,IAAMO,GAAehC,EAAQqB,GAAYI,EAAW,EAC9CQ,GAAgBhC,EAASmB,GAAYI,EAAW,EAGlDK,EAAmB,EACjBlQ,EAAS,IAAI6B,GAAOwO,EAAcC,EAHpBd,EAGgD,GAAGxH,WAE9DgI,EAAY,EAAGA,EAAYP,GAAYnB,EAAQ0B,GAAaH,EACnE,IAAK,IAAII,EAAY,EAAGA,EAAYP,GAAYrB,EAAO4B,GAAaH,EAAU,CAC5E,IAAK,IAAIK,EAAU,EAAGA,EAAUX,EAAUW,IAAW,CAInD,IAHA,IAAIjE,GAAO,IACLC,EAAcmC,EAASD,EAAQ8B,EAC/B/D,EAAeiE,EAAcC,EAAeH,EACzCxO,EAAI,EAAGA,EAAI8N,EAAU9N,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIgO,EAAUhO,IAC5BwK,EAAO9J,KAAKgB,IAAI8I,EAAM3N,EAAMuB,KAAKqM,GAAexK,EAAIqO,GAAa3B,EAAQ4B,EAAYvO,GAAG,IAG5F1B,EAAOF,KAAKsM,EAAe8D,GAAkB,GAAKhE,CACpD,CACAgE,GACF,CAEF,OAAOlQ,CACT,EAEauQ,GAAQ,SAACxO,EAAayO,GACjC,OAAOpO,KAAKmO,OAAOxO,EAAM2D,OAAO+K,SAAWrO,KAAKmB,IAAI,GAAIiN,IAAkBpO,KAAKmB,IAAI,GAAIiN,EACzF,E,ijDC7EwC,IAEzBE,GAAe,a,sRAAA,U,QAAA,G,EAAA,E,kZAe5B,aAAc,MAaW,O,4FAbX,UACZ,gBACK7Q,EAAI,IAAIgC,GACb,EAAK9B,EAAI,IAAI8B,GACb,EAAKoH,EAAI,IAAIpH,GACb,EAAKiJ,EAAI,IAAIjJ,GACb,EAAK4I,GAAK,IAAI5I,GACd,EAAK6I,GAAK,IAAI7I,GACd,EAAK4M,GAAK,IAAI5M,GACd,EAAK6M,GAAK,IAAI7M,GACd,EAAK8M,GAAK,IAAI9M,GACd,EAAK+M,GAAK,IAAI/M,GACd,EAAKgN,GAAK,IAAIhN,GACd,EAAKyH,GAAK,IAAIzH,GAAS,CACzB,CAgDC,O,EAhDA,G,EAAA,wBAED,WACE,GACD,kBAED,WACE,OAAO,CACT,GAAC,kBAED,WACE,OAAO,CACT,GAAC,wBAED,SAAWuI,GAOT,OANIA,EAAc4E,QAChB9Q,KAAKyS,QAAQ,CAACvG,EAAcqB,iBAAkBrB,EAAcuB,kBAAmBvB,EAAcyB,mBAG/F,gDAAiBzB,GAEVlM,IACT,GAAC,qBAED,SAAQsP,GAKN,OAJAtP,KAAK6Q,SAASvB,EAAU,IACxBtP,KAAK+Q,UAAUzB,EAAU,IACzBtP,KAAK0S,SAASpD,EAAU,IAEjBtP,IACT,GAAC,qBAED,WACE,MAAO,CAACA,KAAKkN,WAAYlN,KAAKoN,YAAapN,KAAKsN,WAClD,GAAC,qBAYD,WACE,OAAOtN,KAAK2B,EAAE0D,IAAI,GAAGX,KACvB,M,qEAAC,EA7E2B,CAASuL,I,i9CCEhC,IAAM0C,GAAS,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGAIA,OAJA,uDACG,IAAE,sBACF,GAAC,mBACJ,GAAC,kBACF,GAAC,EAoHnB,O,EApHmB,G,EAAA,wBAEpB,WACE3S,KAAK2B,EAAEyF,OAAOpH,KAAK4S,WAAY5S,KAAK6M,WAAa7M,KAAK6M,WAAa7M,KAAKqQ,OACxErQ,KAAK2B,EAAI3B,KAAK2B,EAAEqI,UAAUhK,KAAKuN,iBAAmBvN,KAAKyN,kBAAoBzN,KAAK2N,kBAEhF3N,KAAK6B,EAAEuF,OAAOpH,KAAK4S,WAAY,GAC/B5S,KAAK6B,EAAI7B,KAAK6B,EAAEmI,UAAUhK,KAAKuN,iBAAmBvN,KAAKyN,kBAAoBzN,KAAK2N,kBAEhF3N,KAAKuM,GAAGnF,OAAOpH,KAAK4S,WAAY5S,KAAK6M,WAAa7M,KAAK6M,WAAa7M,KAAKqQ,OACzErQ,KAAKuM,GAAKvM,KAAKuM,GAAGzC,WAElB9J,KAAKwM,GAAGpF,OAAOpH,KAAK4S,WAAY,GAChC5S,KAAKwM,GAAKxM,KAAKwM,GAAG1C,WAElB9J,KAAKyQ,GAAGrJ,OAAOpH,KAAK4S,WAAY5S,KAAK6M,WAAa7M,KAAK6M,WAAa7M,KAAKqQ,OACzErQ,KAAKyQ,GAAKzQ,KAAKyQ,GAAG3G,WAElB9J,KAAK0Q,GAAGtJ,OAAOpH,KAAK4S,WAAY,GAChC5S,KAAK0Q,GAAK1Q,KAAK0Q,GAAG5G,WAElB9J,KAAKuQ,GAAGnJ,OAAOpH,KAAK4S,WAAY5S,KAAK6M,WAAa7M,KAAK6M,WAAa7M,KAAKqQ,OACzErQ,KAAKuQ,GAAKvQ,KAAKuQ,GAAGzG,WAElB9J,KAAKwQ,GAAGpJ,OAAOpH,KAAK4S,WAAY,GAChC5S,KAAKwQ,GAAKxQ,KAAKwQ,GAAG1G,UACpB,GAAC,6BAED,WACE,OAAQ9J,KAAKmQ,MAAQnQ,KAAK6M,WAAa,EAAI7M,KAAKwO,SAAWxO,KAAK+M,OAAS,CAC3E,GAAC,4BAED,WACE,OAAQ/M,KAAKoQ,OAASpQ,KAAK6M,WAAa,EAAI7M,KAAKwO,SAAWxO,KAAK+M,OAAS,CAC5E,GAAC,4BAED,WACE,OAAO/M,KAAK4S,UACd,GAAC,2BAED,SAAc1S,GAEZ,OADAF,KAAK6M,WAAa3M,EACXF,IACT,GAAC,2BAED,WACE,OAAOA,KAAK6M,UACd,GAAC,2BAED,SAAc+F,GAEZ,OADA5S,KAAK4S,WAAaA,EACX5S,IACT,GAAC,2BAED,WACE,OAAOA,KAAK4S,UACd,GAAC,wBAED,SAAWpE,GAET,OADAxO,KAAKwO,QAAUA,EACRxO,IACT,GAAC,wBAED,WACE,OAAOA,KAAKwO,OACd,GAAC,uBAED,SAAUzB,GAER,OADA/M,KAAK+M,OAASA,EACP/M,IACT,GAAC,uBAED,WACE,OAAOA,KAAK+M,MACd,GAAC,qBAED,SAAQ1M,GAMN,IALA,IAAMyB,EAAS,IAAI6B,GACjB3D,KAAKuN,iBAAmBvN,KAAKyN,kBAAoBzN,KAAK2N,iBACtDtN,EAAMS,MACNgJ,WAEOrE,EAAI,EAAGA,EAAIpF,EAAMS,KAAM2E,GAAK,EAAG,CACtC,IAAMoN,EAAOxB,GACXhR,EAAM8F,IAAIV,GACVzF,KAAKqQ,MACLrQ,KAAKoQ,OACLpQ,KAAKmQ,MACLnQ,KAAK6M,WACL7M,KAAK6M,WACL7M,KAAKwO,QACLxO,KAAKwO,QACLxO,KAAK+M,OACL/M,KAAK+M,QAGD1E,EAAMrI,KAAK2B,EAAE6D,IAAIqN,EAAK9M,aAAahB,IAAI/E,KAAK6B,EAAEyC,UAAU,EAAGuO,EAAK3P,OACtEpB,EAAOgR,OAAOrN,EAAG4C,EAAI0K,kBACvB,CAKA,OAHA/S,KAAK4M,EAAI9K,EACT9B,KAAK+K,EAAI/K,KAAK4Q,WAAW5Q,KAAK4M,GAEvB5M,KAAK+K,CACd,GAAC,wBAED,SAAWlK,GACT,OAAOA,EAAEsJ,OAAO,EAClB,GAAC,qBAED,WACE,OAAOpB,GAAAA,IACT,GAAC,wBAED,SAAWuD,GACT,OAAOnF,KAAiBU,QAAQ,sBAAuByE,EAAOtM,KAAK+K,EACrE,M,qEAAC,EAxHmB,CAASyH,I,4zCCLI,IAK7BQ,GAAmB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAoDtB,O,EApDsB,G,EAAA,yBACvB,SAAW9G,GACT,IAAIA,EAAc4E,OAchB,MAAM,IAAIlO,MAAM,+DAbhB,GAAIsJ,EAAc1K,WAAauH,GAAAA,QAU7B,MAAM,IAAInG,MAAM,wEAMpB,OAfI5C,KAAK6M,WAAaX,EAAcqB,iBAChCvN,KAAKwO,QAAU,EACfxO,KAAK+M,OAAS,EACd/M,KAAKmQ,MAAQjE,EAAcqB,iBAC3BvN,KAAKoQ,OAASlE,EAAcuB,kBAC5BzN,KAAKqQ,MAAQnE,EAAcyB,iBAC3B3N,KAAK4S,WACH1G,EAAcqB,iBAAmBrB,EAAcuB,kBAAoBvB,EAAcyB,iBAQhF3N,IACT,GAAC,qBAED,SAAQsP,GACN,OAAOtP,IACT,GAAC,2BAED,SAAc6M,GACZ,OAAO7M,IACT,GAAC,uBAED,SAAU+M,GACR,OAAO/M,IACT,GAAC,wBAED,SAAWwO,GACT,OAAOxO,IACT,GAAC,sBAED,SAASJ,GACP,OAAOI,IACT,GAAC,uBAED,SAAUJ,GACR,OAAOI,IACT,GAAC,sBAED,SAASJ,GACP,OAAOI,IACT,GAAC,2BAED,SAAcJ,GACZ,OAAOI,IACT,M,qEAAC,EApDsB,CAAS2S,I,i9CCHkB,IAE9CM,GAAY,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGAEN,OAFM,uDACH,GAAC,kBACL,GAAC,EA0ET,O,EA1ES,G,EAAA,wBAEV,WACE,GACD,6BAED,WACE,OAAQjT,KAAKoQ,OAASpQ,KAAK6M,YAAc7M,KAAK+M,OAAS,CACzD,GAAC,4BAED,WACE,OAAQ/M,KAAKmQ,MAAQnQ,KAAK6M,YAAc7M,KAAK+M,OAAS,CACxD,GAAC,4BAED,WACE,OAAO/M,KAAKqQ,KACd,GAAC,2BAED,SAAcnQ,GAEZ,OADAF,KAAK6M,WAAa3M,EACXF,IACT,GAAC,2BAED,WACE,OAAOA,KAAK6M,UACd,GAAC,uBAED,SAAUE,GAER,OADA/M,KAAK+M,OAASA,EACP/M,IACT,GAAC,uBAED,WACE,OAAOA,KAAK+M,MACd,GAAC,wBAED,WACE,OAAO,CACT,GAAC,qBAED,SAAQ1M,GAGN,IAFA,IAAMyB,EAAS,IAAI6B,GAAO3D,KAAKuN,iBAAmBvN,KAAKyN,kBAAoBzN,KAAK2N,iBAAkBtN,EAAMS,MAE/F2E,EAAI,EAAGA,EAAIpF,EAAMS,KAAM2E,GAAK,EAAG,CACtC,IAAMyN,EAAOhB,GACX7R,EAAM8F,IAAIV,GACVzF,KAAKqQ,MACLrQ,KAAKoQ,OACLpQ,KAAKmQ,MACLnQ,KAAK6M,WACL7M,KAAK6M,WACL7M,KAAK+M,OACL/M,KAAK+M,QAGPjL,EAAOgR,OAAOrN,EAAGyN,EAAKH,kBACxB,CAKA,OAHA/S,KAAK4M,EAAI9K,EACT9B,KAAK+K,EAAI/K,KAAK4Q,WAAW5Q,KAAK4M,GAEvB5M,KAAK+K,CACd,GAAC,wBAED,SAAWlK,GACT,OAAOA,CACT,GAAC,qBAED,WACE,OAAOkI,GAAAA,OACT,GAAC,wBAED,SAAWuD,GACT,OAAOA,CACT,M,qEAAC,EA5Ee,CAASkG,I,i9CCQpB,IAAMW,GAAc,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGAgBU,OAhBV,gDACG,MAAI,eACJ,MAAI,eACJ,MAAI,aACN,MAAI,cACH,MAAI,gBACF,MAAI,gBACJ,MAAI,gBACJ,MAAI,cACN,MAAI,eACH,MAAI,aACX,IAAE,aACF,IAAE,aACF,IAAE,iBACO,MAAI,iBACJ,MAAI,kBACH,MAAI,EAwHlC,O,EAxHkC,G,EAAA,wBAEnC,WACEnT,KAAKqJ,IAAM,IAAI1F,GAAO3D,KAAKkN,WAAYlN,KAAKoN,aAC5CpN,KAAKqJ,IAAMrJ,KAAKqJ,IAAIW,UAAUhK,KAAKkN,YAEnClN,KAAKoJ,IAAM,IAAIzF,GAAO3D,KAAKkN,WAAYlN,KAAKkN,YAC5ClN,KAAKoJ,IAAMpJ,KAAKoJ,IAAIY,UAAUhK,KAAKkN,YAEnClN,KAAKsJ,IAAM,IAAI3F,GAAO3D,KAAKsN,WAAYtN,KAAKkN,YAC5ClN,KAAKsJ,IAAMtJ,KAAKsJ,IAAIU,UAAUhK,KAAKsN,YAEnCtN,KAAK6B,EAAI,IAAI8B,GAAO3D,KAAKkN,WAAY,GACrClN,KAAK6B,EAAI7B,KAAK6B,EAAEmI,UAAUhK,KAAKkN,YAE/BlN,KAAKuJ,GAAK,IAAI5F,GAAO3D,KAAKsN,WAAY,GACtCtN,KAAKuJ,GAAKvJ,KAAKuJ,GAAGS,UAAUhK,KAAKsN,YAEjCtN,KAAK2L,KAAO,IAAIhI,GAAO3D,KAAKkN,WAAYlN,KAAKoN,aAC7CpN,KAAK2L,KAAO3L,KAAK2L,KAAK7B,WAEtB9J,KAAK6L,KAAO,IAAIlI,GAAO3D,KAAKkN,WAAYlN,KAAKkN,YAC7ClN,KAAK6L,KAAO7L,KAAK6L,KAAK/B,WAEtB9J,KAAK4L,KAAO,IAAIjI,GAAO3D,KAAKsN,WAAYtN,KAAKkN,YAC7ClN,KAAK4L,KAAO5L,KAAK4L,KAAK9B,WAEtB9J,KAAKoL,GAAK,IAAIzH,GAAO3D,KAAKkN,WAAY,GACtClN,KAAKoL,GAAKpL,KAAKoL,GAAGtB,WAElB9J,KAAKsL,IAAM,IAAI3H,GAAO3D,KAAKsN,WAAY,GACvCtN,KAAKsL,IAAMtL,KAAKsL,IAAIxB,WAEpB9J,KAAKwL,OAAS,IAAI7H,GAAO3D,KAAKkN,WAAYlN,KAAKkN,YAC/ClN,KAAKwL,OAASxL,KAAKwL,OAAO1B,UAC5B,GAAC,qBAED,SAAQtG,EAAWuG,GACjB,IAAMqJ,EAAQpT,KAAKqJ,IAAI7D,IAAIhC,GACxBuB,IAAI/E,KAAKoJ,IAAI5D,IAAIuE,GAAOzF,UAAU,EAAGtE,KAAKkN,aAC1CnI,IAAI/E,KAAK6B,EAAEyC,UAAU,EAAGd,EAAE1C,OAC1BsJ,OACG3G,EAAIzD,KAAKsJ,IAAI9D,IAAI4N,GAAOrO,IAAI/E,KAAKuJ,GAAGjF,UAAU,EAAGd,EAAE1C,OAAOuJ,UAKhE,OAJArK,KAAK+K,EAAE3K,KAAKgT,GACZpT,KAAKS,EAAEL,KAAKoD,GACZxD,KAAKU,EAAEN,KAAKqD,GACZzD,KAAK+J,MAAQA,EACN,CAACqJ,EAAO3P,EACjB,GAAC,sBAED,SAASgI,EAAYjI,EAAWF,EAAWyG,GACzC,IAAMsJ,EAAQ/P,EAAE+B,IAAI,GAAGuB,WAAWD,SAAS8E,GAErCE,EAAO0H,EAAM7N,IAAIhC,EAAEuC,aACnB8F,EAAOwH,EAAM7N,IAAIuE,EAAMhE,aACvBqF,EAAKpL,KAAKoL,GACVE,EAAMtL,KAAKsL,IAIjB,MAAO,CACLK,KAAAA,EACAC,KALW5L,KAAK4L,KAMhBC,KAAAA,EACAT,GAAAA,EACAE,IAAAA,EACAE,OARaxL,KAAKoJ,IAAIrD,YAAYP,IAAI6N,GAU1C,GAAC,wBAED,SAAWxS,GACT,OAAOA,CACT,GAAC,qBAED,WACE,OAAOkI,GAAAA,QACT,GAAC,wBAED,SAAWuD,GACT,OAAOA,CACT,GAAC,kBAED,WACE,OAAO,CACT,GAAC,kBAED,WACE,OAAO,CACT,GAAC,qBAED,SAAQ1M,GAKN,OAJAI,KAAK6Q,SAASjR,EAAM,IACpBI,KAAK+Q,UAAUnR,EAAM,IACrBI,KAAK0S,SAAS9S,EAAM,IAEbI,IACT,GAAC,qBAED,WACE,OAAOA,KAAKoQ,MACd,GAAC,4BAED,WACE,OAAOpQ,KAAKmQ,KACd,GAAC,6BAED,WACE,OAAOnQ,KAAKoQ,MACd,GAAC,4BAED,WACE,OAAOpQ,KAAKqQ,KACd,GAAC,qBAED,WACE,OAAO,CACT,GAAC,sBAED,WACE,OAAOrQ,KAAKmQ,KACd,M,qEAAC,EAxIwB,CAASF,I,4zCCRI,IAGlCqD,GAAgB,a,sRAAA,U,UAAA,G,EAAA,E,kZAAA,uDAuDnB,O,EAvDmB,E,EAGnB,uBAED,SAAgBC,GACd,OAAO,IAAItR,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAYmR,GAAU,SAAClR,EAAKT,GAC1B,GAAIS,EACFF,EAAOE,OADT,CAIA,IAAMmR,EAAOzR,KAAK0R,MAAM7R,EAAK8R,YAEvBC,EAAU,IAAIL,EAAiBE,EAAiB,YAEtDA,EAAa,OAAEjT,SAAQ,SAACqT,GACtB,IAAIpE,EAAa,KAES,aAAtBoE,EAAgB,KAClBpE,EAAayB,GACkB,YAAtB2C,EAAgB,KACzBpE,EAAawB,GACkB,SAAtB4C,EAAgB,KACzBpE,EAAa2B,GACkB,aAAtByC,EAAgB,KACzBpE,EAAa4B,GACkB,SAAtBwC,EAAgB,OACzBpE,EAAa0B,IAGfyC,EAAQE,YAAYrE,GAAY,SAACvP,GAE/BA,EAAMwS,QAAQmB,EAAgB,KAChC,GACF,IAEA,IAAMrE,EAAUoE,EAAQG,aAExBvE,EAAQwE,YAAYxT,SAAQ,SAACN,EAAOwF,GAClCxF,EAAM0B,EAAI,IAAIgC,GACZ6P,EAAa,OAAE/N,GAAY,QAAK,EAAExE,OAClCuS,EAAa,OAAE/N,GAAY,QAAK,EAAE,GAAGxE,OACrCuS,EAAa,OAAE/N,GAAY,QAAK,GAElCxF,EAAM4B,EAAI,IAAI8B,GACZ6P,EAAa,OAAE/N,GAAY,QAAK,EAAExE,OAClCuS,EAAa,OAAE/N,GAAY,QAAK,EAAE,GAAGxE,OACrCuS,EAAa,OAAE/N,GAAY,QAAK,EAEpC,IAEAvD,EAAQqN,EAzCR,CA0CF,GACF,GACF,K,EAvDoB,mCACpB,SAAqBtP,GACnBA,EAAM4Q,SAAS7Q,KAAKD,WAAW,GACjC,M,gFAoDC,EAvDmB,CAASsP,I,4zCCFU,IAGnC2E,GAAgB,a,sRAAA,U,UAAA,G,EAAA,E,kZAAA,uDAoFnB,O,EApFmB,E,EAMnB,uBAED,SAAgBT,GACd,OAAO,IAAItR,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAYmR,GAAU,SAAClR,EAAKT,GAC1B,GAAIS,EACFF,EAAOE,OADT,CAIA,IAAMmR,EAAOzR,KAAK0R,MAAM7R,EAAK8R,YAEvBC,EAAU,IAAIK,EAAiBR,EAAW,MAEhDA,EAAa,OAAEjT,SAAQ,SAACqT,GACI,aAAtBA,EAAgB,KAElBD,EAAQE,YAAY5C,IAAe,SAAChR,GAElCA,EAAMwS,QAAQmB,EAAgB,KAChC,IAC+B,YAAtBA,EAAgB,KAEzBD,EAAQE,YAAY7C,IAAc,SAAC/Q,GAEjCA,EAAMwS,QAAQmB,EAAgB,KAChC,IAC+B,SAAtBA,EAAgB,KAEzBD,EAAQE,YAAY1C,IAAW,SAAClR,GAE9BA,EAAMwS,QAAQmB,EAAgB,KAChC,IAC+B,aAAtBA,EAAgB,KAEzBD,EAAQE,YAAYzC,IAAe,SAACnR,GAElCA,EAAMwS,QAAQmB,EAAgB,KAChC,IAC+B,SAAtBA,EAAgB,KAEzBD,EAAQE,YAAY3C,IAAW,SAACjR,GAE9BA,EAAMwS,QAAQmB,EAAgB,KAChC,IAC+B,SAAtBA,EAAgB,KAEzBD,EAAQE,YAAYlB,IAAW,SAAC1S,GAC9BA,EAAMwS,QAAQmB,EAAgB,MAC9B3T,EAAMgU,cAAcL,EAAsB,YAC1C3T,EAAMiU,UAAUN,EAAkB,QAClC3T,EAAMkU,cAAcP,EAAsB,YAC1C3T,EAAMmU,WAAWR,EAAmB,QACtC,IAC+B,YAAtBA,EAAgB,KAEzBD,EAAQE,YAAYZ,IAAc,SAAChT,GACjCA,EAAMwS,QAAQmB,EAAgB,MAC9B3T,EAAMgU,cAAcL,EAAsB,YAC1C3T,EAAMiU,UAAUN,EAAkB,OACpC,IAC+B,mBAAtBA,EAAgB,MAEzBD,EAAQE,YAAYZ,GAExB,IAEA,IAAM1D,EAAUoE,EAAQG,aAEpBvE,IACFA,EAAQwE,YAAYxT,SAAQ,SAACN,EAAOwF,GAClCxF,EAAM0B,EAAI6R,EAAa,OAAK,EAC5BvT,EAAM4B,EAAI2R,EAAa,OAAK,CAC9B,IAEAtR,EAAQqN,GAlEV,CAoEF,GACF,GACF,K,EApFoB,mCACpB,SAAqBtP,GACfD,KAAKD,YAEPE,EAAMwS,QAAQzS,KAAKD,WAEvB,M,gFA8EC,EApFmB,CAASsP,I,y5BCPxB,IAAMgF,GAAO,WAKlB,aAA8G,IAAlGC,EAAsB,UAAH,6CAAG,KAAMlI,EAA2B,UAAH,6CAAG,KAAM9E,EAA+B,UAAH,6CAAG,KAItG,GAJ0G,iCAJvF,GAAC,2BACI,GAAC,eACE,MAG3BtH,KAAKsU,YAAcA,EACnBtU,KAAKoM,iBAAmBA,EAEpB9E,EAAK,CAEP,IADA,IAAM1F,EAAO,GACJsE,EAAM,EAAGA,EAAMoO,EAAapO,GAAO,EAAG,CAC7CtE,EAAKsE,GAAO,IAAIY,MAAMsF,GACtB,IAAK,IAAIjG,EAAM,EAAGA,EAAMiG,EAAkBjG,GAAO,EAClB,iBAAlBmB,EAAIpB,GAAKC,GAElBvE,EAAKsE,GAAKC,GAAOmB,EAAIpB,GAAKC,GAAKlF,OAASuG,OAAOF,EAAIpB,GAAKC,IAAQsB,IAC9B,iBAAlBH,EAAIpB,GAAKC,KACzBvE,EAAKsE,GAAKC,GAAOmB,EAAIpB,GAAKC,GAGhC,CACAnG,KAAK4B,KAAO,IAAI+B,GAAO3D,KAAKsU,YAAatU,KAAKoM,iBAAkBxK,EAClE,CACF,C,UASC,O,EATA,E,EA0BA,yBAxBD,SAAkBf,GAChB,IAAM0T,EAAW,IAAIF,EAKrB,OAJAE,EAASD,YAAczT,EAAEqC,KACzBqR,EAASnI,iBAAmBvL,EAAEC,KAC9ByT,EAAS3S,KAAOf,EAET0T,CACT,K,EATC,wBAWD,SAAUC,GACR,OAAOxU,KAAK4B,KAAKuE,IAAIqO,EACvB,GAAC,iCAED,WACE,OAAOxU,KAAKoM,gBACd,GAAC,4BAED,WACE,OAAOpM,KAAKsU,WACd,GAAC,sBAED,SAASG,EAAgBC,GACvB,IAAM9S,EAAO5B,KAAK4B,KAAK+S,MAAM,EAAGF,EAAQzU,KAAK4B,KAAKsB,KAAMwR,GACxD,OAAOL,EAAQO,WAAWhT,EAC5B,M,gFAjBC,EAjCiB,G,0qBCCb,IAAMiT,GAAc,yB,4FAAA,S,QAYxB,O,EAZwB,E,EAAA,yBACzB,SAAkBC,GAChB,OAAO,IAAI7S,SAAQ,SAACC,GAClB4S,EAAcC,MAAK,SAACC,GAClB,IAAMC,EAASD,EAAOvB,QAChBrH,EAAmB6I,EAAOnU,KAC1BwT,EAAcW,EAAO/R,KAErBiG,EAAU,IAAIkL,GAAQC,EAAalI,EAAkB6I,EAAOrT,MAClEM,EAAQiH,EACV,GACF,GACF,IAZyB,M,eAAA,M,8DAYxB,EAZwB,G,q6BCDpB,IAAM+L,GAAiB,WAM5B,WAAYC,I,4FAAa,kCALD,GAAC,mBACP,GAAC,eACG,IAIpBnV,KAAK4B,KAAOuT,EAAIC,cAChB,I,EAAMxL,E,gDAAY,IAAIyL,IAAIrV,KAAK4B,KAAK0T,MAAM,IAAIC,U,kkBAE9CvV,KAAK4J,MAAQA,EACb5J,KAAKwV,SAAWxV,KAAK4B,KAAKX,OAC1BjB,KAAKiJ,eAAiBW,EAAM3I,MAC9B,C,QAkFC,O,EAlFA,E,EAAA,0BAED,WACE,OAAOjB,KAAK4B,KACT6T,QAAQ,MAAO,MACfH,MAAM,MACN9K,KAAI,SAACkL,GACJ,OAAOA,EAAU,IACnB,GACJ,GAAC,+BAED,WACE,OAAO1V,KAAKiJ,cACd,GAAC,4BAED,WACE,OAAOjJ,KAAK4J,MAAM3I,MACpB,GAAC,4BAED,WACE,IAAMa,EAAS,CAAC,EAIhB,OAHA9B,KAAK4J,MAAMrJ,SAAQ,SAACoV,EAAMlQ,GACxB3D,EAAO6T,GAAQlQ,CACjB,IACO3D,CACT,GAAC,uBAED,WAIE,IAJ6C,IAArC8T,EAAa,UAAH,6CAAG,GAAI7I,EAAiB,UAAH,6CAAG,EACpCtM,EAAI,GACJC,EAAI,GAED+E,EAAI,EAAGA,EAAIzF,KAAK4B,KAAKX,OAAS2U,EAAInQ,GAAKsH,EAC9CtM,EAAEL,KAAKJ,KAAK4B,KAAKiU,OAAOpQ,EAAGmQ,IAC3BlV,EAAEN,KAAKJ,KAAK4B,KAAK6D,EAAImQ,IAGvB,MAAO,CAACnV,EAAGC,EACb,GAAC,2BAED,SAAcD,EAAaC,GAAkD,WACrEG,EAAIJ,EAAEQ,OACNuC,EAAI,IAAIsD,MAAMjG,GACd+I,EAAQ5J,KAAK0J,iBACbjG,EAAI,IAAIE,GAAO9C,EAAGb,KAAK4J,MAAM3I,QAAQ6I,WAgB3C,OAZArJ,EAAEF,SAAQ,SAACuV,EAAkBC,GAC3BvS,EAAEuS,GAAM,IAAIpS,GAAOmS,EAAS7U,OAAQ,EAAK2I,MAAM3I,QAAQ6I,WACvDgM,EAASR,MAAM,IAAI/U,SAAQ,SAACoV,EAAMjO,GAChClE,EAAEuS,GAAInU,KAAK8F,GAAGkC,EAAM+L,IAAS,CAE/B,IAIAlS,EAAE7B,KAAKmU,GAAInM,EAAMlJ,EAAEqV,KAAQ,CAC7B,IAEO,CAACvS,EAAGC,EACb,GAAC,sBAED,WACE,OAAOzD,KAAK4J,KACd,GAAC,yBAED,SAAYoM,GAA8B,WAClCN,EAAU1V,KAAKiW,cAAcD,GAC7BpU,EAAO,GAIb,OAHA8T,EAAQJ,MAAM,IAAI/U,SAAQ,SAAC2V,EAAIhQ,GAC7BtE,EAAKsE,GAAO,CAAC,EAAKwD,iBAAiBwM,GACrC,IACOvS,GAAAA,KAAY/B,EACrB,GAAC,yBAED,SAAYoU,GAA8B,WAClCN,EAAU1V,KAAKiW,cAAcD,GAC7BpU,EAAO,GAIb,OAHA8T,EAAQJ,MAAM,IAAI/U,SAAQ,SAAC2V,EAAIhQ,GAC7BtE,EAAKsE,GAAO,CAAC,EAAKwD,iBAAiBwM,GACrC,IACOvS,GAAAA,KAAY/B,EACrB,I,wEAAC,EA/F2B,G,0qBCCvB,IAAMuU,GAAwB,yB,4FAAA,S,QAQlC,O,EARkC,E,EAAA,yBACnC,SAAkBrB,GAChB,OAAO,IAAI7S,SAAQ,SAACC,GAClB4S,EAAcC,MAAK,SAACC,GAClB,IAAMG,EAAMH,EAAOvB,QACnBvR,EAAQ,IAAIgT,GAAkBC,GAChC,GACF,GACF,IARmC,M,eAAA,M,8DAQlC,EARkC,G,0zBCD9B,IAAeiB,GAAiB,yB,4FAAA,6BACf,GAAC,YACT,GAAC,uBACU,EAAC,C,QAezB,O,EAfyB,G,EAAA,2BAE1B,SAAa1B,GAEX,OADA1U,KAAK0U,UAAYA,EACV1U,IACT,GAAC,kBAED,SAAK0H,GAEH,OADA1H,KAAK0H,EAAIA,EACF1H,IACT,GAAC,6BAED,SAAgB+L,GAEd,OADA/L,KAAK+L,aAAeA,EACb/L,IACT,M,qEAAC,EAlBoC,G,i9CCChC,IAAMqW,GAAa,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGAED,OAFC,kDACN,IAAG,iBACH,MAAK,EA+BtB,O,EA/BsB,G,EAAA,uBAEvB,SAASC,GAEP,OADAtW,KAAKsW,MAAQA,EACNtW,IACT,GAAC,sBAED,SAASuW,GAEP,OADAvW,KAAKuW,MAAQA,EACNvW,IACT,GAAC,sBAED,SAASC,GACPD,KAAKwW,KAAKvW,EAAOD,KAAK+L,aAAc/L,KAAK0H,EAC3C,GAAC,kBAED,SAAKzH,EAAe8L,EAAsBrE,GACxCzH,EAAMsQ,GAAKtQ,EAAMsQ,GAAG5J,SAAS3G,KAAKsW,OAAOvR,IAAI9E,EAAMsM,GAAG5F,SAAS,EAAI3G,KAAKsW,QACxErW,EAAMuQ,GAAKvQ,EAAMuQ,GAAG7J,SAAS3G,KAAKsW,OAAOvR,IAAI9E,EAAMuM,GAAG7F,SAAS,EAAI3G,KAAKsW,QAExErW,EAAMwQ,GAAKxQ,EAAMwQ,GAAG9J,SAAS3G,KAAKuW,OAAOxR,IAAI9E,EAAMwQ,GAAGpL,IAAI,GAAGsB,SAAS,EAAI3G,KAAKuW,QAC/EtW,EAAMyQ,GAAKzQ,EAAMyQ,GAAG/J,SAAS3G,KAAKuW,OAAOxR,IAAI9E,EAAMyQ,GAAGrL,IAAI,GAAGsB,SAAS,EAAI3G,KAAKuW,QAE/E,IAAME,EAAcxW,EAAMsQ,GAAG1H,OAAO,EAAI3E,KAAKmB,IAAIrF,KAAKsW,MAAO,IACvDI,EAAczW,EAAMuQ,GAAG3H,OAAO,EAAI3E,KAAKmB,IAAIrF,KAAKsW,MAAO,IAEvDK,EAAc1W,EAAMwQ,GAAG1L,IAAI,MAAMO,OACjCsR,EAAc3W,EAAMyQ,GAAG3L,IAAI,MAAMO,OAEvCrF,EAAM0B,EAAI1B,EAAM0B,EAAEX,SAASyV,EAAY5N,OAAO8N,GAAahQ,SAASoF,IACpE9L,EAAM4B,EAAI5B,EAAM4B,EAAEb,SAAS0V,EAAY7N,OAAO+N,GAAajQ,SAASoF,GACtE,M,qEAAC,EAjCuB,CAASqK,I,4zCCA5B,IAAMS,GAAwB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAQlC,O,EARkC,G,EAAA,uBACnC,SAAS5W,GACPD,KAAK8W,gBAAgB7W,EAAOD,KAAK+L,aACnC,GAAC,6BAED,SAAgB9L,EAAe8L,GAC7B9L,EAAM0B,EAAI1B,EAAM0B,EAAEX,SAASf,EAAMsM,GAAG5F,SAASoF,IAC7C9L,EAAM4B,EAAI5B,EAAM4B,EAAEb,SAASf,EAAM4B,EAAE8E,SAASoF,GAC9C,M,qEAAC,EARkC,CAASqK,I,4zCCAvC,IAAMW,GAAgB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAW1B,O,EAX0B,G,EAAA,uBAC3B,SAAS9W,GACPD,KAAKgX,QAAQ/W,EAAOD,KAAK+L,aAC3B,GAAC,qBAED,SAAQ9L,EAAe8L,GACrB9L,EAAM0Q,GAAK1Q,EAAM0Q,GAAG5L,IAAI9E,EAAMsM,GAAGlH,IAAI,IACrCpF,EAAM0B,EAAI1B,EAAM0B,EAAEX,SAASf,EAAMsM,GAAG5F,SAASoF,GAAclD,OAAO5I,EAAM0Q,GAAGrL,OAAOP,IAAI,OAAO4B,SAAS1G,EAAMsM,KAE5GtM,EAAMmL,GAAKnL,EAAMmL,GAAGrG,IAAI9E,EAAMuM,GAAGnH,IAAI,IACrCpF,EAAM4B,EAAI5B,EAAM4B,EAAEb,SAASf,EAAMmL,GAAGzE,SAASoF,GAAclD,OAAO5I,EAAMmL,GAAG9F,OAAOP,IAAI,OAAO4B,SAAS1G,EAAMuM,IAC9G,M,qEAAC,EAX0B,CAAS4J,I,i9CCA/B,IAAMa,GAAiB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACR,OADQ,iDACX,IAAG,EAiBnB,O,EAjBmB,G,EAAA,uBAEpB,SAAShX,GACPD,KAAKkX,SAASjX,EAAOD,KAAK+L,aAC5B,GAAC,qBAED,SAAQoL,GAEN,OADAnX,KAAKmX,KAAOA,EACLnX,IACT,GAAC,sBAED,SAASC,EAAe8L,GACtB9L,EAAMsQ,GAAKtQ,EAAMsM,GAAG5F,SAAS3G,KAAKmX,MAAMpS,IAAI9E,EAAMsM,GAAG5F,SAAS,EAAI3G,KAAKmX,OACvElX,EAAMuQ,GAAKvQ,EAAMuM,GAAG7F,SAAS3G,KAAKmX,MAAMpS,IAAI9E,EAAMuM,GAAG7F,SAAS,EAAI3G,KAAKmX,OAEvElX,EAAM0B,EAAI1B,EAAM0B,EAAEX,SAASf,EAAMsQ,GAAG5J,SAASoF,IAC7C9L,EAAM4B,EAAI5B,EAAM4B,EAAEb,SAASf,EAAMuQ,GAAG7J,SAASoF,GAC/C,M,qEAAC,EAlB2B,CAASqK,I,i9CCAhC,IAAMgB,GAAgB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGAEP,OAFO,kDACT,MAAI,gBACL,IAAG,EAsBnB,O,EAtBmB,G,EAAA,sBAEpB,SAAQD,GAEN,OADAnX,KAAKmX,KAAOA,EACLnX,IACT,GAAC,sBAED,SAASqX,GAEP,OADArX,KAAKqX,MAAQA,EACNrX,IACT,GAAC,sBAED,SAASC,GACPD,KAAKsX,QAAQrX,EAAOD,KAAK+L,aAAc/L,KAAKqX,MAAOrX,KAAKmX,KAC1D,GAAC,qBAED,SAAQlX,EAAe8L,EAAsBsL,EAAeF,GAC1DlX,EAAMwQ,GAAKxQ,EAAMwQ,GAAG9J,SAASwQ,GAAMpS,IAAI9E,EAAMsM,GAAGlH,IAAI,GAAGsB,SAAS,EAAIwQ,IACpElX,EAAMyQ,GAAKzQ,EAAMyQ,GAAG/J,SAASwQ,GAAMpS,IAAI9E,EAAMuM,GAAGnH,IAAI,GAAGsB,SAAS,EAAIwQ,IAEpElX,EAAM0B,EAAI1B,EAAM0B,EAAEX,SAASf,EAAMsM,GAAG5F,SAAS0Q,GAAOxO,OAAO5I,EAAMwQ,GAAGnL,OAAOP,IAAI,QAC/E9E,EAAM4B,EAAI5B,EAAM4B,EAAEb,SAASf,EAAMuM,GAAG7F,SAAS0Q,GAAOxO,OAAO5I,EAAMyQ,GAAGpL,OAAOP,IAAI,OACjF,M,qEAAC,EAxB0B,CAASqR,I,0zBCU/B,IAAemB,GAAe,WAUnC,WAAYhI,EAAkBiI,I,4FAA8B,2BATlC,MAAI,oBACQ,MAAI,yBACzB,MAAI,qBACR,KAAI,uBACF,MAAK,mBACV,GAAI,sBACA,GAAC,wBACA,SAAC5V,GAAgD,IAG9D5B,KAAKuP,QAAUA,EACfvP,KAAKwX,UAAYA,CACnB,C,QAmEC,O,EAnEA,E,EAAA,gCAID,SAAkB5W,GAEhB,OADAZ,KAAKY,eAAiBA,EACfZ,IACT,GAAC,2BAED,SAAcyX,GAEZ,OADAzX,KAAKyX,WAAaA,EACXzX,IACT,GAAC,6BAED,SAAgB+L,GAEd,OADA/L,KAAK+L,aAAeA,EACb/L,IACT,GAAC,wBAED,SAAW0X,GAET,OADA1X,KAAK0X,QAAUA,EACR1X,IACT,GAAC,4BAED,SAAe2X,GAEb,OADA3X,KAAK2X,YAAcA,EACZ3X,IACT,GAAC,6BAED,SAAgB4X,GAEd,OADA5X,KAAK4X,aAAeA,EACb5X,IACT,GAAC,kBAED,SAAK6X,EAAuBC,GAC1B,IAAM1L,EAAmByL,EAAaE,sBAElCC,EAAW,EACX5S,EAAU,EAEdpF,KAAKuP,QAAQwE,YAAYxT,SAAQ,SAACN,GAChCmF,GAAWnF,EAAMmF,SACnB,IAYA,IAVA,IAAMzE,EAAcX,KAAKuP,QAAQ/O,QAAQqX,EAAajW,MAChDqW,EAAgBH,EAAclW,KAO9BsW,GAAS,EAAI9L,EADL6L,EAActR,SAAShG,EAAY6D,OAAOE,MACT1E,KAAKY,gBAAkBwE,GAAW,EAAIyS,EAAajW,KAAKd,OAE9FqF,EAAM,EAAGA,EAAMxF,EAAYG,KAAMqF,GAAO,EAChCxF,EAAY2J,iBAAiBnE,KAC7B8R,EAAc3N,iBAAiBnE,IAG5C6R,IAIJ,MAAO,CACLE,KAAAA,EACAF,SAAWA,EAAW5L,EAAoB,IAE9C,I,wEAAC,EAhFkC,G,i9CCR9B,IAAM+L,GAAgB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACZ,OADY,sDACf,KAAG,EA6Gd,O,EA7Gc,E,EAAA,2BAEf,SAAazD,GAEX,OADA1U,KAAK0U,UAAYA,EACV1U,IACT,GAAC,kBAED,SAAK6X,EAAuBC,GAC1B,IAAMpD,EAAY1U,KAAK0U,UACjBtI,EAAmByL,EAAaE,sBAGlCG,GAFehU,KAAKkU,KAAKhM,EAAmBsI,GAErC,GACPsD,EAAW,EAGX5S,EAAU,EAEdpF,KAAKuP,QAAQwE,YAAYxT,SAAQ,SAACN,GAChCmF,EAAUnF,EAAMmF,SAClB,KAEkB,IAAIiT,MAAOC,WACF,IAAID,MAAOC,UAEtC,IAHA,IAGSC,EAAQ,EAAG9D,EAAS,EAAG8D,EAAQnM,EAAkBmM,GAASvY,KAAK0U,UAAWD,GAAUzU,KAAK0U,UAAW,EAC/E,IAAI2D,MAAOC,UAAvC,IACMjY,EAAQwX,EAAaW,SAAS/D,EAAQzU,KAAK0U,WAC3CuD,EAAgBH,EAAcU,SAAS/D,EAAQzU,KAAK0U,WACpD/T,EAAcX,KAAKuP,QAAQ/O,QAAQH,EAAMuB,MAG/CsW,IAAU,EAAI9L,EADA6L,EAAcrW,KAAK+E,SAAShG,EAAY6D,OAAOE,MACnB1E,KAAKY,gBAAkBwE,GAAW,EAAIyS,EAAajW,KAAKd,OAElG,IAAK,IAAIqF,EAAM,EAAGA,EAAMxF,EAAYG,KAAMqF,GAAO,EAChCxF,EAAY2J,iBAAiBnE,KAC7B8R,EAAcrW,KAAK0I,iBAAiBnE,IAGjD6R,GAGN,CAEA,MAAO,CACLE,KAAAA,EACAF,SAAWA,EAAW5L,EAAoB,IAE9C,GAAC,mBAED,SAAMyL,EAAuBC,GAA0C,WAC/D1L,EAAmByL,EAAaE,sBAElCrQ,EAAI,EAER1H,KAAKwX,UAAUiB,aAAazY,KAAK0U,WACjC1U,KAAKwX,UAAUkB,gBAAgB1Y,KAAK+L,cAEpC,IAAK,IAAItG,EAAI,EAAGA,EAAIzF,KAAKyX,WAAYhS,GAAK,EAAG,CAI3C,IAHA,IAAMkT,GAAY,IAAIN,MAAOC,UACvBM,GAAqB,IAAIP,MAAOC,UAE7BC,EAAQ,EAAG9D,EAAS,EAAG8D,EAAQnM,EAAkBmM,GAASvY,KAAK0U,UAAWD,GAAUzU,KAAK0U,UAAW,CAC3G,IAAMmE,GAAsB,IAAIR,MAAOC,UACjCjY,EAAQwX,EAAaW,SAAS/D,EAAQzU,KAAK0U,WAC3CpU,EAASwX,EAAcU,SAAS/D,EAAQzU,KAAK0U,WAC7C/T,EAAcX,KAAKuP,QAAQ/O,QAAQH,EAAMuB,MAU/C,GARA5B,KAAKuP,QAAQ7D,SAASrL,EAAMuB,KAAMtB,EAAOsB,KAAMjB,EAAaX,KAAKY,gBAEjEZ,KAAKwX,UAAUsB,OAAOpR,GAEtB1H,KAAKuP,QAAQwE,YAAYxT,SAAQ,SAACN,GAChC,EAAKuX,UAAUuB,SAAS9Y,EAC1B,IAEID,KAAK0X,QAAS,CAChB,IAAMQ,EAAOlY,KAAKkY,KAAK7X,EAAOC,GACxB0Y,GAAmB,IAAIX,MAAOC,UACpChW,QAAQkC,IAAI,UAAD,OACCiQ,EAAM,cAAMrI,EAAgB,0BACpC4M,EAAmBH,EAAmB,iCACfxG,IAAO2G,EAAmBJ,GAAsB,IAAM,GAAE,sBAAcvG,GAC7F6F,EAAKA,KACL,GACD,mBAAWA,EAAKF,UAErB,CACF,CAEA,GAAIhY,KAAK0X,UACFjS,EAAI,GAAKzF,KAAK2X,aAAgB,EAAG,CACpC,IAAMsB,GAAU,IAAIZ,MAAOC,UACrBY,EAAgBlZ,KAAKkY,KAAKL,EAAcC,GAE9CxV,QAAQkC,IAAI,cAAD,OACKiB,EAAI,EAAC,oBAAY4M,GAAM6G,EAAchB,KAAM,GAAE,wBACzDgB,EAAclB,SAAQ,sBACViB,EAAUN,GAAa,IAAI,OAE7C,CAGF3Y,KAAK4X,aAAa,CAChBuB,UAAW1T,GAEf,CAEA,OAAOzF,IACT,I,wEAAC,EA9G0B,CAASuX,I,4zCCD/B,IAAM6B,GAAO,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAyCjB,O,EAzCiB,G,EAAA,oBAClB,SAAMvB,EAAuBC,GAAyC,WAC9D1L,EAAmByL,EAAaE,sBAElCrQ,EAAI,EAER1H,KAAKwX,UAAUiB,aAAarM,GAC5BpM,KAAKwX,UAAUkB,gBAAgB1Y,KAAK+L,cAEpC,IAAK,IAAItG,EAAI,EAAGA,EAAIzF,KAAKyX,WAAYhS,GAAK,EAAG,CAC3C,IAAMkT,GAAY,IAAIN,MAAOC,UACvB3X,EAAcX,KAAKuP,QAAQ/O,QAAQqX,EAAajW,MAUtD,GARA5B,KAAKuP,QAAQ7D,SAASmM,EAAajW,KAAMkW,EAAclW,KAAMjB,EAAaX,KAAKY,gBAE/EZ,KAAKwX,UAAUsB,OAAOpR,GAEtB1H,KAAKuP,QAAQwE,YAAYxT,SAAQ,SAACN,GAChC,EAAKuX,UAAUuB,SAAS9Y,EAC1B,IAEID,KAAK0X,UACFjS,EAAI,GAAKzF,KAAK2X,aAAgB,EAAG,CACpC,IAAMuB,EAAgBlZ,KAAKkY,KAAKL,EAAcC,GACxCmB,GAAU,IAAIZ,MAAOC,UAE3BhW,QAAQkC,IAAI,cAAD,OACKiB,EAAI,EAAC,oBAAY4M,GAAM6G,EAAchB,KAAM,GAAE,wBAAgB7F,GACzE6G,EAAclB,SACd,GACD,sBAAciB,EAAUN,GAAa,IAAI,OAE9C,CAGF3Y,KAAK4X,aAAa,CAChBuB,UAAW1T,GAEf,CAEA,OAAOzF,IACT,M,qEAAC,EAzCiB,CAASuX,I,g1DCAtB,IAAM8B,GAAU,WAKrB,WAAY9J,I,4FAAqB,2BAJM,MAAI,qBACZ,KAAI,uBACF,KAG/BvP,KAAKuP,QAAUA,CACjB,C,QA8BC,O,EA9BA,G,EAAA,oBAED,SAAMpG,GAQJ,IAPA,IAAIyB,EAAO5K,KAAKuP,QAAQ3E,KAAKzB,EAAQmQ,oBAAqB,GAErB,KAAtBnQ,EAAQoQ,UAAU,KAAI,GAA9B9Y,EAAC,KAAEC,EAAC,KAC+B,KAA3ByI,EAAQqQ,cAAc/Y,EAAGC,GAAE,GAAnC8C,EAAC,KAAEC,EAAC,KAEPsG,EAAQ,IAAIpG,GAAO3D,KAAKuP,QAAQvD,gBAAgB,GAAIhM,KAAKuP,QAAQvD,gBAAgB,IAAIlC,WAEhFqP,EAAY,EAAGA,EAAYnZ,KAAKyX,WAAY0B,GAAa,EAAG,CACnE,IAAM3E,EAAQ2E,EAAY3V,EAAEvC,OAE5B2J,EADwD,GAAxC5K,KAAKuP,QAAQ/O,QAAQgD,EAAEgR,GAAQ/Q,EAAGsG,GAAM,GAA5C,GAEZ,IAA0F,KAA5D/J,KAAKuP,QAAQwJ,SAASvV,EAAEgR,GAAQ/Q,EAAGsG,EAAO/J,KAAK+L,cAAa,GAAnF0N,EAAW,KAClB1P,EAD0B,KAE1Ba,EAAc,KAAPA,EAA6B,KAAd6O,EACtBnX,QAAQkC,IAAI,aAAD,OAAc2U,EAAY,EAAC,oBAAYvO,EAAI,sBAAc5K,KAAKuP,QAAQmK,OAAOvQ,GAASwQ,QACnG,CACA,MAAO,CAAC/O,EACV,GAAC,2BAED,SAAc/G,GAEZ,OADA7D,KAAKyX,WAAa5T,EACX7D,IACT,GAAC,6BAED,SAAgB6D,GAEd,OADA7D,KAAK+L,aAAelI,EACb7D,IACT,M,qEAAC,EArCoB,G,0yBCFhB,IAAe4Z,GAAuB,IAG3C,WAAYzQ,G,qGAAkB,S,EAAA,M,OAAA,c,mCAFD,K,iDAAA,KAG3BnJ,KAAKmJ,QAAUA,CACjB,I,i9CCHK,IAAM0Q,GAAuB,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACoC,OADpC,sDACgB,SAACnE,GAAO,OAAKA,CAAO,MAiBrE,O,EAjBqE,G,EAAA,oBAEtE,WACE,IAAK,IAAIM,EAAe,EAAGA,EAAehW,KAAKmJ,QAAQ4O,sBAAuB/B,GAAgB,EAE5F,IADA,IAAMN,EAAU1V,KAAKyP,SAASzP,KAAKmJ,QAAQ2Q,UAAU9D,IAC5C9P,EAAM,EAAGA,EAAMlG,KAAKmJ,QAAQvH,KAAKsB,KAAMgD,GAAO,EACjDwP,IACF1V,KAAKmJ,QAAQvH,KAAKA,KAAKsE,GAAK8P,GAAgBN,EAAQ9T,KAAKsE,GAAK,IAIpE,OAAOlG,KAAKmJ,OACd,GAAC,yBAED,SAAYsG,GAEV,OADAzP,KAAKyP,SAAWA,EACTzP,IACT,M,qEAAC,EAlBiC,CAAS4Z,I,4zCCDtC,IAAMG,GAA4B,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,uDAyBtC,O,EAzBsC,G,EAAA,oBACvC,SAAM5Q,GAIJ,IAHA,IAAIT,EAAMsR,IACN9U,GAAM,IAEDiB,EAAM,EAAGA,EAAMgD,EAAQ4O,sBAAuB5R,GAAO,EAE5D,IADA,IAAMuP,EAAUvM,EAAQ2Q,UAAU3T,GACzBD,EAAM,EAAGA,EAAMwP,EAAQxS,KAAMgD,GAAO,EACvCwC,EAAMgN,EAAQ9T,KAAKsE,GAAK,KAC1BwC,EAAMgN,EAAQ9T,KAAKsE,GAAK,IAEtBhB,EAAMwQ,EAAQ9T,KAAKsE,GAAK,KAC1BhB,EAAMwQ,EAAQ9T,KAAKsE,GAAK,IAK9B,IAAK,IAAIC,EAAM,EAAGA,EAAMgD,EAAQ4O,sBAAuB5R,GAAO,EAE5D,IADA,IAAMuP,EAAUvM,EAAQ2Q,UAAU3T,GACzBD,EAAM,EAAGA,EAAMwP,EAAQxS,KAAMgD,GAAO,EAC3CiD,EAAQvH,KAAKA,KAAKsE,GAAKC,IAAQuP,EAAQ9T,KAAKsE,GAAK,GAAKwC,IAAQxD,EAAMwD,GAIxE,OAAOS,CACT,M,qEAAC,EAzBsC,CAASyQ,I,i9CCA3C,IAAMK,GAAiC,a,sRAAA,U,QAAA,G,EAAA,E,kZAAA,sGACT,OADS,6DACf,QAAM,EAqClC,O,EArCkC,G,EAAA,oBAEnC,SAAM9Q,GAMJ,IALA,IAAM+Q,EAAa,GACfC,EAAuB,EACvBzV,EAAM,EACN0V,EAAc,EAETpE,EAAe,EAAGA,EAAe7M,EAAQ4O,sBAAuB/B,GAAgB,EAEvF,IADA,IAAMN,EAAUvM,EAAQ2Q,UAAU9D,GACzB9P,EAAM,EAAGA,EAAMiD,EAAQkR,iBAAkBnU,GAAO,EACnDoU,MAAM5E,EAAQ9T,KAAKsE,GAAK,UAAuC,IAAzBwP,EAAQ9T,KAAKsE,GAAK,GAC1DgU,EAAW9Z,KAAK,CACd8F,IAAAA,EACAC,IAAKuP,KAGPhR,GAAOgR,EAAQ9T,KAAKsE,GAAK,GACzBiU,KAaN,MAR8B,SAA1Bna,KAAKua,mBACPH,EAAc1V,EAAMyV,GAGtBD,EAAW3Z,SAAQ,YAAkB,IAAf2F,EAAG,EAAHA,IAAKC,EAAG,EAAHA,IACzBgD,EAAQvH,KAAKA,KAAKsE,GAAKC,GAAOiU,CAChC,IAEOjR,CACT,GAAC,iCAED,SAAoB5H,GAElB,OADAvB,KAAKua,iBAAmBhZ,EACjBvB,IACT,M,qEAAC,EAtC2C,CAAS4Z,I,mvCCChD,IAAMY,GAAsB,a,sRAAA,U,QAAA,G,EAAA,E,kZAGjC,WAAYrR,GAAkB,M,MAFA,O,4FAEA,S,EACb,GAAf,cAAMA,I,EAHoB,I,OAGX,e,wFAHa,CAI9B,CAeC,O,EAfA,G,EAAA,oBAED,SAAMA,GAA2B,WAC3BqL,EAAQ,EACN5S,EAAO+B,GAAAA,KACXwF,EAAQvH,KAAKmE,YAAYnE,KAAK2T,MAAK,SAACkF,EAAoBC,GAMtD,YALoC,IAAzB,EAAKC,SAASnG,KAEvB,EAAKmG,SAASnG,GAAStQ,KAAK0B,SAAW,IAEzC4O,GAAS,EACF,EAAKmG,SAASnG,EAAQ,EAC/B,KACAzO,YAAYnE,KACd,OAAO,IAAIyS,GAAQlL,EAAQkR,iBAAkBlR,EAAQ4O,sBAAuBnW,EAC9E,M,qEAAC,EApBgC,CAASgY,I,yxBCFrC,IAAegB,GAA4B,kB,4FAAA,YCFlD,MAAM,GAA+B/a,QAAQ,a,k3CCGN,IAGlCgb,IAAQ,SAARA,GAAAA,EAAAA,EAAQ,iCAARA,EAAAA,EAAQ,6BAARA,EAAAA,EAAQ,8BAARA,KAAAA,GAAQ,KAMN,IAAMC,GAAuB,a,sRAAA,U,UAAA,G,EAAA,E,kZAIlC,WAAYlZ,GAA+B,MAExB,O,4FAFwB,SACjC,MAAR,gBAAQ,OAJuC,MAAI,sBACL,MAI9C,EAAKA,KAAOA,EAAK,CACnB,CAyBC,O,EAzBA,E,EAwCD,4BAtCA,SAAqBP,GAanB,OAAO,IAAIY,SAAQ,SAACC,GAClB6Y,GAAU,CACRC,UAAU,EACV1a,OAAQ,QAEP2a,SAAS5Z,GACT0T,MAAK,SAACzN,GACLpF,EAAQ,IAAI4Y,EAAwBxT,GACtC,GACJ,GACF,K,EAzBC,oBA2BD,WAQE,IAAM8E,EAAmBpM,KAAK4B,KAAKX,OAC7BqT,EAActU,KAAK4B,KAAK,GAAGX,OAEjC,OAAO,IAAI0C,GAAOyI,EAAkBkI,EAAatU,KAAK4B,MAAMmE,WAC9D,M,gFAdC,EAhCiC,CAAS6U,I,4gECTtC,IC+BDM,GAAiB,CAAE5H,iBAAAA,GAAkBU,iBAAAA,IACrC9P,GAAO,CACXP,OAAAA,IAEIwX,GAAQ,CACZnK,aAAAA,GACAC,cAAAA,GACAE,UAAAA,GACAC,cAAAA,GACAF,UAAAA,GACAyB,UAAAA,GACAM,aAAAA,GACAD,oBAAAA,GACAG,eAAAA,IAEI0B,GAAiB,CACrBA,eAAgBuG,GAChBjF,yBAAAA,IAEIkF,GAAY,CAChBhF,cAAAA,GACAQ,yBAAAA,GACAE,iBAAAA,GACAE,kBAAAA,GACAG,iBAAAA,IAEIgC,GAAU,CACdjB,iBAAAA,GACAiB,QAASkC,GACTjC,WAAAA,IAEIkC,GAAkB,CACtB1B,wBAAAA,GACAE,6BAAAA,GACAE,kCAAAA,GACAO,uBAAAA,IAEIgB,GAAc,CAClBvU,eAAAA,GACAjB,eAAAA,EACAyV,ejDpE4B,SAACla,GAC7B2F,GAAqB3F,CACvB,EiDmEE4F,eAAAA,IAEIkN,GAAU,CACdA,QAASqH,IAELC,GAAuB,CAC3Bb,wBAAAA,GACAc,uCD/EiD,a,sRAAA,U,UAAA,G,EAAA,E,kZAGjD,WAAYha,GAAc,M,IAEP,O,4FAFO,S,EAChB,GAAR,gBAHuB,I,OAGf,W,mCAHe,G,iDAAA,GAIvB,EAAKA,KAAOA,EAAK,CACnB,CAaC,O,EAbA,E,EAiBA,4BAfD,SAAqBP,GACnB,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAYf,GAAM,SAACgB,EAAKwZ,GAClBxZ,EACFF,EAAOE,GAITH,EAAQ,IAAI0Z,EAAuCC,EAAOnI,SAAS,UACrE,GACF,GACF,K,EAbC,oBAeD,WACE,OAAO1T,KAAK4B,IACd,M,gFAJC,EAnBgD,CEHS,kB,4FAAA,cDoFtD9B,GAAU,CACdkJ,WAAAA,I","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Recurrent.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Shuffle.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-ts/./src/typescript/main.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer], this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\n/*import { GPU } from \"gpu.js\";*/\n\n//export const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Dimension, LayersRNN } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): LayersRNN[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(this.dimensions[1], 1).setZeros();\n    let aPrev = new Matrix(this.dimensions[0], 1).setRandom(this.dimensions[1]);\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).setMin(1e-3).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n      x = new Matrix(this.dimensions[1], 1).setZeros();\n      let maxIndex = y.colMaxCoeffIndex(0);\n      if (maxIndex === -1) {\n        maxIndex = Math.floor(Math.random() * this.dimensions[1]);\n        idx = charIndices[chars[maxIndex]];\n      }\n      x.data[maxIndex][0] = 1;\n\n      indices.push(idx);\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    if (counter === 50) {\n      indices.push(newLineCharacter);\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(this.dimensions[1], this.dimensions[0]).setZeros();\n      x[t].data[X.data[t - 1][0]][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(x[t], a[t - 1]);\n      a[t] = _a;\n      yHat[t] = _yHat; //.setMin(1e-5);\n      loss += 0; // todo\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    let _dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    let _dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    let _dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    let _db = new Matrix(this.layers[0].db.rows, this.layers[0].db.cols).setZeros();\n    let _dby = new Matrix(this.layers[0].dby.rows, this.layers[0].dby.cols).setZeros();\n    let _daNext = new Matrix(this.layers[0].daNext.rows, this.layers[0].daNext.rows).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      // loop over examples\n      const dy = Matrix.from(a[t].data);\n      dy.data[X.data[t - 1][0]][0] -= 1;\n      const { dWax, dWya, dWaa, db, dby, daNext } = this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n      _dWax = _dWax.add(dWax.replicate(1, _dWax.cols));\n      _dWaa = _dWaa.add(dWaa.replicate(1, _dWaa.cols));\n      _dWya = _dWya.add(dWya);\n      _db = _db.add(db);\n      _dby = _dby.add(dby);\n      _daNext = _daNext.add(daNext);\n    }\n\n    // gradient clipping\n    this.layers[0].dWax = _dWax.setMin(-5).setMax(5);\n    this.layers[0].dWaa = _dWaa.setMin(-5).setMax(5);\n    this.layers[0].dWya = _dWya.setMin(-5).setMax(5);\n    this.layers[0].db = _dby.setMin(-5).setMax(5);\n    this.layers[0].dby = _dby.setMin(-5).setMax(5);\n    this.layers[0].daNext = _daNext.setMin(-5).setMax(5);\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(\n      this.layers[0].dWax.replicate(1, this.getDimensions()[2]).multiply(-learningRate)\n    );\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    //this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    //this.layers[0].by = this.layers[0].by.add(\n    //  this.layers[0].dby.multiply(-learningRate).rowwiseSum().divide(this.layers[0].dby.cols).transpose()\n    //);\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  getDimensions(): Dimension {\n    return this.dimensions;\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RecurrentLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer3D\n  | AbstractLayer1D;\nexport type Layers1D = LogisticLayer | SoftmaxLayer | TanhLayer | ReluLayer | SoftplusLayer | PurelinLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RecurrentLayer;\nexport type LayersLSTM = LSTMLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\nimport {Layers} from \"../../types\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n\n    const delta = sigma.dot(previousActivations.transpose());\n    this.layer.gW = delta.divide(numberOfExamples).add(layer.W.multiply(regularization / numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers} from \"../../types\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers, Layers3D} from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers, Layers3D} from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = this.vb.setZeros();\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m.setMin(0);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { getComputation } from \"../Computation\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      );\n\n      result.setCol(i, pool.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport interface GradientResult {\n  dWax: Matrix;\n  dWya: Matrix;\n  dWaa: Matrix;\n  db: Matrix;\n  dby: Matrix;\n  daNext: Matrix;\n}\n\nexport class RecurrentLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public aNext: Matrix | null = null;\n  public aPrev: Matrix | null = null;\n  public daNext: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(this.getWidth(), this.getHeight());\n    this.Wax = this.Wax.setRandom(this.getWidth());\n\n    this.Waa = new Matrix(this.getWidth(), this.getWidth());\n    this.Waa = this.Waa.setRandom(this.getWidth());\n\n    this.Wya = new Matrix(this.getDepth(), this.getWidth());\n    this.Wya = this.Wya.setRandom(this.getDepth());\n\n    this.b = new Matrix(this.getWidth(), 1);\n    this.b = this.b.setRandom(this.getWidth());\n\n    this.by = new Matrix(this.getDepth(), 1);\n    this.by = this.by.setRandom(this.getDepth());\n\n    this.dWax = new Matrix(this.getWidth(), this.getHeight());\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(this.getWidth(), this.getWidth());\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(this.getDepth(), this.getWidth());\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(this.getWidth(), 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(this.getDepth(), 1);\n    this.dby = this.dby.setZeros();\n\n    this.daNext = new Matrix(this.getWidth(), this.getWidth());\n    this.daNext = this.daNext.setZeros();\n  }\n\n  forward(x: Matrix, aPrev: Matrix): Matrix[] {\n    const aNext = this.Wax.dot(x)\n      .add(this.Waa.dot(aPrev).replicate(1, this.getWidth()))\n      .add(this.b.replicate(1, x.cols))\n      .tanh();\n    const y = this.Wya.dot(aNext).add(this.by.replicate(1, x.cols)).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    this.aPrev = aPrev;\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): GradientResult {\n    const dTanh = a.pow(2).minusOne().multiply(dy);\n\n    const dWax = dTanh.dot(x.transpose());\n    const dWaa = dTanh.dot(aPrev.transpose());\n    const db = this.db; //.add(dtanh.colwiseSum().divide(dtanh.cols)).setMin(-5).setMax(5);\n    const dby = this.dby; //.replicate(1, this.getWidth()).add(dy).setMin(-5).setMax(5);\n    const dWya = this.dWya; //.add(dy.dot(a.transpose())).setMin(-5).setMax(5);\n    const daNext = this.Waa.transpose().dot(dTanh);\n\n    return {\n      dWax,\n      dWya,\n      dWaa,\n      db,\n      dby,\n      daNext,\n    };\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RecurrentLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n}\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.sW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.sb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWCorrected = layer.sW.add(1e-8).sqrt();\n    const sbCorrected = layer.sb.add(1e-8).sqrt();\n\n    layer.W = layer.W.subtract(vWCorrected.divide(sWCorrected).multiply(learningRate));\n    layer.b = layer.b.subtract(vbCorrected.divide(sbCorrected).multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = correctOutput.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer, CostResult } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = this.batchSize;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0.0;\n    let accuracy = 0.0;\n\n    // calculate penalty\n    let penalty = 0.0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty = layer.penalty();\n    });\n\n    const startTime = new Date().getTime();\n    const startIterationTime = new Date().getTime();\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n      const startIterationTime2 = new Date().getTime();\n      const input = inputDataset.getBatch(offset, this.batchSize);\n      const correctOutput = outputDataset.getBatch(offset, this.batchSize);\n      const predictions = this.network.forward(input.data);\n\n      const error = correctOutput.data.multiply(predictions.log()).sum();\n      cost += (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n      for (let col = 0; col < predictions.cols; col += 1) {\n        const index1 = predictions.colMaxCoeffIndex(col);\n        const index2 = correctOutput.data.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input, output);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset, outputDataset);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.01;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n\n    const [X, Y] = dataset.buildData(100);\n    const [x, y] = dataset.vectorization(X, Y);\n\n    let aPrev = new Matrix(this.network.getDimensions()[0], this.network.getDimensions()[0]).setZeros();\n\n    for (let iteration = 0; iteration < this.iterations; iteration += 1) {\n      const index = iteration % x.length;\n      const [_loss] = this.network.forward(x[index], y, aPrev);\n      loss = _loss;\n      const [currentLoss, _aPrev] = this.network.optimize(x[index], y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${iteration + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset).trim()}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(dataset: Dataset): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatasetModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatasetModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatasetModifier extends AbstractDatasetModifier {\n  apply(dataset: Dataset): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatasetModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(dataset: Dataset): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      dataset.data.data[row][col] = valueToFill;\n    });\n\n    return dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatasetModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class ShuffleDatasetModifier extends AbstractDatasetModifier {\n  public sortList: number[] = [];\n\n  constructor(dataset: Dataset) {\n    super(dataset);\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let index = 0;\n    const data = Matrix.from(\n      dataset.data.transpose().data.sort((exampleA: number[], exampleB: number[]) => {\n        if (typeof this.sortList[index] === \"undefined\") {\n          // first run\n          this.sortList[index] = Math.random() - 0.5;\n        }\n        index += 1;\n        return this.sortList[index - 1];\n      })\n    ).transpose().data;\n    return new Dataset(dataset.getExampleSize(), dataset.getNumberOfExamples(), data);\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { NetworkRNN } from \"./Network\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RecurrentLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n  Network,\n};\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Network","dimensions","this","layer","size","layers","push","input","output","forEach","forward","X","Y","predictions","regularization","m","cols","sigma","subtract","length","getBackPropagation","propagate","derivative","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractComputation","name","func","kernels","Error","args","apply","elementWiseDivide","m1","m2","rows","kernel","gpu","createKernel","a","thread","x","y","setOutput","Matrix","divideNumber","num","constants","number","setConstants","softmaxActivation","Math","exp","divider","colwiseSum","replicate","softmaxLoss","log","elementWiseMultiply","sum","logisticActivation","logisticLoss","kernel2","kernel3","add","tanhActivation","reluActivation","max","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","i","fillRandom","parameter","random","fillZeros","multiplyNumber","transpose","ComputationGPU","addKernel","row","col","firstMatrix","sub","toMultiply2","toMultiply1","subtractFromNumber","logisticBackpropagation","oldY","multiply","minusOne","reluBackpropagation","Array","logMinusOne","addNumber","ComputationCPU","currentComputation","getComputation","resize","generateData","arr","Float32Array","Number","NaN","t","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","min","shape","cb","divide","rowwiseSum","LayerType","NetworkRNN","vocabularySize","sequenceLength","dataset","Waa","Wax","Wya","by","indices","charIndices","getCharIndices","newLineCharacter","chars","getChars","setZeros","aPrev","setRandom","idx","counter","setMin","tanh","softmax","colMaxCoeffIndex","floor","map","join","a0","yHat","loss","_a","_yHat","A","_dWax","_dWaa","_dWya","_db","db","_dby","dby","_daNext","daNext","dy","backward","dWax","dWya","dWaa","setMax","learningRate","getDimensions","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","delta","gW","gb","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","backPropagation","width","height","depth","AbstractLayer1D","vW","vb","sW","sb","dW","activation","setWidth","is3D","setHeight","SoftmaxLayer","LogisticLayer","TanhLayer","ReluLayer","SoftplusLayer","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","boundingY","boundingX","currentResultCol","channel","maxpool","resultWidth","resultHeight","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","conv","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","RecurrentLayer","aNext","dTanh","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","DatasetVocabulary","str","toLowerCase","Set","split","sort","dataSize","replace","example","char","tx","substr","sentence","_m","exampleIndex","getExamples","ch","DatasetVocabularyBuilder","AbstractOptimizer","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWCorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerAdagrad","adagrad","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","accuracy","correctOutput","cost","MiniBatchTrainer","ceil","Date","getTime","batch","getBatch","setBatchSize","setLearningRate","startTime","startIterationTime","startIterationTime2","setT","optimize","endIterationTime","endTime","currentResult","iteration","Trainer","RNNTrainer","getVocabularySize","buildData","vectorization","currentLoss","sample","trim","AbstractDatasetModifier","CallbackDatasetModifier","exampleAt","MinMaxScalingDatasetModifier","Infinity","MissingDataScalingDatasetModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","ShuffleDatasetModifier","exampleA","exampleB","sortList","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","TrainerTrainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource","DatasetVocabularyBuilderSourceTextFile","buffer"],"sourceRoot":""}