{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/index.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/Dataset/datasetmodifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/datasetmodifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/datasetmodifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/datasetmodifier/MissingData.ts","webpack://impulse-ts/./src/typescript/Dataset/datasetmodifier/index.ts","webpack://impulse-ts/./src/typescript/Dataset/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/index.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/index.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Network.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/index.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/index.ts","webpack://impulse-ts/./src/typescript/Trainer/optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/optimizer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(predictions.data[row][col]);\n    }\n  }\n\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, data)).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] * (1.0 - m.data[row][col]);\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        log[row][col] = Math.log(output.data[row][col]);\n      }\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col]);\n      }\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(elementWiseMultiply(output, logMatrix), elementWiseMultiply(subMatrix, logSubMatrix)).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0, 2.0);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = m.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1 / (1 + Math.exp(-Math.log(1 + Math.exp(m.data[row][col]))));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.random() - 0.1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * (1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0, 2.0);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][] | number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let col = 0; col < numberOfExamples; col += 1) {\n      data[col] = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[col][row] = Number(arr[row][col].length ? arr[row][col] : 0);\n        } else if (typeof arr[row][col] === \"number\") {\n          data[col][row] = arr[row][col];\n        }\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    if (this.data) {\n      return this.data.col(index);\n    }\n\n    return null;\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    if (this.data) {\n      const data = this.data.block(0, offset, this.data.rows, batchSize);\n      return new Dataset(data.rows, data.cols, data.data);\n    }\n    return new Dataset(0, 0, [[]]);\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      if (example && example.data) {\n        for (let row = 0; row < example.rows; row += 1) {\n          if (isNaN(example.data[row][0])) {\n            rowsToFill.push({\n              row,\n              col: example,\n            });\n          } else {\n            sum += example.data[row][0];\n            correctExamplesCount++;\n          }\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { CallbackDatabaseModifier } from \"./Callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./MissingData\";\n\nexport { CallbackDatabaseModifier, MissingDataScalingDatabaseModifier, MinMaxScalingDatabaseModifier };\n","import { Dataset } from \"./Dataset\";\n\nexport { Dataset };\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DocumentBuilderSource/AbstractDocumentBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n\n  static fromSource(source: AbstractDatasetBuilderSource): Promise<Dataset> {\n    return new Promise((resolve) => {});\n  }\n}\n","import { DatasetBuilder } from \"./DatasetBuilder\";\n\nexport { DatasetBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation/utils\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation/utils\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, this.width) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cW.resize(this.height, this.width);\n    this.cW = getComputation().execute(\"fillZeros\", this.cW) as Matrix;\n\n    this.cb.resize(this.height, 1);\n    this.cb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.cW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation/utils\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {}\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation/utils\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation/utils\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation/utils\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation/utils\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    if (this.layer) {\n      const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n      const delta = getComputation().execute(\"multiply\", sigma, previousActivations.transpose().conjugate()) as Matrix;\n      this.layer.gW = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"divideNumber\", delta, numberOfExamples) as Matrix,\n        getComputation().execute(\"multiplyNumber\", this.layer.W, regularization / numberOfExamples) as Matrix\n      ) as Matrix;\n      this.layer.gb = getComputation().execute(\"divideNumber\", sigma.rowwiseSum(), numberOfExamples) as Matrix;\n      if (this.previousLayer !== null) {\n        return getComputation().execute(\n          \"elementWiseMultiply\",\n          getComputation().execute(\"multiply\", this.layer.W.transpose(), sigma) as Matrix,\n          this.previousLayer.derivative(this.previousLayer.A)\n        ) as Matrix;\n      }\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      const aPrev = previousLayer.derivative(previousLayer.A);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n};\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          data[row][col] = arr[col][row];\n        } else if (arr[col] && typeof arr[col][row] === \"number\") {\n          data[row][col] = arr[col][row];\n        } else {\n          data[row][col] = 0;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[row] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        if (this.data) {\n          data[newRow][newCol] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data) {\n        data[row] = [this.data[row][col]];\n      }\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { Dimension, Layers } from \"./types\";\nimport { Matrix } from \"./Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"./Computation/utils\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let delta = getComputation().execute(\"subtract\", predictions, Y) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const backPropagation = this.layers[layer].getBackPropagation();\n      if (backPropagation) {\n        delta = backPropagation.propagate(X, m, regularization, delta);\n      }\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import Network from \"../Network\";\nimport { AbstractOptimizer } from \"./optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 0;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += batchSize, offset += batchSize) {\n      const inputBatch = inputDataset.getBatch(offset, batchSize).data;\n      const outputBatch = outputDataset.getBatch(offset, batchSize).data;\n\n      const predictedOutput = this.network.forward(inputBatch);\n      const correctOutput = outputBatch;\n\n      const miniBatchSize = correctOutput.cols;\n\n      const loss = this.network.loss(correctOutput, predictedOutput);\n      const error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss + (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = correctOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    if (this.optimizer && this.network) {\n      this.optimizer.setBatchSize(this.batchSize);\n\n      for (let i = 0; i < this.iterations; i += 1) {\n        const startIterationTime = new Date().getTime();\n\n        for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n          const startIterationTime2 = new Date().getTime();\n          const input = inputDataset.getBatch(offset, this.batchSize);\n          const output = outputDataset.getBatch(offset, this.batchSize);\n          const forward = this.network.forward(input.data);\n\n          this.network.backward(input.data, output.data, forward, this.regularization);\n\n          this.network.getLayers().forEach((layer) => {\n            if (this.optimizer) {\n              this.optimizer.setT(++t);\n              this.optimizer.optimize(layer);\n            }\n          });\n\n          if (this.verbose) {\n            const cost = this.cost(input, output);\n            const endIterationTime = new Date().getTime();\n            console.log(\n              `Batch: ${offset} / ${numberOfExamples} | Cost: ${cost.cost} | Batch time: ${\n                endIterationTime - startIterationTime2\n              } ms | Time from start: ${(endIterationTime - startIterationTime) / 1000} s.`\n            );\n          }\n        }\n\n        if (this.verbose) {\n          if ((i + 1) % this.verboseStep === 0) {\n            const endTime = new Date().getTime();\n            const currentResult = this.cost(inputDataset, outputDataset);\n\n            console.log(\n              `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${currentResult.accuracy}% | Time: ${\n                (endTime - startTime) / 100\n              } s.`\n            );\n          }\n        }\n\n        if (typeof this.stepCallback === \"function\") {\n          this.stepCallback.call(null, {\n            iteration: i,\n          });\n        }\n      }\n    }\n\n    return this;\n  }\n}\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\n\nexport { MiniBatchTrainer };\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.cW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, gamma) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1.0 - gamma) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.cW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.cb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.cb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.cb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - beta1) as Matrix\n    ) as Matrix;\n    const wCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(beta1, t)) as Matrix;\n\n    layer.cW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - beta1) as Matrix\n    ) as Matrix;\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, 1 - Math.pow(beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", wCorrected, sCorrected) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - beta1) as Matrix\n    ) as Matrix;\n    const wCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(beta1, t)) as Matrix;\n    layer.cb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cb, beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - beta2\n      ) as Matrix\n    ) as Matrix;\n    const sCorrected2 = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"divideNumber\", layer.cb, 1 - Math.pow(beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseDivide\", wCorrected2, sCorrected2) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\nimport { OptimizerAdadelta } from \"./OptimizerAdadelta\";\n\nexport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta };\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"gpu.js\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta } from \"./Trainer/optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/datasetmodifier\";\nimport { ComputationCPU, ComputationGPU, setComputation } from \"./Computation\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\n\nexport { NetworkBuilder, Math, Layer, Dataset, DatasetBuilder, Optimizer, Trainer, DatasetModifier, Computation };\n"],"names":["AbstractComputation","name","func","kernels","args","apply","Matrix","elementWiseDivide","m1","m2","rows","Error","cols","data","row","col","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","elementWiseMultiply","sum","logisticActivation","logisticDerivative","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","add","tanhActivation","tanhDerivative","pow","reluActivation","max","reluDerivative","softplusActivation","softplusDerivative","penalty","sqrt","purelinLoss","multiply","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","multiplyNumber","transpose","ComputationCPU","addKernel","GPU","gpu","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","setComputation","currentComputation","type","getComputation","Dataset","exampleSize","numberOfExamples","arr","Number","length","index","offset","batchSize","block","AbstractDatasetModifier","dataset","CallbackDatabaseModifier","example","exampleIndex","getNumberOfExamples","callback","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","isNaN","push","modificationType","forEach","csvtojson","DatasetBuilder","csvPath","Promise","resolve","noheader","fromFile","then","source","AbstractLayer","W","A","Z","gW","gb","vW","cW","vb","cb","backPropagation","input","execute","activation","value","width","height","depth","previousLayer","AbstractLayer1D","resize","is1D","setWidth","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getWidth","getHeight","getDepth","im2col","LayerType","ConvLayer","numFilters","filterSize","padding","stride","size","result","conv","tmp","setCol","rollToColMatrix","FullyConnectedLayer","getType","maxpool","LogisticLayer","logistic","MaxPoolLayer","pool","ReluLayer","relu","SoftmaxLayer","softmax","SoftplusLayer","softplus","TanhLayer","tanh","AbstractBackPropagation","layer","Backpropagation1Dto1D","regularization","sigma","previousActivations","delta","conjugate","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToMaxPool","BackpropagationToConv","BackpropagationFactory","fullyconnected","getPadding","getStride","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","aPrev","c","h","w","vertStart","vertEnd","horizStart","horizEnd","d","vertical","verticalPad","horizontal","horizontalPad","z","prevLayer","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","generateData","Float32Array","oldData","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","fs","Network","dimensions","layers","forward","X","Y","getBackPropagation","propagate","loss","error","path","resultJSON","weights","JSON","stringify","reject","writeFile","err","console","AbstractNetworkBuilder","network","layerClass","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","readFile","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","undefined","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","numBatches","ceil","cost","accuracy","batch","inputBatch","getBatch","outputBatch","predictedOutput","correctOutput","miniBatchSize","index1","colMaxCoeffIndex","index2","MiniBatchTrainer","startTime","Date","getTime","t","setBatchSize","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","call","iteration","AbstractOptimizer","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","DatasetDataset","DatasetBuilderBuilder","NetworkBuilder","Layer","Optimizer","Trainer","DatasetModifier","Computation"],"sourceRoot":""}