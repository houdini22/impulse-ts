{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Network.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(predictions.data[row][col] + epsilon);\n    }\n  }\n\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, data)).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] * (1.0 - m.data[row][col]);\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        log[row][col] = Math.log(output.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return subtract(\n    elementWiseMultiply(multiplyNumber(output, -1), logMatrix),\n    elementWiseMultiply(subMatrix, logSubMatrix)\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0, 2.0);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = m.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1 / (1 + Math.exp(-Math.log(1 + Math.exp(m.data[row][col]))));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Dimension, Layers } from \"./types\";\nimport { Matrix } from \"./Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"./Computation/utils\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let delta = getComputation().execute(\"subtract\", predictions, Y) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const backPropagation = this.layers[layer].getBackPropagation();\n      if (backPropagation) {\n        delta = backPropagation.propagate(X, m, regularization, delta);\n      }\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * (1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0, 2.0);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, delta: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    const previousW = this.previousLayer !== null ? this.previousLayer.W : new Matrix();\n    this.layer.gW = getComputation().execute(\"multiply\", previousActivations, delta.transpose()) as Matrix;\n    this.layer.gW = getComputation().execute(\n      \"multiplyNumber\",\n      this.layer.gW.transpose(),\n      1 / numberOfExamples\n    ) as Matrix;\n    this.layer.gb = getComputation().execute(\n      \"multiplyNumber\",\n      delta.rowwiseSum().transpose(),\n      1 / numberOfExamples\n    ) as Matrix;\n\n    if (this.previousLayer !== null) {\n      return getComputation().execute(\n        \"elementWiseMultiply\",\n        getComputation().execute(\"multiply\", this.layer.W.transpose(), delta) as Matrix,\n        this.previousLayer.derivative(this.previousLayer.A)\n      ) as Matrix;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      const aPrev = previousLayer.derivative(previousLayer.A);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.setPreviousLayer(this.lastLayer);\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  setPreviousLayer(layer: Layers): void {\n    this.previousLayer = layer;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    const prevLayer = this.previousLayer as Layers;\n\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.height, this.width);\n    this.sW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.sb.resize(this.height, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dW.resize(this.height, this.width);\n    this.dW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.db.resize(this.height, 1);\n    this.db = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return 1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][] | number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let row = 0; row < numberOfExamples; row += 1) {\n      for (let col = 0; col < exampleSize; col += 1) {\n        if (!data[col]) {\n          data[col] = new Array(exampleSize);\n        }\n\n        if (!arr[row]) {\n          console.log(row, col, arr.length, arr[0].length);\n          console.trace();\n          process.exit();\n        }\n\n        if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[col][row] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else if (typeof arr[row][col] === \"number\") {\n          data[col][row] = arr[row][col];\n        }\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return new Dataset(data.rows, data.cols, data.transpose().data);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        console.log(matrix);\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, this.beta2) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta2) as Matrix\n    ) as Matrix;\n\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, 1 - Math.pow(this.beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected,\n          getComputation().execute(\"sqrt\", sCorrected) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected2 = getComputation().execute(\"divideNumber\", layer.sb, 1 - Math.pow(this.beta2, t)) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected2,\n          getComputation().execute(\"sqrt\", sCorrected2) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gW, layer.gW) as Matrix,\n        1.0 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.sW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.sb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.sb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.dW = getComputation().execute(\n      \"add\",\n      layer.dW,\n      getComputation().execute(\"multiplyNumber\", layer.dW, 1 - this.beta) as Matrix\n    ) as Matrix;\n    layer.db = getComputation().execute(\n      \"add\",\n      layer.db,\n      getComputation().execute(\"multiplyNumber\", layer.db, 1 - this.beta) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.dW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.db, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import Network from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-8;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += batchSize, offset += batchSize) {\n      const inputBatch = inputDataset.getBatch(offset, batchSize).data;\n      const outputBatch = outputDataset.getBatch(offset, batchSize).data;\n\n      const predictedOutput = this.network.forward(inputBatch);\n      const correctOutput = outputBatch;\n\n      const miniBatchSize = correctOutput.cols;\n\n      const loss = this.network.loss(correctOutput, predictedOutput);\n      const error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss + (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = correctOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, forward, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 100} s.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback.call(null, {\n          iteration: i,\n        });\n      }\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected contentStr = \"\";\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(contentStr: string) {\n    super();\n    this.contentStr = contentStr;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });\n  }\n\n  parse(): Matrix {\n    this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);\n  }\n\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AbstractComputation","name","func","this","kernels","Error","args","apply","Matrix","rows","cols","data","resize","generateData","row","Array","arr","col","Float32Array","NaN","sum","t","transpose","push","oldData","newData","result","getComputation","execute","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","elementWiseDivide","m1","m2","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","elementWiseMultiply","logisticActivation","logisticDerivative","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","subtract","multiplyNumber","tanhActivation","tanhDerivative","pow","reluActivation","reluDerivative","softplusActivation","softplusDerivative","penalty","sqrt","purelinLoss","multiply","i","add","fillRandom","parameter","random","fillZeros","ComputationCPU","addKernel","currentComputation","Network","dimensions","layer","size","layers","input","forEach","forward","X","Y","regularization","delta","length","backPropagation","getBackPropagation","propagate","loss","error","path","resultJSON","type","getType","getSize","weights","W","b","JSON","stringify","Promise","resolve","reject","fs","err","console","LayerType","AbstractBackPropagation","previousLayer","gpu","GPU","mode","kernel","createKernel","a","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","Backpropagation1Dto1D","numberOfExamples","previousActivations","A","gW","gb","rowwiseSum","derivative","Backpropagation3Dto1D","sigma","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","setPreviousLayer","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","vb","sW","sb","dW","db","activation","width","height","depth","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","softmax","LogisticLayer","logistic","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","Number","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","trace","process","exit","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","sourcePromise","source","matrix","AbstractOptimizer","learningRate","OptimizerAdam","beta1","beta2","adam","vCorrected","sCorrected","vCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerMomentum","momentum","beta","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","numBatches","ceil","cost","accuracy","batch","inputBatch","getBatch","outputBatch","predictedOutput","correctOutput","miniBatchSize","colMaxCoeffIndex","MiniBatchTrainer","startTime","Date","getTime","setBatchSize","setLearningRate","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","CallbackDatabaseModifier","example","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","CSVState","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","DatasetBuilderSourceCSV","contentStr","buffer","instance","matrixData","trim","split","line","parseLine","exampleIndexCol","state","UnquotedField","fields","j","at","QuotedField","QuotedQuote","parseFloat","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","Trainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource"],"sourceRoot":""}