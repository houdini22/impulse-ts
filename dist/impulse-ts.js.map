{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = output.data[row][col] * Math.log(predictions.data[row][col] + epsilon);\n    }\n  }\n\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        log[row][col] = Math.log(output.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return subtract(\n    elementWiseMultiply(multiplyNumber(output, -1), logMatrix),\n    elementWiseMultiply(subMatrix, logSubMatrix)\n  ).sum();\n};\n\nexport const logisticBackward = (linearCache: Matrix, activationCache: Matrix): Matrix => {\n  const s = [];\n  const s2 = [];\n  for (let row = 0; row < linearCache.rows; row += 1) {\n    s[row] = [];\n    s2[row] = [];\n    for (let col = 0; col < linearCache.cols; col += 1) {\n      if (linearCache.data) {\n        s[row][col] = 1 / (1 + Math.exp(-linearCache.data[row][col]));\n        s2[row][col] = 1 - s[row][col];\n      }\n    }\n  }\n  const S = new Matrix(linearCache.rows, linearCache.cols, s);\n  const S2 = new Matrix(linearCache.rows, linearCache.cols, s2);\n\n  return elementWiseMultiply(activationCache, elementWiseMultiply(S, S2)) as Matrix;\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (linearCache: Matrix, activationCache: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < linearCache.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < linearCache.cols; col += 1) {\n      if (linearCache.data) {\n        data[row][col] = Math.max(linearCache.data[row][col], 0);\n      }\n    }\n  }\n  return new Matrix(linearCache.rows, linearCache.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackward\", logisticBackward);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let sigma = getComputation().execute(\n      \"multiplyNumber\",\n      getComputation().execute(\n        \"subtract\",\n        getComputation().execute(\"elementWiseDivide\", Y, predictions) as Matrix,\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"subtractFromNumber\", Y, 1) as Matrix,\n          getComputation().execute(\"subtractFromNumber\", predictions, 1) as Matrix\n        ) as Matrix\n      ) as Matrix,\n      -1\n    ) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const backPropagation = this.layers[layer].getBackPropagation();\n      if (backPropagation) {\n        sigma = backPropagation.propagate(X, m, regularization, sigma);\n      }\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    const dZ = this.layer.backpropagation(sigma);\n    this.layer.gW = getComputation().execute(\"multiply\", dZ, previousActivations.transpose()) as Matrix;\n    this.layer.gW = getComputation().execute(\"multiplyNumber\", this.layer.gW, 1 / numberOfExamples) as Matrix;\n    this.layer.gb = getComputation().execute(\n      \"multiplyNumber\",\n      dZ.rowwiseSum().transpose(),\n      1 / numberOfExamples\n    ) as Matrix;\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      return getComputation().execute(\"multiply\", this.layer.W.transpose(), dZ) as Matrix;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.setPreviousLayer(this.lastLayer);\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n    this.dZ = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  setPreviousLayer(layer: Layers): void {\n    this.previousLayer = layer;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n\n  abstract backpropagation(delta: Matrix): Matrix;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    const prevLayer = this.previousLayer as Layers;\n\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.height, this.width);\n    this.sW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.sb.resize(this.height, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dW.resize(this.height, this.width);\n    this.dW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.db.resize(this.height, 1);\n    this.db = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dZ.resize(this.height, this.width);\n    this.dZ = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return 1.0 / m;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return super.getBackPropagation();\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    this.dZ = getComputation().execute(\"logisticBackward\", delta, this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n\n  backpropagation(delta: Matrix) {\n    this.dZ = getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][] | number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let row = 0; row < numberOfExamples; row += 1) {\n      for (let col = 0; col < exampleSize; col += 1) {\n        if (!data[col]) {\n          data[col] = new Array(exampleSize);\n        }\n\n        if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[col][row] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else if (typeof arr[row][col] === \"number\") {\n          data[col][row] = arr[row][col];\n        }\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return new Dataset(data.rows, data.cols, data.transpose().data);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        console.log(matrix);\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, this.beta2) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta2) as Matrix\n    ) as Matrix;\n\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, 1 - Math.pow(this.beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected,\n          getComputation().execute(\"sqrt\", sCorrected) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected2 = getComputation().execute(\"divideNumber\", layer.sb, 1 - Math.pow(this.beta2, t)) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected2,\n          getComputation().execute(\"sqrt\", sCorrected2) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gW, layer.gW) as Matrix,\n        1.0 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.sW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.sb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.sb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.dW = getComputation().execute(\n      \"add\",\n      layer.dW,\n      getComputation().execute(\"multiplyNumber\", layer.dW, 1 - this.beta) as Matrix\n    ) as Matrix;\n    layer.db = getComputation().execute(\n      \"add\",\n      layer.db,\n      getComputation().execute(\"multiplyNumber\", layer.db, 1 - this.beta) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.dW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.db, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-8;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += batchSize, offset += batchSize) {\n      const inputBatch = inputDataset.getBatch(offset, batchSize).data;\n      const outputBatch = outputDataset.getBatch(offset, batchSize).data;\n\n      const predictedOutput = this.network.forward(inputBatch);\n      const correctOutput = outputBatch;\n\n      const miniBatchSize = correctOutput.cols;\n\n      const loss = this.network.loss(correctOutput, predictedOutput);\n      const error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss + (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = correctOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, forward, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 100} s.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback.call(null, {\n          iteration: i,\n        });\n      }\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected contentStr = \"\";\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(contentStr: string) {\n    super();\n    this.contentStr = contentStr;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });\n  }\n\n  parse(): Matrix {\n    this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);\n  }\n\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AbstractComputation","name","func","this","kernels","Error","args","apply","elementWiseDivide","m1","m2","rows","cols","data","row","col","Matrix","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","sum","logisticActivation","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","subtract","elementWiseMultiply","multiplyNumber","logisticBackward","linearCache","activationCache","s","s2","S","S2","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","multiply","Array","i","add","fillRandom","parameter","random","fillZeros","subtractFromNumber","transpose","ComputationCPU","addKernel","currentComputation","getComputation","resize","generateData","arr","Float32Array","NaN","t","push","oldData","newData","result","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","gpu","GPU","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","LayerType","Network","dimensions","layer","size","layers","input","forEach","forward","X","Y","regularization","sigma","length","backPropagation","getBackPropagation","propagate","loss","error","path","resultJSON","type","getType","getSize","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","A","dZ","backpropagation","gW","gb","rowwiseSum","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","setPreviousLayer","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","vb","sW","sb","dW","db","activation","width","height","depth","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","softmax","LogisticLayer","logistic","delta","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","Number","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","sourcePromise","source","matrix","AbstractOptimizer","learningRate","OptimizerAdam","beta1","beta2","adam","vCorrected","sCorrected","vCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerMomentum","momentum","beta","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","numBatches","ceil","cost","accuracy","batch","inputBatch","getBatch","outputBatch","predictedOutput","correctOutput","miniBatchSize","colMaxCoeffIndex","MiniBatchTrainer","startTime","Date","getTime","setBatchSize","setLearningRate","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","CallbackDatabaseModifier","example","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","CSVState","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","DatasetBuilderSourceCSV","contentStr","buffer","instance","matrixData","trim","split","line","parseLine","exampleIndexCol","state","UnquotedField","fields","j","at","QuotedField","QuotedQuote","parseFloat","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","Trainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource"],"sourceRoot":""}