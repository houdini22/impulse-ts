{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/index.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/LSTM.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Purelin.ts","webpack://impulse-ts/./src/typescript/Layer/Recurrent.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/index.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/Network/index.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/index.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/index.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] >= 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\n/*import { GPU } from \"gpu.js\";*/\n\n//export const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);*/\n  return Matrix.from([[]]);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();*/\n  return 0;\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();*/\n  return 0;\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();*/\n  return 0;\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();*/\n  return 0;\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    layer: Layers,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers } from \"../../types\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n\n    const delta = sigma.dot(previousActivations.transpose());\n    this.layer.gW = delta.divide(numberOfExamples).add(layer.W.multiply(regularization / numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers } from \"../../types\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers, Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers, Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = this.vb.setZeros();\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m.setMin(0);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { getComputation } from \"../Computation\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class LSTMLayer extends AbstractLayer {\n  public Wf: Matrix | null = null;\n  public bf: Matrix | null = null;\n  public Wi: Matrix | null = null;\n  public bi: Matrix | null = null;\n  public Wc: Matrix | null = null;\n  public bc: Matrix | null = null;\n  public Wo: Matrix | null = null;\n  public bo: Matrix | null = null;\n  public Wy: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dxt: Matrix | null = null;\n  public dWf: Matrix | null = null;\n  public dWi: Matrix | null = null;\n  public dWc: Matrix | null = null;\n  public dWo: Matrix | null = null;\n  public dbf: Matrix | null = null;\n  public dbi: Matrix | null = null;\n  public dbc: Matrix | null = null;\n  public dbo: Matrix | null = null;\n\n  configure(): void {}\n\n  forward(input: Matrix, aPrev: Matrix, cPrev): Matrix[] {\n    const nx = input.rows;\n    const m = input.cols;\n    const ny = this.Wy.rows;\n    const na = this.Wy.cols;\n\n    const concat = new Matrix(nx + na, m);\n\n    const ft = this.Wf.dot(concat).add(this.bf).sigmoid();\n    const it = this.Wi.dot(concat).add(this.bi).sigmoid();\n    const cct = this.Wc.dot(concat).add(this.bc).tanh();\n    const cNext = ft.multiply(cPrev).add(it.multiply(cct));\n    const ot = this.Wo.dot(concat).add(this.bo).sigmoid();\n    const aNext = ot.multiply(cNext.tanh());\n\n    const ytPred = this.Wy.dot(aNext).add(this.by).softmax();\n    return [aNext, cPrev];\n  }\n\n  backward(daNext: Matrix, dcNext: Matrix): void {}\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): LSTMLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      );\n\n      result.setCol(i, pool.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass PurelinLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.purelin;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.setOnes();\n  }\n}\n\nexport { PurelinLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport interface GradientResult {\n  dWax: Matrix;\n  dWya: Matrix;\n  dWaa: Matrix;\n  db: Matrix;\n  dby: Matrix;\n  daNext: Matrix;\n}\n\nexport class RecurrentLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public aNext: Matrix | null = null;\n  public aPrev: Matrix | null = null;\n  public daNext: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(this.getWidth(), this.getHeight());\n    this.Wax = this.Wax.setRandom(this.getWidth());\n\n    this.Waa = new Matrix(this.getWidth(), this.getWidth());\n    this.Waa = this.Waa.setRandom(this.getWidth());\n\n    this.Wya = new Matrix(this.getDepth(), this.getWidth());\n    this.Wya = this.Wya.setRandom(this.getDepth());\n\n    this.b = new Matrix(this.getWidth(), 1);\n    this.b = this.b.setRandom(this.getWidth());\n\n    this.by = new Matrix(this.getDepth(), 1);\n    this.by = this.by.setRandom(this.getDepth());\n\n    this.dWax = new Matrix(this.getWidth(), this.getHeight());\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(this.getWidth(), this.getWidth());\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(this.getDepth(), this.getWidth());\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(this.getWidth(), 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(this.getDepth(), 1);\n    this.dby = this.dby.setZeros();\n\n    this.daNext = new Matrix(this.getWidth(), this.getWidth());\n    this.daNext = this.daNext.setZeros();\n  }\n\n  forward(x: Matrix, aPrev: Matrix): Matrix[] {\n    const aNext = this.Wax.dot(x)\n      .add(this.Waa.dot(aPrev).replicate(1, this.getWidth()))\n      .add(this.b.replicate(1, x.cols))\n      .tanh();\n    const y = this.Wya.dot(aNext).add(this.by.replicate(1, x.cols)).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    this.aPrev = aPrev;\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): GradientResult {\n    const dTanh = a.pow(2).minusOne().multiply(dy);\n\n    const dWax = dTanh.dot(x.transpose());\n    const dWaa = dTanh.dot(aPrev.transpose());\n    const db = this.db; //.add(dtanh.colwiseSum().divide(dtanh.cols)).setMin(-5).setMax(5);\n    const dby = this.dby; //.replicate(1, this.getWidth()).add(dy).setMin(-5).setMax(5);\n    const dWya = this.dWya; //.add(dy.dot(a.transpose())).setMin(-5).setMax(5);\n    const daNext = this.Waa.transpose().dot(dTanh);\n\n    return {\n      dWax,\n      dWya,\n      dWaa,\n      db,\n      dby,\n      daNext,\n    };\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RecurrentLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMin(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\nimport { RecurrentLayer } from \"./Recurrent\";\nimport { PurelinLayer } from \"./Purelin\";\nimport { LSTMLayer } from \"./LSTM\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n  PurelinLayer,\n  LSTMLayer,\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (typeof arr[row][col] === \"string\") {\n          if (/^[-0-9.e]+$/.test(String(arr[row][col]))) {\n            data[row][col] = Number(arr[row][col]);\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        } else {\n          data[row][col] = arr[row][col];\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, regularization: number): void {\n    const m = X.cols;\n    const predictions = this.forward(X);\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer], this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Dimension, LayersRNN } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { DatasetVocabulary } from \"impulse-dataset-ts/src/typescript/Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): LayersRNN[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(this.dimensions[1], 1).setZeros();\n    let aPrev = new Matrix(this.dimensions[0], 1).setRandom(this.dimensions[1]);\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).setMin(1e-3).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n      x = new Matrix(this.dimensions[1], 1).setZeros();\n      let maxIndex = y.colMaxCoeffIndex(0);\n      if (maxIndex === -1) {\n        maxIndex = Math.floor(Math.random() * this.dimensions[1]);\n        idx = charIndices[chars[maxIndex]];\n      }\n      x.data[maxIndex][0] = 1;\n\n      indices.push(idx);\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    if (counter === 50) {\n      indices.push(newLineCharacter);\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(this.dimensions[1], this.dimensions[0]).setZeros();\n      x[t].data[X.data[t - 1][0]][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(x[t], a[t - 1]);\n      a[t] = _a;\n      yHat[t] = _yHat; //.setMin(1e-5);\n      loss += 0; // todo\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    let _dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    let _dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    let _dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    let _db = new Matrix(this.layers[0].db.rows, this.layers[0].db.cols).setZeros();\n    let _dby = new Matrix(this.layers[0].dby.rows, this.layers[0].dby.cols).setZeros();\n    let _daNext = new Matrix(this.layers[0].daNext.rows, this.layers[0].daNext.rows).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      // loop over examples\n      const dy = Matrix.from(a[t].data);\n      dy.data[X.data[t - 1][0]][0] -= 1;\n      const { dWax, dWya, dWaa, db, dby, daNext } = this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n      _dWax = _dWax.add(dWax.replicate(1, _dWax.cols));\n      _dWaa = _dWaa.add(dWaa.replicate(1, _dWaa.cols));\n      _dWya = _dWya.add(dWya);\n      _db = _db.add(db);\n      _dby = _dby.add(dby);\n      _daNext = _daNext.add(daNext);\n    }\n\n    // gradient clipping\n    this.layers[0].dWax = _dWax.setMin(-5).setMax(5);\n    this.layers[0].dWaa = _dWaa.setMin(-5).setMax(5);\n    this.layers[0].dWya = _dWya.setMin(-5).setMax(5);\n    this.layers[0].db = _dby.setMin(-5).setMax(5);\n    this.layers[0].dby = _dby.setMin(-5).setMax(5);\n    this.layers[0].daNext = _daNext.setMin(-5).setMax(5);\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(\n      this.layers[0].dWax.replicate(1, this.getDimensions()[2]).multiply(-learningRate)\n    );\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    //this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    //this.layers[0].by = this.layers[0].by.add(\n    //  this.layers[0].dby.multiply(-learningRate).rowwiseSum().divide(this.layers[0].dby.cols).transpose()\n    //);\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  getDimensions(): Dimension {\n    return this.dimensions;\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { Network } from \"./Network\";\nimport { NetworkRNN } from \"./NetworkRNN\";\n\nexport { Network, NetworkRNN };\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = correctOutput.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer, CostResult } from \"./AbstractTrainer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = this.batchSize;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0.0;\n    let accuracy = 0.0;\n\n    // calculate penalty\n    let penalty = 0.0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty = layer.penalty();\n    });\n\n    const startTime = new Date().getTime();\n    const startIterationTime = new Date().getTime();\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n      const startIterationTime2 = new Date().getTime();\n      const input = inputDataset.getBatch(offset, this.batchSize);\n      const correctOutput = outputDataset.getBatch(offset, this.batchSize);\n      const predictions = this.network.forward(input.data);\n\n      const error = correctOutput.data.multiply(predictions.log()).sum();\n      cost += (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n      for (let col = 0; col < predictions.cols; col += 1) {\n        const index1 = predictions.colMaxCoeffIndex(col);\n        const index2 = correctOutput.data.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input, output);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.sW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.sb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWCorrected = layer.sW.add(1e-8).sqrt();\n    const sbCorrected = layer.sb.add(1e-8).sqrt();\n\n    layer.W = layer.W.subtract(vWCorrected.divide(sWCorrected).multiply(learningRate));\n    layer.b = layer.b.subtract(vbCorrected.divide(sbCorrected).multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\nimport { OptimizerAdagrad } from \"./OptimizerAdagrad\";\nimport { OptimizerMomentum } from \"./OptimizerMomentum\";\nimport { OptimizerRMSProp } from \"./OptimizerRMSProp\";\n\nexport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdagrad, OptimizerMomentum, OptimizerRMSProp };\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"impulse-dataset-ts/src/typescript/Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.01;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n\n    const [X, Y] = dataset.buildData(100);\n    const [x, y] = dataset.vectorization(X, Y);\n\n    let aPrev = new Matrix(this.network.getDimensions()[0], this.network.getDimensions()[0]).setZeros();\n\n    for (let iteration = 0; iteration < this.iterations; iteration += 1) {\n      const index = iteration % x.length;\n      const [_loss] = this.network.forward(x[index], y, aPrev);\n      loss = _loss;\n      const [currentLoss, _aPrev] = this.network.optimize(x[index], y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${iteration + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset).trim()}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n\n      this.network.backward(inputDataset.data, outputDataset.data, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset, outputDataset);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\nimport { Trainer } from \"./Trainer\";\nimport { RNNTrainer } from \"./RNNTrainer\";\n\nexport { MiniBatchTrainer, Trainer, RNNTrainer };\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RecurrentLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer3D\n  | AbstractLayer1D;\nexport type Layers1D = LogisticLayer | SoftmaxLayer | TanhLayer | ReluLayer | SoftplusLayer | PurelinLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RecurrentLayer;\nexport type LayersLSTM = LSTMLayer;\n","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { NetworkRNN } from \"./Network\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RecurrentLayer,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport { NetworkBuilder, Math, Layer, Optimizer, Trainer, Computation, Network };\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","logisticActivation","m","Math","exp","from","logisticLoss","output","predictions","log","epsilon","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","softmaxActivation","softmaxLoss","ComputationGPU","setComputation","getComputation","currentComputation","type","AbstractLayer","backPropagation","value","width","height","depth","previousLayer","AbstractLayer1D","W","b","A","Z","gW","gb","vW","vb","sW","sb","dW","db","resize","getHeight","getWidth","setRandom","setZeros","input","replicate","activation","is1D","setWidth","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getDepth","AbstractBackPropagation","layer","Backpropagation1Dto1D","numberOfExamples","regularization","previousActivations","delta","divide","rowwiseSum","result","Backpropagation3Dto1D","LayerType","BackpropagationToMaxPool","BackpropagationToConv","BackpropagationFactory","getType","conv","maxpool","fullyconnected","padding","getPadding","stride","getStride","filterSize","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","execute","c","h","w","vertStart","vertEnd","horizStart","horizEnd","d","y","vertical","verticalPad","x","horizontal","horizontalPad","z","prevLayer","_max","Infinity","inputOffset","outputOffset","maxX","maxY","vStart","hStart","im2col","ConvLayer","numFilters","size","tmp","setCol","rollToColMatrix","setMin","FullyConnectedLayer","LSTMLayer","aPrev","cPrev","nx","ny","Wy","na","concat","ft","Wf","bf","sigmoid","it","Wi","bi","cct","Wc","bc","tanh","cNext","ot","Wo","bo","aNext","ytPred","by","softmax","daNext","dcNext","rnnlayer","LogisticLayer","fraction","logistic","MaxPoolLayer","pool","PurelinLayer","purelin","RecurrentLayer","Wax","Waa","Wya","dWax","dWaa","dWya","dby","push","X","Y","dy","a","dTanh","ReluLayer","relu","SoftmaxLayer","SoftplusLayer","softplus","TanhLayer","generateData","arr","test","String","Number","t","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","abs","numberOfElements","min","shape","cb","undefined","length","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","boundingY","boundingX","currentResultCol","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","fs","Network","dimensions","layers","forEach","forward","getBackPropagation","propagate","derivative","path","resultJSON","weights","JSON","stringify","Promise","resolve","reject","writeFile","err","console","error","NetworkRNN","vocabularySize","sequenceLength","dataset","indices","charIndices","getCharIndices","newLineCharacter","chars","getChars","idx","counter","colMaxCoeffIndex","floor","map","join","a0","yHat","loss","_a","_yHat","_dWax","_dWaa","_dWya","_db","_dby","_daNext","backward","setMax","learningRate","getDimensions","AbstractNetworkBuilder","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","readFile","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","accuracy","correctOutput","cost","index1","index2","MiniBatchTrainer","batchSize","numBatches","ceil","startTime","Date","getTime","startIterationTime","batch","offset","startIterationTime2","getBatch","setBatchSize","setLearningRate","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractOptimizer","OptimizerAdagrad","adagrad","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWCorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","RNNTrainer","getVocabularySize","buildData","vectorization","index","_loss","currentLoss","_aPrev","sample","trim","Trainer","TrainerTrainer","NetworkBuilder","Layer","Optimizer","Computation"],"sourceRoot":""}