{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/Dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/adam.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/gradientdescent.tsx","webpack://impulse-ts/./src/typescript/trainer/minibatch.tsx","webpack://impulse-ts/./src/typescript/main.tsx","webpack://impulse-ts/./src/typescript/trainer/abstract.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows, cols): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    const kernel = gpu\n      .createKernel(function (a) {\n        return a[this.thread.y][this.thread.x];\n      })\n      .setOutput([this.cols, this.rows]);\n\n    return new Matrix(this.cols, this.rows, kernel(this.data) as number[][]);\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row][col] = tmp.data[row][0];\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      // @ts-ignore\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const sum = (m: Matrix): number => {\n  return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  return new Matrix();\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  return new Matrix();\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { Dataset } from \"./dataset/Dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      delta = layer.getBackPropagation().propagate(X, m, regularization, delta);\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number) {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        dimensions: [\n          layer.getOutputHeight(),\n          layer.getOutputWidth(),\n          layer.getOutputDepth(),\n        ],\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    // @ts-ignore\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/conv\";\nimport {MaxPoolLayer} from \"./layer/maxpool\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer;\n","import { elementWiseAdd, Matrix, multiply, penalty } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vB: Matrix;\n  public cB: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vB = new Matrix();\n    this.cB = new Matrix();\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(\n      multiply(this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): void {\n    this.previousLayer = previousLayer;\n  }\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return penalty(this.W);\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractBackPropagation } from \"./abstract\";\nimport {\n  elementWiseAdd,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  Matrix,\n  multiply,\n} from \"../../math/matrix\";\nimport { elementWiseDivideNumber } from \"../../math/matrix\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = multiply(sigma, previousActivations.transpose().conjugate());\n    this.layer.gW = elementWiseAdd(\n      elementWiseDivideNumber(delta, numberOfExamples),\n      elementWiseMultiplyNumber(this.layer.W, regularization / numberOfExamples)\n    );\n    this.layer.gb = elementWiseDivideNumber(\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return elementWiseMultiply(\n        multiply(this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation/backpropagation1dto1d\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(this.height, this.width);\n    this.cW = setZeros(this.cW);\n\n    this.cB.resize(this.height, 1);\n    this.cB = setZeros(this.cB);\n\n    this.vW.resize(this.height, this.width);\n    this.vW = setZeros(this.vW);\n\n    this.vB.resize(this.height, 1);\n    this.vB = setZeros(this.cB);\n\n    this.backPropagation = new Backpropagation1Dto1D(this, this.previousLayer);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers) {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return logisticDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix, tanhActivation, tanhDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return tanhActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return tanhDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix, reluActivation, reluDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix, softplusActivation, softplusDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softplusActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return softplusDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/index\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\nexport default Builder1D;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize: number = 0;\n  public numberOfExamples: number = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = Number(arr[example][dataIndex] || 0);\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    const data = [];\n    for (let dataIndex = 0; dataIndex < this.exampleSize; dataIndex += 1) {\n      data[dataIndex] = [];\n      data[dataIndex][0] = this.data.data[index][dataIndex];\n    }\n\n    return new Matrix(this.exampleSize, 1, data);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix {\n    return this.data.block(0, offset, this.data.rows, batchSize);\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./Dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize: number = 0;\n  protected t: number = 0;\n  protected learningRate: number = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers);\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseAdd,\n  elementWiseDivide,\n  elementWiseDivideNumber,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n  sqrt,\n} from \"../../math/matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number) {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n    const epsilon = 1e-8;\n\n    layer.vW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const wCorrected = elementWiseDivideNumber(\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    );\n\n    layer.cW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const sCorrected = sqrt(\n      elementWiseMultiplyNumber(layer.cW, 1 - Math.pow(beta2, t))\n    );\n\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(wCorrected, sCorrected),\n        learningRate\n      )\n    );\n\n    layer.vB = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vB, beta1),\n      elementWiseMultiplyNumber(layer.gb, 1 - beta1)\n    );\n    const wCorrected2 = elementWiseDivideNumber(\n      layer.vB,\n      1 - Math.pow(beta1, t)\n    );\n    layer.cB = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cB, beta2),\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(layer.gb, layer.gb),\n        1 - beta2\n      )\n    );\n    const sCorrected2 = sqrt(\n      elementWiseDivideNumber(layer.cB, 1 - Math.pow(beta2, t))\n    );\n\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(\n        elementWiseDivide(wCorrected2, sCorrected2),\n        learningRate\n      )\n    );\n  }\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n} from \"../../math/matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number) {\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(layer.gW, learningRate)\n    );\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(layer.gb, learningRate)\n    );\n  }\n}\n","import { AbstractTrainer } from \"./abstract\";\nimport { Dataset } from \"../dataset/Dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize: number = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset) {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += this.batchSize, offset += this.batchSize\n      ) {\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input);\n\n        this.network.backward(input, output, forward, this.regularization);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.setT(++t);\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset + 1} / ${Math.ceil(\n              numberOfExamples / this.batchSize\n            )} | Time: ${endIterationTime - startIterationTime} ms.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${endTime - startTime} ms.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback({\n          iteration: i,\n        });\n      }\n    }\n  }\n}\n","import { Builder1D } from \"./builder/builder1d\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/matrix\";\nimport {\n  multiply as matrixMultiply,\n  sum as matrixSum,\n  fillRandom as matrixFillRandom,\n  elementWiseMultiply as matrixElementWiseMultiply,\n  elementWiseDivide as matrixElementWiseDivide,\n  elementWiseAdd as matrixElementWiseAdd,\n  elementWiseSubtract as matrixElementWiseSubtract,\n} from \"./math/matrix\";\nimport { DatasetBuilder } from \"./dataset/DatasetBuilder\";\nimport { OptimizerAdam } from \"./trainer/optimizer/adam\";\nimport { OptimizerGradientDescent } from \"./trainer/optimizer/gradientdescent\";\nimport { MiniBatchTrainer } from \"./trainer/minibatch\";\n\nconst Builders = { Builder1D };\nconst Math = {\n  Matrix,\n  matrixMultiply,\n  matrixSum,\n  matrixFillRandom,\n  matrixElementWiseMultiply,\n  matrixElementWiseDivide,\n  matrixElementWiseAdd,\n  matrixElementWiseSubtract,\n};\nconst Layers = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n};\nconst Dataset = {\n  DatasetBuilder,\n};\nconst Optimizers = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainers = {\n  MiniBatchTrainer,\n};\n\nexport { Builders, Math, Layers, Dataset, Optimizers, Trainers };\n","import Network from \"../network\";\nimport { AbstractOptimizer } from \"./optimizer/abstract\";\nimport { Dataset } from \"../dataset/Dataset\";\n\nexport abstract class AbstractTrainer {\n  network: Network = null;\n  optimizer: AbstractOptimizer = null;\n  regularization: number = 0;\n  iterations: number = 1000;\n  learningRate: number = 0.1;\n  verbose: boolean = true;\n  verboseStep: number = 1;\n  stepCallback: Function = () => null;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: Function): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset) {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (\n      let batch = 0, offset = 0;\n      batch < numberOfExamples;\n      batch += batchSize, offset += 1\n    ) {\n      const predictedOutput = this.network.forward(\n        inputDataset.getBatch(offset, batchSize)\n      );\n      const correctOutput = outputDataset.getBatch(offset, batchSize);\n\n      const miniBatchSize = correctOutput.cols;\n\n      let loss = this.network.loss(correctOutput, predictedOutput);\n      let error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss +\n          (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = predictedOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    const result = {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n\n    return result;\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","gpu","require","GPU","mode","Matrix","rows","cols","data","this","resize","generateData","row","Array","arr","col","Float32Array","result","ArrayBuffer","view","DataView","forEach","num","i","setFloat64","sum","oldData","newData","kernel","createKernel","a","thread","y","x","setOutput","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","multiply","m1","m2","Error","b","constants","setConstants","elementWiseAdd","elementWiseSubtract","fillRandom","parameter","Math","random","sqrt","setZeros","elementWiseMultiply","elementWiseMultiplyNumber","number","elementWiseDivide","elementWiseDivideNumber","m","Network","dimensions","layer","size","layers","push","input","output","forward","X","Y","predictions","regularization","delta","reverse","getBackPropagation","propagate","length","loss","error","path","resultJSON","type","getType","getOutputHeight","getOutputWidth","getOutputDepth","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","AbstractBuilder","dimension","network","callback","lastLayer","firstLayerTransition","transition","configure","addLayer","LayerType","AbstractLayer","A","Z","gW","gb","vW","cW","vB","cB","backPropagation","replicate","activation","width","height","depth","previousLayer","pow","Backpropagation1Dto1D","numberOfExamples","sigma","previousActivations","transpose","conjugate","rowwiseSum","derivative","AbstractLayer1D","is1D","setWidth","getSize","is3D","setHeight","SoftmaxLayer","exp","divider","colwiseSum","softmaxActivation","softmax","log","softmaxLoss","LogisticLayer","logisticActivation","logisticDerivative","logistic","kernel2","kernel3","logisticLoss","TanhLayer","tanhActivation","tanhDerivative","tanh","ReluLayer","reluActivation","reluDerivative","relu","SoftplusLayer","softplusActivation","softplusDerivative","softplus","Builder1D","jsonPath","json","parse","toString","builder","layerData","layerClass","createLayer","setSize","getNetwork","getLayers","Dataset","exampleSize","example","dataIndex","Number","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","AbstractOptimizer","t","learningRate","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","Builders","matrixMultiply","matrixSum","matrixFillRandom","matrixElementWiseMultiply","matrixElementWiseDivide","matrixElementWiseAdd","matrixElementWiseSubtract","Layers","Optimizers","Trainers","MiniBatchTrainer","inputDataset","outputDataset","getNumberOfExamples","startTime","Date","getTime","iterations","startIterationTime","batch","getBatch","backward","optimizer","setT","optimize","verbose","endIterationTime","ceil","verboseStep","endTime","currentResult","cost","accuracy","stepCallback","iteration","numBatches","penalty","predictedOutput","correctOutput","miniBatchSize","colMaxCoeffIndex"],"sourceRoot":""}