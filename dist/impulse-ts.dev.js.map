{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/index.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/index.ts","webpack://impulse-ts/./src/typescript/Dataset/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDocumentBuilderSource.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/index.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/index.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Network/index.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/index.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/index.ts","webpack://impulse-ts/./src/typescript/Trainer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = output.data[row][col] * Math.log(predictions.data[row][col] + epsilon);\n    }\n  }\n\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        log[row][col] = Math.log(output.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return subtract(\n    elementWiseMultiply(multiplyNumber(output, -1), logMatrix),\n    elementWiseMultiply(subMatrix, logSubMatrix)\n  ).sum();\n};\n\nexport const logisticBackward = (linearCache: Matrix, activationCache: Matrix): Matrix => {\n  const s = [];\n  const s2 = [];\n  for (let row = 0; row < linearCache.rows; row += 1) {\n    s[row] = [];\n    s2[row] = [];\n    for (let col = 0; col < linearCache.cols; col += 1) {\n      if (linearCache.data) {\n        s[row][col] = 1 / (1 + Math.exp(-linearCache.data[row][col]));\n        s2[row][col] = 1 - s[row][col];\n      }\n    }\n  }\n  const S = new Matrix(linearCache.rows, linearCache.cols, s);\n  const S2 = new Matrix(linearCache.rows, linearCache.cols, s2);\n\n  return elementWiseMultiply(activationCache, elementWiseMultiply(S, S2)) as Matrix;\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (linearCache: Matrix, activationCache: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < linearCache.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < linearCache.cols; col += 1) {\n      if (linearCache.data) {\n        data[row][col] = Math.max(linearCache.data[row][col], 0);\n      }\n    }\n  }\n  return new Matrix(linearCache.rows, linearCache.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackward\", logisticBackward);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][] | number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let row = 0; row < numberOfExamples; row += 1) {\n      for (let col = 0; col < exampleSize; col += 1) {\n        if (!data[col]) {\n          data[col] = new Array(exampleSize);\n        }\n\n        if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[col][row] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else if (typeof arr[row][col] === \"number\") {\n          data[col][row] = arr[row][col];\n        }\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return new Dataset(data.rows, data.cols, data.transpose().data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { CallbackDatabaseModifier } from \"./Callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./MissingData\";\n\nexport { CallbackDatabaseModifier, MissingDataScalingDatabaseModifier, MinMaxScalingDatabaseModifier };\n","import { Dataset } from \"./Dataset\";\n\nexport { Dataset };\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        console.log(matrix);\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDocumentBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected contentStr = \"\";\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(contentStr: string) {\n    super();\n    this.contentStr = contentStr;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });\n  }\n\n  parse(): Matrix {\n    this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);\n  }\n\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }\n}\n","import { DatasetBuilderSourceCSV } from \"./DatasetBuilderSourceCSV\";\n\nexport { DatasetBuilderSourceCSV };\n","import { DatasetBuilder } from \"./DatasetBuilder\";\n\nexport { DatasetBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n    this.dZ = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  setPreviousLayer(layer: Layers): void {\n    this.previousLayer = layer;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n\n  abstract backpropagation(delta: Matrix): Matrix;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Layers } from \"../types\";\nimport { getComputation } from \"../Computation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    const prevLayer = this.previousLayer as Layers;\n\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, prevLayer ? prevLayer.getHeight() : this.height) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.height, this.width);\n    this.sW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.sb.resize(this.height, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dW.resize(this.height, this.width);\n    this.dW = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n\n    this.db.resize(this.height, 1);\n    this.db = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.dZ.resize(this.height, this.width);\n    this.dZ = getComputation().execute(\"fillZeros\", this.sW) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    const dZ = this.layer.backpropagation(sigma);\n    this.layer.gW = getComputation().execute(\"multiply\", dZ, previousActivations.transpose()) as Matrix;\n    this.layer.gW = getComputation().execute(\"multiplyNumber\", this.layer.gW, 1 / numberOfExamples) as Matrix;\n    this.layer.gb = getComputation().execute(\n      \"multiplyNumber\",\n      dZ.rowwiseSum().transpose(),\n      1 / numberOfExamples\n    ) as Matrix;\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      return getComputation().execute(\"multiply\", this.layer.W.transpose(), dZ) as Matrix;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n        this.b.replicate(1, input.cols)\n      ) as Matrix;\n\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return 1.0 / m;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return super.getBackPropagation();\n  }\n\n  backpropagation(delta: Matrix): Matrix {\n    this.dZ = getComputation().execute(\"logisticBackward\", delta, this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL Layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n\n  backpropagation(delta: Matrix) {\n    this.dZ = getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n    return this.dZ;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n};\n","import { getComputation } from \"../Computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let sigma = getComputation().execute(\n      \"multiplyNumber\",\n      getComputation().execute(\n        \"subtract\",\n        getComputation().execute(\"elementWiseDivide\", Y, predictions) as Matrix,\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"subtractFromNumber\", Y, 1) as Matrix,\n          getComputation().execute(\"subtractFromNumber\", predictions, 1) as Matrix\n        ) as Matrix\n      ) as Matrix,\n      -1\n    ) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const backPropagation = this.layers[layer].getBackPropagation();\n      if (backPropagation) {\n        sigma = backPropagation.propagate(X, m, regularization, sigma);\n      }\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Network } from \"./Network\";\n\nexport { Network };\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.setPreviousLayer(this.lastLayer);\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-8;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += batchSize, offset += batchSize) {\n      const inputBatch = inputDataset.getBatch(offset, batchSize).data;\n      const outputBatch = outputDataset.getBatch(offset, batchSize).data;\n\n      const predictedOutput = this.network.forward(inputBatch);\n      const correctOutput = outputBatch;\n\n      const miniBatchSize = correctOutput.cols;\n\n      const loss = this.network.loss(correctOutput, predictedOutput);\n      const error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss + (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = correctOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, forward, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 100} s.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback.call(null, {\n          iteration: i,\n        });\n      }\n    }\n\n    return this;\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gW, layer.gW) as Matrix,\n        1.0 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.sW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.sb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.sb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, this.beta2) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - this.beta2) as Matrix\n    ) as Matrix;\n\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"multiplyNumber\", layer.sW, 1 - Math.pow(this.beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected,\n          getComputation().execute(\"sqrt\", sCorrected) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, this.beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - this.beta1) as Matrix\n    ) as Matrix;\n\n    const vCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(this.beta1, t)) as Matrix;\n\n    layer.sb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.sb, this.beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - this.beta2\n      ) as Matrix\n    ) as Matrix;\n\n    const sCorrected2 = getComputation().execute(\"divideNumber\", layer.sb, 1 - Math.pow(this.beta2, t)) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          vCorrected2,\n          getComputation().execute(\"sqrt\", sCorrected2) as Matrix\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.dW = getComputation().execute(\n      \"add\",\n      layer.dW,\n      getComputation().execute(\"multiplyNumber\", layer.dW, 1 - this.beta) as Matrix\n    ) as Matrix;\n    layer.db = getComputation().execute(\n      \"add\",\n      layer.db,\n      getComputation().execute(\"multiplyNumber\", layer.db, 1 - this.beta) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.dW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.db, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\nimport { OptimizerAdadelta } from \"./OptimizerAdadelta\";\nimport { OptimizerMomentum } from \"./OptimizerMomentum\";\n\nexport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum };\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\n\nexport { MiniBatchTrainer };\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer/Purelin\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"gpu.js\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder } from \"./DatasetBuilder\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta, OptimizerMomentum } from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n  OptimizerMomentum,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n};\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","epsilon","log","sum","logisticActivation","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","subtract","elementWiseMultiply","multiplyNumber","logisticBackward","linearCache","activationCache","s","s2","S","S2","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","multiply","Array","i","add","fillRandom","parameter","random","fillZeros","setOnes","subtractFromNumber","transpose","ComputationCPU","addKernel","GPU","gpu","mode","kernel","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","setComputation","getComputation","currentComputation","type","Dataset","exampleSize","numberOfExamples","arr","length","Number","NaN","index","offset","batchSize","block","AbstractDatasetModifier","dataset","CallbackDatabaseModifier","example","exampleIndex","getNumberOfExamples","callback","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","push","modificationType","forEach","csvtojson","DatasetBuilder","csvPath","Promise","resolve","noheader","fromFile","then","sourcePromise","source","matrix","parse","console","AbstractDatasetBuilderSource","fs","CSVState","DatasetBuilderSourceCSV","contentStr","matrixData","lines","trim","split","line","parseLine","exampleIndexCol","state","UnquotedField","fields","j","c","at","QuotedField","QuotedQuote","value","parseFloat","path","reject","readFile","err","buffer","instance","toString","AbstractLayer","W","A","Z","gW","gb","vW","vb","sW","sb","dW","db","dZ","backPropagation","layer","previousLayer","input","execute","activation","width","height","depth","AbstractLayer1D","prevLayer","resize","getHeight","is1D","setWidth","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getWidth","getDepth","AbstractBackPropagation","Backpropagation1Dto1D","regularization","sigma","previousActivations","backpropagation","rowwiseSum","Backpropagation3Dto1D","LayerType","BackpropagationToMaxPool","BackpropagationToConv","BackpropagationFactory","getType","conv","maxpool","fullyconnected","padding","getPadding","stride","getStride","filterSize","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","result","h","w","vertStart","vertEnd","horizStart","horizEnd","d","vertical","verticalPad","horizontal","horizontalPad","z","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","im2col","ConvLayer","numFilters","size","tmp","setCol","rollToColMatrix","FullyConnectedLayer","LogisticLayer","logistic","delta","MaxPoolLayer","pool","ReluLayer","relu","SoftmaxLayer","softmax","SoftplusLayer","softplus","TanhLayer","tanh","generateData","Float32Array","t","oldData","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","Network","dimensions","layers","forward","X","Y","getBackPropagation","propagate","loss","error","resultJSON","weights","JSON","stringify","writeFile","AbstractNetworkBuilder","network","layerClass","lastLayer","firstLayerTransition","transition","setPreviousLayer","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","json","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","undefined","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","numBatches","ceil","cost","accuracy","batch","inputBatch","getBatch","outputBatch","predictedOutput","correctOutput","miniBatchSize","index1","colMaxCoeffIndex","index2","MiniBatchTrainer","startTime","Date","getTime","setBatchSize","setLearningRate","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","call","iteration","AbstractOptimizer","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","OptimizerAdam","beta1","beta2","adam","vCorrected","sCorrected","vCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerMomentum","momentum","beta","DatasetDataset","DatasetBuilderBuilder","NetworkBuilder","Layer","Optimizer","Trainer","DatasetModifier","Computation","DatasetBuilderSource"],"sourceRoot":""}