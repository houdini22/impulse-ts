{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/builder3d.tsx","webpack://impulse-ts/./src/typescript/dataset/dataset.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetbuilder.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/abstract.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/callback.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/minmaxscaling.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/missingdata.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/abstract3d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationto3dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtoconv.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtomaxpool.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/factory.tsx","webpack://impulse-ts/./src/typescript/layer/conv.tsx","webpack://impulse-ts/./src/typescript/layer/fullyconnected.tsx","webpack://impulse-ts/./src/typescript/layer/index.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/maxpool.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/trainer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/minibatch.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/adam.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/gradientdescent.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/external \"csvtojson\"","webpack://impulse-ts/external \"fs\"","webpack://impulse-ts/external \"gpu.js\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.tsx"],"sourcesContent":["import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/factory\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(type: Layers, callback: Function) {\n    // @ts-ignore\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(\n      BackpropagationFactory.create(this.lastLayer, layer)\n    );\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers);\n}\n\nexport { AbstractBuilder };\nexport default AbstractBuilder;\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { ConvLayer } from \"../layer/conv\";\nimport { MaxPoolLayer } from \"../layer/maxpool\";\n\nclass Builder3D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers) {\n    layer.setSize(this.dimensions);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder3D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            layerClass = ConvLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {});\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder3D };\n","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize: number = 0;\n  public numberOfExamples: number = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: number[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = Number(arr[example][dataIndex] || 0);\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    return new Matrix(this.exampleSize, 1, this.data.data.col(index));\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix {\n    return this.data.block(0, offset, this.data.rows, batchSize);\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Dataset } from \"../dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  apply() {\n    for (\n      let example = 0;\n      example < this.dataset.getNumberOfExamples();\n      example += 1\n    ) {\n      this.applyToExample(example);\n    }\n  }\n\n  abstract applyToExample(example: number): void;\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: Function = (number) => number;\n\n  applyToExample(example: number) {}\n\n  setCallback(callback: Function): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\nimport { gpu } from \"../../math/matrix\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.rows; row += 1) {\n        min = Math.min(example.data[row][0]);\n        max = Math.max(example.data[row][0]);\n      }\n    }\n\n    const kernel = gpu\n      .createKernel(function (a) {\n        // @ts-ignore\n        return (\n          (a[this.thread.x][this.thread.y] - this.constants.min) /\n          (this.constants.max - this.constants.min)\n        );\n      })\n      .setOutput([this.dataset.data.data.rows, this.dataset.data.data.cols])\n      .setConstants({\n        min,\n        max,\n      });\n    this.dataset.data = kernel(this.dataset.data.data);\n  }\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number) {}\n}\n","import { elementWiseAdd, Matrix, multiply, penalty } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width: number = 0;\n  protected height: number = 0;\n  protected depth: number = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = elementWiseAdd(\n      multiply(this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number) {\n    this.width = value;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number) {\n    this.height = value;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number) {\n    this.depth = value;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth();\n\n  abstract getOutputHeight();\n\n  abstract getOutputDepth();\n\n  abstract configure();\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension);\n\n  abstract getSize();\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType();\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return penalty(this.W);\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { fillRandom, setZeros } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth: number = 1;\n\n  configure() {\n    this.W.resize(this.height, this.width);\n    this.W = fillRandom(this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = fillRandom(this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(this.height, this.width);\n    this.cW = setZeros(this.cW);\n\n    this.cb.resize(this.height, 1);\n    this.cb = setZeros(this.cb);\n\n    this.vW.resize(this.height, this.width);\n    this.vW = setZeros(this.vW);\n\n    this.vb.resize(this.height, 1);\n    this.vb = setZeros(this.cb);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension) {\n    this.setHeight(value[0]);\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth() {\n    return this.width;\n  }\n\n  getOutputHeight() {\n    return this.height;\n  }\n\n  getOutputDepth() {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./abstract\";\nimport { Dimension } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure() {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: AbstractLayer): AbstractLayer3D {\n    if (previousLayer.is3D()) {\n      this.setSize([\n        previousLayer.getOutputWidth(),\n        previousLayer.getOutputHeight(),\n        previousLayer.getOutputDepth(),\n      ]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension) {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n  }\n\n  getSize(): Dimension {\n    return [\n      this.getOutputWidth(),\n      this.getOutputHeight(),\n      this.getOutputDepth(),\n    ];\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport {\n  elementWiseAdd,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  Matrix,\n  multiply,\n} from \"../../math/matrix\";\nimport { elementWiseDivideNumber } from \"../../math/matrix\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = multiply(sigma, previousActivations.transpose().conjugate());\n    this.layer.gW = elementWiseAdd(\n      elementWiseDivideNumber(delta, numberOfExamples),\n      elementWiseMultiplyNumber(this.layer.W, regularization / numberOfExamples)\n    );\n    this.layer.gb = elementWiseDivideNumber(\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return elementWiseMultiply(\n        multiply(this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return new Matrix();\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation1dto1d\";\nimport { Backpropagation3Dto1D } from \"./backpropagationto3dto1d\";\nimport { BackpropagationToMaxPool } from \"./backpropagationtomaxpool\";\nimport { BackpropagationToConv } from \"./backpropagationtoconv\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers) {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (\n        previousLayer.is1D() ||\n        previousLayer.getType() == LayerType.fullyconnected\n      ) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import {\n  Matrix,\n  fillRandom,\n  setZeros,\n  reluActivation,\n  reluDerivative,\n  im2col,\n  elementWiseAdd,\n  multiply,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\n\nclass ConvLayer extends AbstractLayer3D {\n  protected numFilters: number = 32;\n  protected filterSize: number = 4;\n  protected padding: number = 1;\n  protected stride: number = 1;\n\n  configure() {\n    this.W.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.W = fillRandom(this.W, this.width * this.height * this.depth);\n\n    this.b.resize(this.numFilters, 1);\n    this.b = fillRandom(this.b, 0.01);\n\n    this.gW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.gW = setZeros(this.gW);\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = setZeros(this.gb);\n\n    this.cW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.cW = setZeros(this.gb);\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = setZeros(this.cb);\n\n    this.vW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.vW = setZeros(this.vW);\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = setZeros(this.vb);\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = elementWiseAdd(\n        multiply(this.W, conv),\n        this.b.replicate(1, input.cols)\n      ).rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { ConvLayer };\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure() {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\n          \"Invalid usage. Cannot fully connect with previous non maxpool layer.\"\n        );\n      }\n    } else {\n      throw new Error(\n        \"Invalid usage. Cannot fully connect with previous 1D layer.\"\n      );\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { SoftmaxLayer } from \"./softmax\";\nimport { LogisticLayer } from \"./logistic\";\nimport { TanhLayer } from \"./tanh\";\nimport { ReluLayer } from \"./relu\";\nimport { SoftplusLayer } from \"./softplus\";\nimport { ConvLayer } from \"./conv\";\nimport { FullyConnectedLayer } from \"./fullyconnected\";\nimport { MaxPoolLayer } from \"./maxpool\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n};\n","import {\n  logisticActivation,\n  logisticDerivative,\n  Matrix,\n  logisticLoss,\n} from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return logisticActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return logisticDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return logisticLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix, maxpool } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\nimport { BackpropagationToMaxPool } from \"./backpropagation/backpropagationtomaxpool\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize: number;\n  stride: number;\n\n  configure() {\n    this.backPropagation = new BackpropagationToMaxPool(\n      this,\n      this.previousLayer\n    );\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix, reluActivation, reluDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return reluActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return reluDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix, softmaxActivation, softmaxLoss } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softmaxActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return softmaxLoss(output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix, softplusActivation, softplusDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return softplusActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return softplusDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix, tanhActivation, tanhDerivative } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return tanhActivation(m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return tanhDerivative(m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows, cols): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    const kernel = gpu\n      .createKernel(function (a) {\n        return a[this.thread.y][this.thread.x];\n      })\n      .setOutput([this.cols, this.rows]);\n\n    return new Matrix(this.cols, this.rows, kernel(this.data) as number[][]);\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row][col] = tmp.data[row][0];\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      // @ts-ignore\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const sum = (m: Matrix): number => {\n  return m.sum();\n};\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols =\n    ((width - kernel_w + 2 * pad_w) / stride_w + 1) *\n    ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = setZeros(new Matrix(rows, cols));\n\n  for (\n    let boundingY = -pad_h;\n    boundingY + kernel_h <= height + pad_h;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = -pad_w;\n      boundingX + kernel_w <= width + pad_w;\n      boundingX += stride_w\n    ) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (\n              boundingY + y >= 0 &&\n              boundingX + x >= 0 &&\n              boundingX + x < width &&\n              boundingY + y < height\n            ) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[\n                  (y + boundingY) * width + boundingX + x + inputOffset\n                ][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = setZeros(\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  );\n\n  for (\n    let boundingY = 0;\n    boundingY + kernel_h <= height;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = 0;\n      boundingX + kernel_w <= width;\n      boundingX += stride_w\n    ) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(\n              _max,\n              input.data[\n                inputOffset + (y + boundingY) * width + boundingX + x\n              ][0]\n            );\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { Dimension, Layers } from \"./types\";\nimport { cols, Matrix, elementWiseSubtract } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { Dataset } from \"./dataset/dataset\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size: number = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers) {\n    this.size++;\n    this.layers.push(layer);\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number) {\n    const m = cols(X);\n\n    let delta = elementWiseSubtract(predictions, Y);\n\n    this.layers.reverse().forEach((layer) => {\n      delta = layer.getBackPropagation().propagate(X, m, regularization, delta);\n    });\n  }\n\n  loss(output: Matrix, predictions: Matrix) {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number) {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        dimensions: [\n          layer.getOutputHeight(),\n          layer.getOutputWidth(),\n          layer.getOutputDepth(),\n        ],\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import Network from \"../network\";\nimport { AbstractOptimizer } from \"./optimizer/abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport abstract class AbstractTrainer {\n  network: Network = null;\n  optimizer: AbstractOptimizer = null;\n  regularization: number = 0;\n  iterations: number = 1000;\n  learningRate: number = 0.1;\n  verbose: boolean = true;\n  verboseStep: number = 1;\n  stepCallback: Function = () => null;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: Function): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset) {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (\n      let batch = 0, offset = 0;\n      batch < numberOfExamples;\n      batch += batchSize, offset += 1\n    ) {\n      const predictedOutput = this.network.forward(\n        inputDataset.getBatch(offset, batchSize)\n      );\n      const correctOutput = outputDataset.getBatch(offset, batchSize);\n\n      const miniBatchSize = correctOutput.cols;\n\n      let loss = this.network.loss(correctOutput, predictedOutput);\n      let error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss +\n          (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = predictedOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    const result = {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n\n    return result;\n  }\n}\n","import { AbstractTrainer } from \"./abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize: number = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset) {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += this.batchSize, offset += this.batchSize\n      ) {\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input);\n\n        this.network.backward(input, output, forward, this.regularization);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.setT(++t);\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset + 1} / ${Math.ceil(\n              numberOfExamples / this.batchSize\n            )} | Time: ${endIterationTime - startIterationTime} ms.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${endTime - startTime} ms.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback({\n          iteration: i,\n        });\n      }\n    }\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize: number = 0;\n  protected t: number = 0;\n  protected learningRate: number = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers);\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseAdd,\n  elementWiseDivide,\n  elementWiseDivideNumber,\n  elementWiseMultiply,\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n  sqrt,\n} from \"../../math/matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number) {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n    const epsilon = 1e-8;\n\n    layer.vW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const wCorrected = elementWiseDivideNumber(\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    );\n\n    layer.cW = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cW, beta1),\n      elementWiseMultiplyNumber(layer.gW, 1 - beta1)\n    );\n    const sCorrected = sqrt(\n      elementWiseMultiplyNumber(layer.cW, 1 - Math.pow(beta2, t))\n    );\n\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(wCorrected, sCorrected),\n        learningRate\n      )\n    );\n\n    layer.vb = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.vb, beta1),\n      elementWiseMultiplyNumber(layer.gb, 1 - beta1)\n    );\n    const wCorrected2 = elementWiseDivideNumber(\n      layer.vb,\n      1 - Math.pow(beta1, t)\n    );\n    layer.cb = elementWiseAdd(\n      elementWiseMultiplyNumber(layer.cb, beta2),\n      elementWiseMultiplyNumber(\n        elementWiseMultiply(layer.gb, layer.gb),\n        1 - beta2\n      )\n    );\n    const sCorrected2 = sqrt(\n      elementWiseDivideNumber(layer.cb, 1 - Math.pow(beta2, t))\n    );\n\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(\n        elementWiseDivide(wCorrected2, sCorrected2),\n        learningRate\n      )\n    );\n  }\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport {\n  elementWiseMultiplyNumber,\n  elementWiseSubtract,\n} from \"../../math/matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers) {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number) {\n    layer.W = elementWiseSubtract(\n      layer.W,\n      elementWiseMultiplyNumber(layer.gW, learningRate)\n    );\n    layer.b = elementWiseSubtract(\n      layer.b,\n      elementWiseMultiplyNumber(layer.gb, learningRate)\n    );\n  }\n}\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/conv\";\nimport { MaxPoolLayer } from \"./layer/maxpool\";\nimport { FullyConnectedLayer } from \"./layer/fullyconnected\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"fs\");","module.exports = require(\"gpu.js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Builder1D } from \"./builder/builder1d\";\nimport { Builder3D } from \"./builder/builder3d\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/matrix\";\nimport {\n  multiply as matrixMultiply,\n  sum as matrixSum,\n  fillRandom as matrixFillRandom,\n  elementWiseMultiply as matrixElementWiseMultiply,\n  elementWiseDivide as matrixElementWiseDivide,\n  elementWiseAdd as matrixElementWiseAdd,\n  elementWiseSubtract as matrixElementWiseSubtract,\n} from \"./math/matrix\";\nimport { DatasetBuilder } from \"./dataset/datasetbuilder\";\nimport { OptimizerAdam } from \"./trainer/optimizer/adam\";\nimport { OptimizerGradientDescent } from \"./trainer/optimizer/gradientdescent\";\nimport { MiniBatchTrainer } from \"./trainer/minibatch\";\nimport { CallbackDatabaseModifier } from \"./dataset/datasetmodifier/callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./dataset/datasetmodifier/minmaxscaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./dataset/datasetmodifier/missingdata\";\n\nconst Builders = { Builder1D, Builder3D };\nconst Math = {\n  Matrix,\n  matrixMultiply,\n  matrixSum,\n  matrixFillRandom,\n  matrixElementWiseMultiply,\n  matrixElementWiseDivide,\n  matrixElementWiseAdd,\n  matrixElementWiseSubtract,\n};\nconst Layers = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst Dataset = {\n  DatasetBuilder: DatasetBuilder,\n};\nconst Optimizers = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainers = {\n  MiniBatchTrainer,\n};\nconst DatasetModifiers = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\n\nexport {\n  Builders,\n  Math,\n  Layers,\n  Dataset,\n  Optimizers,\n  Trainers,\n  DatasetModifiers,\n};\n"],"names":["Network","BackpropagationFactory","AbstractBuilder","dimension","dimensions","network","type","callback","layer","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","fs","LogisticLayer","ReluLayer","SoftmaxLayer","SoftplusLayer","TanhLayer","Builder1D","setWidth","jsonPath","Promise","resolve","reject","readFile","err","data","json","JSON","parse","toString","builder","forEach","layerData","layerClass","createLayer","setSize","getNetwork","getLayers","i","W","b","ConvLayer","MaxPoolLayer","Builder3D","setFilterSize","setStride","setNumFilters","setPadding","Matrix","Dataset","exampleSize","numberOfExamples","arr","example","dataIndex","Number","index","col","offset","batchSize","block","rows","csvtojson","DatasetBuilder","csvPath","noheader","output","fromFile","then","length","dataset","AbstractDatasetModifier","getNumberOfExamples","applyToExample","CallbackDatabaseModifier","number","gpu","MinMaxScalingDatabaseModifier","min","Infinity","max","exampleIndex","exampleAt","row","Math","kernel","createKernel","a","thread","x","y","constants","setOutput","cols","setConstants","MissingDataScalingDatabaseModifier","elementWiseAdd","multiply","penalty","AbstractLayer","A","Z","gW","gb","vW","cW","vb","cb","backPropagation","input","replicate","activation","value","width","height","depth","previousLayer","fillRandom","setZeros","AbstractLayer1D","resize","is1D","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setDepth","AbstractBackPropagation","elementWiseMultiply","elementWiseMultiplyNumber","elementWiseDivideNumber","Backpropagation1Dto1D","regularization","sigma","previousActivations","delta","transpose","conjugate","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToConv","BackpropagationToMaxPool","LayerType","getType","conv","maxpool","fullyconnected","reluActivation","reluDerivative","im2col","numFilters","filterSize","padding","stride","size","result","tmp","rollToColMatrix","setCol","m","predictions","Error","FullyConnectedLayer","logisticActivation","logisticDerivative","logisticLoss","logistic","pool","relu","softmaxActivation","softmaxLoss","softmax","softplusActivation","softplusDerivative","softplus","tanhActivation","tanhDerivative","tanh","GPU","mode","generateData","Array","Float32Array","ArrayBuffer","view","DataView","num","setFloat64","sum","oldData","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","m1","m2","elementWiseSubtract","parameter","random","sqrt","elementWiseDivide","exp","divider","colwiseSum","log","kernel2","kernel3","pow","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","inputOffset","resultWidth","resultHeight","resultDepth","_max","outputOffset","layers","push","forward","X","Y","reverse","getBackPropagation","propagate","loss","error","path","resultJSON","weights","stringify","writeFile","console","AbstractTrainer","optimizer","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","numBatches","ceil","cost","accuracy","batch","predictedOutput","getBatch","correctOutput","miniBatchSize","index1","colMaxCoeffIndex","index2","MiniBatchTrainer","startTime","Date","getTime","t","startIterationTime","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractOptimizer","OptimizerAdam","adam","beta1","beta2","epsilon","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","matrixMultiply","matrixSum","matrixFillRandom","matrixElementWiseMultiply","matrixElementWiseDivide","matrixElementWiseAdd","matrixElementWiseSubtract","Builders","Layers","Optimizers","Trainers","DatasetModifiers"],"sourceRoot":""}