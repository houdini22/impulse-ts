{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Network.ts","webpack://impulse-ts/./src/typescript/computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/computation/index.ts","webpack://impulse-ts/./src/typescript/computation/utils.ts","webpack://impulse-ts/./src/typescript/dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/Callback.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/MissingData.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/index.ts","webpack://impulse-ts/./src/typescript/dataset/index.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/layer/Conv.ts","webpack://impulse-ts/./src/typescript/layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/layer/Logistic.ts","webpack://impulse-ts/./src/typescript/layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/layer/Relu.ts","webpack://impulse-ts/./src/typescript/layer/Softmax.ts","webpack://impulse-ts/./src/typescript/layer/Softplus.ts","webpack://impulse-ts/./src/typescript/layer/Tanh.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/index.ts","webpack://impulse-ts/./src/typescript/layer/index.ts","webpack://impulse-ts/./src/typescript/math/Matrix.ts","webpack://impulse-ts/./src/typescript/math/math.ts","webpack://impulse-ts/./src/typescript/network-builder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/network-builder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/network-builder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/network-builder/index.ts","webpack://impulse-ts/./src/typescript/trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/trainer/index.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Dimension, Layers } from \"./types\";\nimport { Matrix } from \"./math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"./computation/utils\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(\n    X: Matrix,\n    Y: Matrix,\n    predictions: Matrix,\n    regularization: number\n  ): void {\n    const m = X.cols;\n\n    let delta = getComputation().execute(\n      \"elementWiseSubtract\",\n      predictions,\n      Y\n    ) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      delta = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, delta);\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Matrix } from \"../math/Matrix\";\n\ninterface KernelsInterface {}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(\n    name: string,\n    func: (m: Matrix, m2: Matrix | number) => null\n  ): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(\n    name: string,\n    ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]\n  ): Matrix | number {\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  return new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(calculated, divider).data\n  );\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(predictions.data[row][col]);\n    }\n  }\n\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, data)).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] * (1.0 - m.data[row][col]);\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      log[row][col] = Math.log(output.data[row][col]);\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      sub[row][col] = 1.0 - output.data[row][col];\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(1.0 - predictions.data[row][col]);\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return elementWiseAdd(\n    elementWiseMultiply(output, logMatrix),\n    elementWiseMultiply(subMatrix, logSubMatrix)\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] =\n        1.0 -\n        Math.pow(2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0, 2.0);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.max(0.0, m.data[row][col]);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] > 0 ? 1 : 0;\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] =\n        1 / (1 + Math.exp(-Math.log(1 + Math.exp(m.data[row][col]))));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.pow(m.data[row][col], 2);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      data[row][col] =\n        output.data[row][col] - Math.pow(predictions[row][col], 2);\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        data[row][col] += m1.data[row][i] * m2.data[i][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] - m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.random() - 0.5;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] * m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] * num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      data[col][row] = m.data[row][col];\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"elementWiseAdd\", elementWiseAdd);\n    this.addKernel(\"elementWiseSubtract\", elementWiseSubtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseMultiplyNumber\", elementWiseMultiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"elementWiseDivideNumber\", elementWiseDivideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return (\n        b[this.thread.x][this.thread.y] -\n        Math.pow(a[this.thread.x][this.thread.y], 2)\n      );\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    kernel(output.data) as number[][]\n  ).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"elementWiseAdd\", elementWiseAdd);\n    this.addKernel(\"elementWiseSubtract\", elementWiseSubtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseMultiplyNumber\", elementWiseMultiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"elementWiseDivideNumber\", elementWiseDivideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = arr[example][dataIndex].length\n          ? Number(arr[example][dataIndex])\n          : NaN;\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    if (this.data) {\n      return this.data.col(index);\n    }\n\n    return null;\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix | null {\n    if (this.data) {\n      return this.data.block(0, offset, this.data.rows, batchSize);\n    }\n    return null;\n  }\n}\n","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./Dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  apply(): Dataset {\n    for (\n      let example = 0;\n      example < this.dataset.getNumberOfExamples();\n      example += 1\n    ) {\n      this.applyToExample(example);\n    }\n\n    return this.dataset;\n  }\n\n  abstract applyToExample(example: number): void;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  applyToExample(example: number): void {\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.data.rows; row += 1) {\n        this.dataset.data.data[row][exampleIndex] = example.data.data[row][0];\n      }\n    }\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { gpu } from \"../../computation/ComputationGPU\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number): void {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (example.data) {\n          min = Math.min(example.data[row][0]);\n          max = Math.max(example.data[row][0]);\n        }\n      }\n    }\n\n    const kernel = gpu\n      .createKernel(function (a) {\n        return (\n          (a[this.thread.x][this.thread.y] - this.constants.min) /\n          (this.constants.max - this.constants.min)\n        );\n      })\n      .setOutput([this.dataset.data.data.rows, this.dataset.data.data.cols])\n      .setConstants({\n        min,\n        max,\n      });\n    this.dataset.data.data = kernel(this.dataset.data.data) as number[][];\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  applyToExample(example: number): void {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      if (example.data) {\n        for (let row = 0; row < example.data.rows; row += 1) {\n          if (isNaN(example[row][0])) {\n            rowsToFill.push({\n              row,\n              col: example,\n            });\n          } else {\n            sum += example[row][0];\n            correctExamplesCount++;\n          }\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { CallbackDatabaseModifier } from \"./Callback\";\nimport { MinMaxScalingDatabaseModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatabaseModifier } from \"./MissingData\";\n\nexport {\n  CallbackDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n};\n","import { Dataset } from \"./Dataset\";\nimport { DatasetBuilder } from \"./DatasetBuilder\";\n\nexport { Dataset, DatasetBuilder };\n","import { Matrix } from \"../math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../computation/utils\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension): AbstractLayer;\n\n  abstract getSize(): number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { getComputation } from \"../computation/utils\";\nimport { Matrix } from \"../math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\n      \"fillRandom\",\n      this.W,\n      this.width\n    ) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\n      \"fillRandom\",\n      this.b,\n      this.width\n    ) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"setZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"setZeros\", this.gb) as Matrix;\n\n    this.cW.resize(this.height, this.width);\n    this.cW = getComputation().execute(\"setZeros\", this.cW) as Matrix;\n\n    this.cb.resize(this.height, 1);\n    this.cb = getComputation().execute(\"setZeros\", this.cb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"setZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"setZeros\", this.cb) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension): AbstractLayer1D {\n    this.setHeight(value[0]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: AbstractLayer): AbstractLayer3D {\n    if (previousLayer.is3D()) {\n      this.setSize([\n        previousLayer.getOutputWidth(),\n        previousLayer.getOutputHeight(),\n        previousLayer.getOutputDepth(),\n      ]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): AbstractLayer3D {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../math/Matrix\";\nimport { im2col } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.W = getComputation().execute(\n      \"fillRandom\",\n      this.W,\n      this.width * this.height * this.depth\n    ) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.gW = getComputation().execute(\"setZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"setZeros\", this.gb) as Matrix;\n\n    this.cW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.cW = getComputation().execute(\"setZeros\", this.gb) as Matrix;\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = getComputation().execute(\"setZeros\", this.cb) as Matrix;\n\n    this.vW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.vW = getComputation().execute(\"setZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"setZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = getComputation()\n        .execute(\n          \"elementWiseAdd\",\n          getComputation().execute(\"multiply\", this.W, conv) as Matrix,\n          this.b.replicate(1, input.cols)\n        )\n        .rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { ConvLayer };\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\n          \"Invalid usage. Cannot fully connect with previous non maxpool layer.\"\n        );\n      }\n    } else {\n      throw new Error(\n        \"Invalid usage. Cannot fully connect with previous 1D layer.\"\n      );\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\n      \"logisticLoss\",\n      output,\n      predictions\n    ) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { maxpool } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { BackpropagationToMaxPool } from \"./backpropagation\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize: number = 0;\n  stride: number = 0;\n\n  configure(): void {\n    this.backPropagation = new BackpropagationToMaxPool(\n      this,\n      this.previousLayer\n    );\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\n      \"softmaxLoss\",\n      output,\n      predictions\n    ) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    if (this.layer) {\n      const previousActivations =\n        this.previousLayer !== null ? this.previousLayer.A : input;\n      const delta = getComputation().execute(\n        \"multiply\",\n        sigma,\n        previousActivations.transpose().conjugate()\n      );\n      this.layer.gW = getComputation().execute(\n        \"elementWiseAdd\",\n        getComputation().execute(\n          \"elementWiseDivideNumber\",\n          delta,\n          numberOfExamples\n        ) as Matrix,\n        getComputation().execute(\n          \"elementWiseMultiplyNumber\",\n          this.layer.W,\n          regularization / numberOfExamples\n        ) as Matrix\n      ) as Matrix;\n      this.layer.gb = getComputation().execute(\n        \"elementWiseDivideNumber\",\n        sigma.rowwiseSum(),\n        numberOfExamples\n      );\n      if (this.previousLayer !== null) {\n        return getComputation().execute(\n          \"elementWiseMultiply\",\n          getComputation().execute(\n            \"multiply\",\n            this.layer.W.transpose(),\n            sigma\n          ) as Matrix,\n          this.previousLayer.derivative(this.previousLayer.A)\n        ) as Matrix;\n      }\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (\n        previousLayer.is1D() ||\n        previousLayer.getType() == LayerType.fullyconnected\n      ) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"setZeros\",\n        new Matrix(\n          (inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth,\n          numberOfExamples\n        )\n      ) as Matrix;\n\n      const result = new Matrix(\n        inputWidth * inputHeight * inputDepth,\n        numberOfExamples\n      );\n\n      const aPrev = previousLayer.derivative(previousLayer.A);\n\n      previousLayer.gW = getComputation().execute(\n        \"setZeros\",\n        previousLayer.gW\n      ) as Matrix;\n      previousLayer.gb = getComputation().execute(\n        \"setZeros\",\n        previousLayer.gb\n      ) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0,\n                      horizontal = horizStart,\n                      horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data) {\n                      tmpResult[\n                        d *\n                          (inputWidth + 2 * padding) *\n                          (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][\n                          d * filterSize * filterSize + y * filterSize + x\n                        ] *\n                        sigma[\n                          c * outputWidth * outputHeight + h * outputWidth + w\n                        ][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z =\n                          previousLayer.Z.data[\n                            d * inputWidth * inputHeight +\n                              vertical * inputWidth +\n                              horizontal\n                          ][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight +\n                                verticalPad * inputWidth +\n                                horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data) {\n                      previousLayer.gW.data[c][\n                        d * filterSize * filterSize + y * filterSize + x\n                      ] +=\n                        (z *\n                          sigma[\n                            c * (outputWidth * outputHeight) +\n                              h * outputWidth +\n                              w\n                          ][m]) /\n                        numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma[c * (outputWidth * outputHeight) + h * outputWidth + w][\n                    m\n                  ] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (\n                let w = -padding, x = 0;\n                w < inputWidth + padding;\n                w++, x++\n              ) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight) {\n                  result[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult[\n                      c *\n                        (inputWidth + 2 * padding) *\n                        (inputHeight + 2 * padding) +\n                        y * (inputWidth + 2 * padding) +\n                        x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\n        \"setZeros\",\n        new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)\n      ) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (\n                let y = 0, vStart = vertStart;\n                y < filterSize;\n                y++, vStart++\n              ) {\n                for (\n                  let x = 0, hStart = horizStart;\n                  x < filterSize;\n                  x++, hStart++\n                ) {\n                  if (\n                    prevLayer.Z.data &&\n                    _max <\n                      prevLayer.Z.data[\n                        inputOffset + vStart * inputWidth + hStart\n                      ][m]\n                  ) {\n                    _max =\n                      prevLayer.Z.data[\n                        inputOffset + vStart * inputWidth + hStart\n                      ][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\n\nexport {\n  BackpropagationToMaxPool,\n  Backpropagation3Dto1D,\n  BackpropagationToConv,\n  Backpropagation1Dto1D,\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n};\n","import { getComputation } from \"../computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          data[row][col] = arr[col][row];\n        } else if (arr[col] && typeof arr[col][row] === \"number\") {\n          data[row][col] = arr[col][row];\n        } else {\n          data[row][col] = 0;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        if (this.data) {\n          data[newRow][newCol] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data) {\n        data[row] = [this.data[row][col]];\n      }\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols =\n    ((width - kernel_w + 2 * pad_w) / stride_w + 1) *\n    ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\n    \"setZeros\",\n    new Matrix(rows, cols)\n  ) as Matrix;\n\n  for (\n    let boundingY = -pad_h;\n    boundingY + kernel_h <= height + pad_h;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = -pad_w;\n      boundingX + kernel_w <= width + pad_w;\n      boundingX += stride_w\n    ) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (\n              boundingY + y >= 0 &&\n              boundingX + x >= 0 &&\n              boundingX + x < width &&\n              boundingY + y < height\n            ) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[\n                    (y + boundingY) * width + boundingX + x + inputOffset\n                  ][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"setZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  );\n\n  for (\n    let boundingY = 0;\n    boundingY + kernel_h <= height;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = 0;\n      boundingX + kernel_w <= width;\n      boundingX += stride_w\n    ) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(\n              _max,\n              input.data[\n                inputOffset + (y + boundingY) * width + boundingX + x\n              ][0]\n            );\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../Network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(\n    type: Layers,\n    callback: (layer: Layers) => void | null = null\n  ): AbstractNetworkBuilder {\n    if (this.network) {\n      const layer: Layers = new type();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        layer.transition(this.lastLayer);\n      }\n\n      layer.configure();\n      layer.setBackPropagation(\n        BackpropagationFactory.create(this.lastLayer, layer)\n      );\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { Matrix } from \"../math/Matrix\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"size\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Dimension, Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { ConvLayer } from \"../layer/\";\nimport { MaxPoolLayer } from \"../layer/\";\n\ninterface JSONLayerData {\n  type: string;\n  dimensions: number | Dimension;\n}\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setSize(this.dimensions);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            builder.createLayer(LogisticLayer, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            builder.createLayer(ReluLayer, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            builder.createLayer(SoftplusLayer, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            builder.createLayer(TanhLayer, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import Network from \"../Network\";\nimport { AbstractOptimizer } from \"./optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 0;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(\n    inputDataset: Dataset,\n    outputDataset: Dataset\n  ): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(\n    stepCallback: (data: StepCallbackParameters) => void\n  ): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    if (this.network) {\n      this.network.getLayers().forEach((layer) => {\n        penalty += layer.penalty();\n      });\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += batchSize, offset += 1\n      ) {\n        const batch = inputDataset.getBatch(offset, batchSize);\n        if (batch) {\n          const predictedOutput = this.network.forward(batch);\n          const correctOutput = batch;\n\n          const miniBatchSize = correctOutput.cols;\n\n          const loss = this.network.loss(correctOutput, predictedOutput);\n          const error = this.network.error(miniBatchSize);\n\n          cost +=\n              (error * loss +\n                  (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n              // TODO: fix it\n              (numBatches * (miniBatchSize / batchSize));\n\n          for (let col = 0; col < predictedOutput.cols; col += 1) {\n            const index1 = predictedOutput.colMaxCoeffIndex(col);\n            const index2 = correctOutput.colMaxCoeffIndex(col);\n\n            if (index1 === index2) {\n              accuracy++;\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    if (this.optimizer && this.network) {\n      this.optimizer.setBatchSize(this.batchSize);\n\n      for (let i = 0; i < this.iterations; i += 1) {\n        const startIterationTime = new Date().getTime();\n\n        for (\n          let batch = 0, offset = 0;\n          batch < numberOfExamples;\n          batch += this.batchSize, offset += this.batchSize\n        ) {\n          const startIterationTime2 = new Date().getTime();\n          const input = inputDataset.getBatch(offset, this.batchSize);\n          const output = outputDataset.getBatch(offset, this.batchSize);\n          const forward = this.network.forward(input);\n\n          this.network.backward(input, output, forward, this.regularization);\n\n          this.network.getLayers().forEach((layer) => {\n            if (this.optimizer) {\n              this.optimizer.setT(++t);\n              this.optimizer.optimize(layer);\n            }\n          });\n\n          if (this.verbose) {\n            const endIterationTime = new Date().getTime();\n            console.log(\n              `Batch: ${offset} / ${numberOfExamples} | Time: ${\n                endIterationTime - startIterationTime2\n              } ms | ${endIterationTime - startIterationTime} ms.`\n            );\n          }\n        }\n\n        if (this.verbose) {\n          if ((i + 1) % this.verboseStep === 0) {\n            const endTime = new Date().getTime();\n            const currentResult = this.cost(inputDataset, outputDataset);\n\n            console.log(\n              `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n                currentResult.accuracy\n              }% | Time: ${(endTime - startTime) / 100} s.`\n            );\n          }\n        }\n\n        if (typeof this.stepCallback === \"function\") {\n          this.stepCallback.call(null, {\n            iteration: i,\n          });\n        }\n      }\n    }\n\n    return this;\n  }\n}\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\n\nexport { MiniBatchTrainer };\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n\n    layer.vW = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.vW,\n        beta1\n      ) as Matrix,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gW,\n        1 - beta1\n      ) as Matrix\n    ) as Matrix;\n    const wCorrected = getComputation().execute(\n      \"elementWiseDivideNumber\",\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    ) as Matrix;\n\n    layer.cW = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.cW,\n        beta1\n      ) as Matrix,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gW,\n        1 - beta1\n      ) as Matrix\n    ) as Matrix;\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.cW,\n        1 - Math.pow(beta2, t)\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.W,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\n          \"elementWiseMultiply\",\n          wCorrected,\n          sCorrected\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.vb,\n        beta1\n      ) as Matrix,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gb,\n        1 - beta1\n      ) as Matrix\n    ) as Matrix;\n    const wCorrected2 = getComputation().execute(\n      \"elementWiseDivideNumber\",\n      layer.vb,\n      1 - Math.pow(beta1, t)\n    ) as Matrix;\n    layer.cb = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.cb,\n        beta2\n      ) as Matrix,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\n          \"elementWiseMultiply\",\n          layer.gb,\n          layer.gb\n        ) as Matrix,\n        1 - beta2\n      ) as Matrix\n    ) as Matrix;\n    const sCorrected2 = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\n        \"elementWiseDivideNumber\",\n        layer.cb,\n        1 - Math.pow(beta2, t)\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.b,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          wCorrected2,\n          sCorrected2\n        ) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.W,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gW,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.b,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gb,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\n\nexport { OptimizerAdam, OptimizerGradientDescent };\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/\";\nimport { MaxPoolLayer } from \"./layer/\";\nimport { FullyConnectedLayer } from \"./layer/\";\nimport { PurelinLayer } from \"./layer/Purelin\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"gpu.js\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./network-builder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/Matrix\";\nimport {\n  DatasetBuilder as DatasetBuilderBuilder,\n  Dataset as DatasetDataset,\n} from \"./dataset\";\nimport { OptimizerAdam, OptimizerGradientDescent } from \"./trainer/optimizer\";\nimport { MiniBatchTrainer } from \"./trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./dataset/datasetmodifier\";\nimport { ComputationCPU, ComputationGPU, setComputation } from \"./computation\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n};\n"],"names":["fs","getComputation","Network","dimensions","layer","size","layers","push","input","output","forEach","forward","X","Y","predictions","regularization","m","cols","delta","execute","length","getBackPropagation","propagate","loss","error","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","writeFile","err","console","AbstractComputation","name","func","kernels","args","apply","Matrix","elementWiseDivide","m1","m2","rows","Error","row","col","elementWiseDivideNumber","num","softmaxActivation","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","log","elementWiseMultiply","sum","logisticActivation","logisticDerivative","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","elementWiseAdd","tanhActivation","tanhDerivative","pow","reluActivation","max","reluDerivative","softplusActivation","softplusDerivative","penalty","sqrt","purelinLoss","multiply","Array","i","elementWiseSubtract","fillRandom","parameter","random","setZeros","setOnes","elementWiseMultiplyNumber","transpose","ComputationCPU","addKernel","GPU","gpu","mode","kernel","createKernel","a","thread","x","y","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","setComputation","currentComputation","Dataset","exampleSize","numberOfExamples","arr","example","dataIndex","Number","NaN","index","offset","batchSize","block","csvtojson","DatasetBuilder","csvPath","noheader","fromFile","then","dataset","AbstractDatasetModifier","getNumberOfExamples","applyToExample","CallbackDatabaseModifier","exampleIndex","callback","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","isNaN","modificationType","AbstractLayer","A","Z","gW","gb","vW","cW","vb","cb","backPropagation","activation","value","width","height","depth","previousLayer","AbstractLayer1D","resize","is1D","setWidth","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getWidth","getHeight","getDepth","im2col","LayerType","ConvLayer","numFilters","filterSize","padding","stride","conv","tmp","rollToColMatrix","setCol","FullyConnectedLayer","maxpool","LogisticLayer","logistic","BackpropagationToMaxPool","MaxPoolLayer","pool","ReluLayer","relu","SoftmaxLayer","softmax","SoftplusLayer","softplus","TanhLayer","tanh","AbstractBackPropagation","Backpropagation1Dto1D","sigma","previousActivations","conjugate","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToConv","BackpropagationFactory","fullyconnected","getPadding","getStride","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","aPrev","c","h","w","vertStart","vertEnd","horizStart","horizEnd","d","vertical","verticalPad","horizontal","horizontalPad","z","prevLayer","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","generateData","Float32Array","oldData","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","AbstractNetworkBuilder","network","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","readFile","json","parse","toString","builder","layerData","layerClass","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","undefined","iterations","learningRate","verbose","verboseStep","stepCallback","inputDataset","outputDataset","numBatches","ceil","cost","accuracy","batch","getBatch","predictedOutput","correctOutput","miniBatchSize","index1","colMaxCoeffIndex","index2","MiniBatchTrainer","startTime","Date","getTime","t","setBatchSize","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","call","iteration","AbstractOptimizer","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","DatasetBuilderBuilder","DatasetDataset","NetworkBuilder","Layer","Optimizer","Trainer","DatasetModifier","Computation"],"sourceRoot":""}