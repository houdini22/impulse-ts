{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Recurrent.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, regularization: number): void {\n    const m = X.cols;\n    const predictions = this.forward(X);\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer], this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\n/*import { GPU } from \"gpu.js\";*/\n\n//export const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);*/\n  return Matrix.from([[]]);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();*/\n  return 0;\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();*/\n  return 0;\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();*/\n  return 0;\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();*/\n  return 0;\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  /*const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  /*const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);*/\n  return Matrix.from([[]]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] >= 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (typeof arr[row][col] === \"string\") {\n          if (/^[-0-9.e]+$/.test(String(arr[row][col]))) {\n            data[row][col] = Number(arr[row][col]);\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        } else {\n          data[row][col] = arr[row][col];\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Dimension, LayersRNN } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { DatasetVocabulary } from \"impulse-dataset-ts/src/typescript/Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): LayersRNN[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(this.dimensions[1], 1).setZeros();\n    let aPrev = new Matrix(this.dimensions[0], 1).setRandom(this.dimensions[1]);\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).setMin(1e-3).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n      x = new Matrix(this.dimensions[1], 1).setZeros();\n      let maxIndex = y.colMaxCoeffIndex(0);\n      if (maxIndex === -1) {\n        maxIndex = Math.floor(Math.random() * this.dimensions[1]);\n        idx = charIndices[chars[maxIndex]];\n      }\n      x.data[maxIndex][0] = 1;\n\n      indices.push(idx);\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    if (counter === 50) {\n      indices.push(newLineCharacter);\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(this.dimensions[1], this.dimensions[0]).setZeros();\n      x[t].data[X.data[t - 1][0]][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(x[t], a[t - 1]);\n      a[t] = _a;\n      yHat[t] = _yHat; //.setMin(1e-5);\n      loss += 0; // todo\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    let _dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    let _dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    let _dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    let _db = new Matrix(this.layers[0].db.rows, this.layers[0].db.cols).setZeros();\n    let _dby = new Matrix(this.layers[0].dby.rows, this.layers[0].dby.cols).setZeros();\n    let _daNext = new Matrix(this.layers[0].daNext.rows, this.layers[0].daNext.rows).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      // loop over examples\n      const dy = Matrix.from(a[t].data);\n      dy.data[X.data[t - 1][0]][0] -= 1;\n      const { dWax, dWya, dWaa, db, dby, daNext } = this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n      _dWax = _dWax.add(dWax.replicate(1, _dWax.cols));\n      _dWaa = _dWaa.add(dWaa.replicate(1, _dWaa.cols));\n      _dWya = _dWya.add(dWya);\n      _db = _db.add(db);\n      _dby = _dby.add(dby);\n      _daNext = _daNext.add(daNext);\n    }\n\n    // gradient clipping\n    this.layers[0].dWax = _dWax.setMin(-5).setMax(5);\n    this.layers[0].dWaa = _dWaa.setMin(-5).setMax(5);\n    this.layers[0].dWya = _dWya.setMin(-5).setMax(5);\n    this.layers[0].db = _dby.setMin(-5).setMax(5);\n    this.layers[0].dby = _dby.setMin(-5).setMax(5);\n    this.layers[0].daNext = _daNext.setMin(-5).setMax(5);\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(\n      this.layers[0].dWax.replicate(1, this.getDimensions()[2]).multiply(-learningRate)\n    );\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    //this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    //this.layers[0].by = this.layers[0].by.add(\n    //  this.layers[0].dby.multiply(-learningRate).rowwiseSum().divide(this.layers[0].dby.cols).transpose()\n    //);\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  getDimensions(): Dimension {\n    return this.dimensions;\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RecurrentLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer3D\n  | AbstractLayer1D;\nexport type Layers1D = LogisticLayer | SoftmaxLayer | TanhLayer | ReluLayer | SoftplusLayer | PurelinLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RecurrentLayer;\nexport type LayersLSTM = LSTMLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    layer: Layers,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers } from \"../../types\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n\n    const delta = sigma.dot(previousActivations.transpose());\n    this.layer.gW = delta.divide(numberOfExamples).add(layer.W.multiply(regularization / numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers } from \"../../types\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers, Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers, Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMin(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = this.vb.setZeros();\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m.setMin(0);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { getComputation } from \"../Computation\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      );\n\n      result.setCol(i, pool.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport interface GradientResult {\n  dWax: Matrix;\n  dWya: Matrix;\n  dWaa: Matrix;\n  db: Matrix;\n  dby: Matrix;\n  daNext: Matrix;\n}\n\nexport class RecurrentLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public aNext: Matrix | null = null;\n  public aPrev: Matrix | null = null;\n  public daNext: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(this.getWidth(), this.getHeight());\n    this.Wax = this.Wax.setRandom(this.getWidth());\n\n    this.Waa = new Matrix(this.getWidth(), this.getWidth());\n    this.Waa = this.Waa.setRandom(this.getWidth());\n\n    this.Wya = new Matrix(this.getDepth(), this.getWidth());\n    this.Wya = this.Wya.setRandom(this.getDepth());\n\n    this.b = new Matrix(this.getWidth(), 1);\n    this.b = this.b.setRandom(this.getWidth());\n\n    this.by = new Matrix(this.getDepth(), 1);\n    this.by = this.by.setRandom(this.getDepth());\n\n    this.dWax = new Matrix(this.getWidth(), this.getHeight());\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(this.getWidth(), this.getWidth());\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(this.getDepth(), this.getWidth());\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(this.getWidth(), 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(this.getDepth(), 1);\n    this.dby = this.dby.setZeros();\n\n    this.daNext = new Matrix(this.getWidth(), this.getWidth());\n    this.daNext = this.daNext.setZeros();\n  }\n\n  forward(x: Matrix, aPrev: Matrix): Matrix[] {\n    const aNext = this.Wax.dot(x)\n      .add(this.Waa.dot(aPrev).replicate(1, this.getWidth()))\n      .add(this.b.replicate(1, x.cols))\n      .tanh();\n    const y = this.Wya.dot(aNext).add(this.by.replicate(1, x.cols)).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    this.aPrev = aPrev;\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): GradientResult {\n    const dTanh = a.pow(2).minusOne().multiply(dy);\n\n    const dWax = dTanh.dot(x.transpose());\n    const dWaa = dTanh.dot(aPrev.transpose());\n    const db = this.db; //.add(dtanh.colwiseSum().divide(dtanh.cols)).setMin(-5).setMax(5);\n    const dby = this.dby; //.replicate(1, this.getWidth()).add(dy).setMin(-5).setMax(5);\n    const dWya = this.dWya; //.add(dy.dot(a.transpose())).setMin(-5).setMax(5);\n    const daNext = this.Waa.transpose().dot(dTanh);\n\n    return {\n      dWax,\n      dWya,\n      dWaa,\n      db,\n      dby,\n      daNext,\n    };\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RecurrentLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.sW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.sb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWCorrected = layer.sW.add(1e-8).sqrt();\n    const sbCorrected = layer.sb.add(1e-8).sqrt();\n\n    layer.W = layer.W.subtract(vWCorrected.divide(sWCorrected).multiply(learningRate));\n    layer.b = layer.b.subtract(vbCorrected.divide(sbCorrected).multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = correctOutput.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer, CostResult } from \"./AbstractTrainer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = this.batchSize;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0.0;\n    let accuracy = 0.0;\n\n    // calculate penalty\n    let penalty = 0.0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty = layer.penalty();\n    });\n\n    const startTime = new Date().getTime();\n    const startIterationTime = new Date().getTime();\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n      const startIterationTime2 = new Date().getTime();\n      const input = inputDataset.getBatch(offset, this.batchSize);\n      const correctOutput = outputDataset.getBatch(offset, this.batchSize);\n      const predictions = this.network.forward(input.data);\n\n      const error = correctOutput.data.multiply(predictions.log()).sum();\n      cost += (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n      for (let col = 0; col < predictions.cols; col += 1) {\n        const index1 = predictions.colMaxCoeffIndex(col);\n        const index2 = correctOutput.data.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input, output);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"impulse-dataset-ts/src/typescript/Dataset/Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n\n      this.network.backward(inputDataset.data, outputDataset.data, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset, outputDataset);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"impulse-dataset-ts/src/typescript/Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.01;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n\n    const [X, Y] = dataset.buildData(100);\n    const [x, y] = dataset.vectorization(X, Y);\n\n    let aPrev = new Matrix(this.network.getDimensions()[0], this.network.getDimensions()[0]).setZeros();\n\n    for (let iteration = 0; iteration < this.iterations; iteration += 1) {\n      const index = iteration % x.length;\n      const [_loss] = this.network.forward(x[index], y, aPrev);\n      loss = _loss;\n      const [currentLoss, _aPrev] = this.network.optimize(x[index], y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${iteration + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset).trim()}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { NetworkRNN } from \"./Network\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RecurrentLayer,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport { NetworkBuilder, Math, Layer, Optimizer, Trainer, Computation, Network };\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Network","dimensions","this","layer","size","layers","push","input","output","forEach","forward","X","Y","regularization","m","cols","sigma","subtract","length","getBackPropagation","propagate","derivative","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractComputation","name","func","kernels","Error","args","apply","elementWiseDivide","m1","m2","rows","Matrix","divideNumber","num","softmaxActivation","softmaxLoss","predictions","logisticActivation","logisticLoss","tanhActivation","reluActivation","softplusActivation","penalty","sqrt","purelinLoss","dot","add","fillRandom","parameter","fillZeros","elementWiseMultiply","multiplyNumber","transpose","ComputationGPU","addKernel","row","col","Math","exp","log","firstMatrix","sub","toMultiply2","toMultiply1","subtractFromNumber","sum","logisticBackpropagation","oldY","multiply","minusOne","max","reluBackpropagation","pow","Array","i","random","logMinusOne","addNumber","ComputationCPU","currentComputation","getComputation","resize","generateData","arr","test","String","Number","t","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","min","shape","cb","divide","rowwiseSum","replicate","undefined","LayerType","NetworkRNN","vocabularySize","sequenceLength","dataset","Waa","Wax","Wya","by","indices","charIndices","getCharIndices","newLineCharacter","chars","getChars","x","setZeros","aPrev","setRandom","idx","counter","a","setMin","tanh","y","softmax","colMaxCoeffIndex","floor","map","join","a0","yHat","loss","_a","_yHat","A","_dWax","_dWaa","_dWya","_db","db","_dby","dby","_daNext","daNext","dy","backward","dWax","dWya","dWaa","setMax","learningRate","getDimensions","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","delta","gW","gb","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","backPropagation","width","height","depth","AbstractLayer1D","vW","vb","sW","sb","dW","activation","setWidth","is3D","setHeight","SoftmaxLayer","LogisticLayer","TanhLayer","ReluLayer","SoftplusLayer","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","boundingY","boundingX","currentResultCol","channel","maxpool","resultWidth","resultHeight","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","conv","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","RecurrentLayer","aNext","dTanh","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractOptimizer","batchSize","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWCorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerAdagrad","adagrad","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","accuracy","correctOutput","cost","MiniBatchTrainer","ceil","Date","getTime","batch","offset","getBatch","setBatchSize","setLearningRate","startTime","startIterationTime","startIterationTime2","setT","optimize","endIterationTime","endTime","currentResult","iteration","Trainer","RNNTrainer","getVocabularySize","buildData","vectorization","index","currentLoss","sample","trim","NetworkBuilder","Layer","Optimizer","TrainerTrainer","Computation","setComputation"],"sourceRoot":""}