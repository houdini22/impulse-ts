{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/RNN.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-ts/./src/typescript/main.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => void): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        cb(this.data[row][col]);\n      }\n    }\n    return this;\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n\nexport class Matrix3D {\n  public rows = 0;\n  public cols = 0;\n  public depth = 0;\n  public data: number[][][] | null = null;\n\n  constructor(rows = 0, cols = 0, depth: number = 0, data: number[][][] | null = null) {\n    this.resize(rows, cols, depth);\n    if (data) {\n      this.data = data;\n    }\n  }\n\n  resize(rows: number, cols: number, depth: number): Matrix3D {\n    this.rows = rows;\n    this.cols = cols;\n    this.depth = depth;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        this.data[row][col] = new Array(depth);\n      }\n    }\n\n    return this;\n  }\n\n  setZeros() {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = new Array(this.depth);\n        for (let depth = 0; depth < this.cols; depth += 1) {\n          data[row][col][depth] = 0;\n        }\n      }\n    }\n    return new Matrix3D(this.rows, this.cols, this.depth, data);\n  }\n}\n","import { Dimension, Layers, LayersRNN } from \"../types\";\nimport { Matrix, Matrix3D } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const vocabularySize = dataset.getVocabularySize();\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(27, 1).setZeros();\n    let aPrev = new Matrix(100, 1).setZeros();\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n\n      indices.push(idx);\n\n      x = new Matrix(27, 1).setZeros();\n      x.data[y.colMaxCoeffIndex(0)][0] = 1;\n\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix, vocabularySize: number = 20): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(27, 1).setZeros();\n      x[t].data[X.rowMaxCoeffIndex(t - 1)][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(a[t - 1], x[t]);\n      a[t] = _a;\n      yHat[t] = _yHat.setMin(1e-5);\n      loss -= Math.log(yHat[t].data[t - 1][0]);\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix, Y: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    this.layers[0].dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    this.layers[0].dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    this.layers[0].dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    this.layers[0].db = new Matrix(this.layers[0].b.rows, this.layers[0].b.cols).setZeros();\n    this.layers[0].dby = new Matrix(this.layers[0].by.rows, this.layers[0].by.cols).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      const dy = Matrix.from(yHat[t].data);\n      this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n    }\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X, Y);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(this.layers[0].dWax.multiply(-learningRate));\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    this.layers[0].by = this.layers[0].by.add(this.layers[0].dby.multiply(-learningRate));\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RNNLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RNNLayer;\nexport type LayersLSTM = LSTMLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n    this.layer.gW = sigma.dot(previousActivations.transpose()).divide(numberOfExamples);\n    this.layer.gW = this.layer.gW.add(this.layer.W.multiply(regularization).divide(numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        console.log(\n          this.layer.W.rows,\n          this.layer.W.cols,\n          sigma.rows,\n          sigma.cols,\n          this.layer.gW.rows,\n          this.layer.gW.cols\n        );\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n  const result = [[]];\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result[currentResultCol][currentResultRow] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n      result[currentResultCol] = [];\n    }\n  }\n  return Matrix.from(result);\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"fillZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  ) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = getComputation().execute(\"fillZeros\", this.sb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      console.log(conv.rows, conv.cols, this.W.rows, this.W.cols);\n      process.exit();\n\n      const tmp = this.W.dot(conv).add(this.b.replicate(1, conv.cols));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class RNNLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public daNext: Matrix | null = null;\n  public aPrev: Matrix | null = null;\n  public dxt: Matrix | null = null;\n  public daPrev: Matrix | null = null;\n  public dba: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(100, 27);\n    this.Wax = this.Wax.setRandom(1);\n\n    this.Waa = new Matrix(100, 100);\n    this.Waa = this.Waa.setRandom(1);\n\n    this.Wya = new Matrix(27, 100);\n    this.Wya = this.Wya.setRandom(1);\n\n    this.b = new Matrix(100, 1);\n    this.b = this.b.setRandom(1);\n\n    this.by = new Matrix(27, 1);\n    this.by = this.by.setRandom(1);\n\n    this.dWax = new Matrix(100, 27);\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(100, 100);\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(27, 100);\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(100, 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(27, 1);\n    this.dby = this.dby.setZeros();\n  }\n\n  forward(aPrev: Matrix, x: Matrix): Matrix[] {\n    const aNext = this.Waa.dot(aPrev).add(this.Wax.dot(x)).add(this.b).tanh();\n    const y = this.Wya.dot(aNext).add(this.by).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): void {\n    this.dWya = this.dWya.add(dy.dot(a.transpose())).setMax(5).setMin(-5);\n    this.dby = this.dby.add(dy).setMax(5).setMin(-5);\n    const da = this.Wya.transpose().dot(dy).add(this.daNext);\n    const daraw = a.multiply(a).minusOne().multiply(da);\n    this.db = this.db.add(daraw).setMax(5).setMin(-5);\n    this.dWax = this.dWax.add(daraw.dot(x.transpose())).setMax(5).setMin(-5);\n    this.dWaa = this.dWaa.add(daraw.dot(aPrev.transpose())).setMax(5).setMin(-5);\n    this.daNext = this.Waa.transpose().dot(daraw).setMax(5).setMin(-5);\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RNNLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    const indices = this.getCharIndices();\n    example.split(\"\").forEach((ch, i) => {\n      data[i] = [];\n      for (let col = 0; col < this.vocabularySize; col += 1) {\n        data[i][col] = 0;\n      }\n      data[i][indices[ch]] = 1;\n    });\n    return Matrix.from(data).transpose();\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    const indices = this.getCharIndices();\n    example.split(\"\").forEach((ch, i) => {\n      data[i] = [];\n      for (let col = 0; col < this.vocabularySize; col += 1) {\n        data[i][col] = 0;\n      }\n      data[i][indices[ch]] = 1;\n    });\n    return Matrix.from(data).transpose();\n  }\n}\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.gW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.gb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWcorrected = layer.sW.divide(1 - Math.pow(this.beta2, 2));\n    const sbCorrected = layer.sb.divide(1 - Math.pow(this.beta2, 2));\n\n    layer.W = layer.W.subtract(vWCorrected.multiply(learningRate).divide(sWcorrected.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(vbCorrected.multiply(learningRate).divide(sbCorrected.sqrt().add(1e-8)));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(X: Matrix, Y: Matrix): CostResult {\n    const numberOfExamples = X.cols;\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(X);\n    const correctOutput = Y;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = Y.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * X.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input.data, output.data);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset.data, outputDataset.data);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.001;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n    const examples: string[] = dataset.getExamples();\n    const indices = dataset.getCharIndices();\n\n    let aPrev = new Matrix(100, 1).setRandom(1).abs().setMax(dataset.getVocabularySize()).setMin(0);\n\n    for (let j = 0; j < this.iterations; j += 1) {\n      console.log(`Iteration ${j + 1}`);\n      const index = j % examples.length;\n      const x = dataset.getExampleX(index);\n      const y = dataset.getExampleY(index);\n      const [_loss] = this.network.forward(x, y, aPrev);\n      loss = _loss;\n      this.network.backward(x, y);\n      const [currentLoss, _aPrev] = this.network.optimize(x, y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${j + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset)}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  apply(): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < this.dataset.getNumberOfExamples(); col += 1) {\n      const example = this.dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        this.dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return this.dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < this.dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n\n    return this.dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RNNLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { NetworkRNN } from \"./Network\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RNNLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n  Network,\n};\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","Network","dimensions","this","layer","size","layers","push","input","output","forEach","forward","X","Y","predictions","regularization","m","cols","sigma","subtract","length","getBackPropagation","propagate","derivative","path","resultJSON","type","getType","getSize","weights","W","data","b","result","JSON","stringify","Promise","resolve","reject","fs","err","console","error","AbstractComputation","name","func","kernels","Error","args","apply","gpu","GPU","mode","elementWiseDivide","m1","m2","rows","kernel","createKernel","a","thread","x","y","setOutput","Matrix","divideNumber","num","constants","number","setConstants","softmaxActivation","Math","exp","divider","colwiseSum","replicate","softmaxLoss","log","elementWiseMultiply","sum","logisticActivation","logisticLoss","kernel2","kernel3","add","tanhActivation","reluActivation","max","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","i","fillRandom","parameter","random","fillZeros","multiplyNumber","transpose","ComputationGPU","addKernel","row","col","firstMatrix","sub","toMultiply2","toMultiply1","subtractFromNumber","logisticBackpropagation","oldY","multiply","minusOne","reluBackpropagation","Array","logMinusOne","addNumber","ComputationCPU","currentComputation","getComputation","resize","generateData","arr","Float32Array","Number","NaN","t","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","min","cb","divide","rowwiseSum","LayerType","NetworkRNN","vocabularySize","sequenceLength","dataset","Waa","Wax","Wya","by","indices","getVocabularySize","charIndices","getCharIndices","newLineCharacter","chars","getChars","setZeros","aPrev","idx","counter","tanh","softmax","colMaxCoeffIndex","map","join","a0","yHat","loss","rowMaxCoeffIndex","_a","_yHat","setMin","A","dWax","dWaa","dWya","db","dby","dy","backward","learningRate","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","previousActivations","gW","gb","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","backPropagation","width","height","depth","AbstractLayer1D","vW","vb","sW","sb","dW","setRandom","activation","setWidth","is3D","setHeight","SoftmaxLayer","delta","LogisticLayer","TanhLayer","ReluLayer","setMax","SoftplusLayer","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","maxpool","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","conv","process","exit","setCol","rollToColMatrix","FullyConnectedLayer","MaxPoolLayer","pool","RNNLayer","aNext","da","daNext","daraw","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","instance","index","offset","batchSize","block","fromMatrix","DatasetBuilder","sourcePromise","then","source","matrix","DatasetVocabulary","str","toLowerCase","Set","split","sort","dataSize","replace","example","char","tx","substr","sentence","_m","exampleIndex","getExamples","ch","DatasetVocabularyBuilder","AbstractOptimizer","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWcorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerAdagrad","adagrad","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","accuracy","correctOutput","cost","MiniBatchTrainer","inputDataset","outputDataset","getNumberOfExamples","setBatchSize","setLearningRate","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","setT","optimize","endIterationTime","endTime","currentResult","iteration","Trainer","RNNTrainer","examples","j","getExampleX","getExampleY","currentLoss","sample","AbstractDatasetModifier","CallbackDatabaseModifier","exampleAt","MinMaxScalingDatabaseModifier","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","AbstractDatasetBuilderSource","CSVState","DatasetBuilderSourceCSV","csvtojson","noheader","fromFile","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","TrainerTrainer","DatasetModifier","Computation","setComputation","DatasetDataset","DatasetBuilderSource","DatasetVocabularyBuilderSourceTextFile","buffer"],"sourceRoot":""}