{"version":3,"file":"impulse-ts.dev.js","mappings":"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","sources":["webpack://impulse-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-ts/./src/typescript/Computation/index.ts","webpack://impulse-ts/./src/typescript/Computation/utils.ts","webpack://impulse-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/Shuffle.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetModifier/index.ts","webpack://impulse-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-ts/./src/typescript/Dataset/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/index.ts","webpack://impulse-ts/./src/typescript/DatasetBuilder/index.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/Layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/Layer/Backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Conv.ts","webpack://impulse-ts/./src/typescript/Layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/Layer/LSTM.ts","webpack://impulse-ts/./src/typescript/Layer/Logistic.ts","webpack://impulse-ts/./src/typescript/Layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/Layer/Purelin.ts","webpack://impulse-ts/./src/typescript/Layer/Recurrent.ts","webpack://impulse-ts/./src/typescript/Layer/Relu.ts","webpack://impulse-ts/./src/typescript/Layer/Softmax.ts","webpack://impulse-ts/./src/typescript/Layer/Softplus.ts","webpack://impulse-ts/./src/typescript/Layer/Tanh.ts","webpack://impulse-ts/./src/typescript/Layer/index.ts","webpack://impulse-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-ts/./src/typescript/Math/math.ts","webpack://impulse-ts/./src/typescript/Network/Network.ts","webpack://impulse-ts/./src/typescript/Network/NetworkRNN.ts","webpack://impulse-ts/./src/typescript/Network/index.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/NetworkBuilder/index.ts","webpack://impulse-ts/./src/typescript/Trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdagrad.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerMomentum.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/OptimizerRMSProp.ts","webpack://impulse-ts/./src/typescript/Trainer/Optimizer/index.ts","webpack://impulse-ts/./src/typescript/Trainer/RNNTrainer.ts","webpack://impulse-ts/./src/typescript/Trainer/Trainer.ts","webpack://impulse-ts/./src/typescript/Trainer/index.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/compat get default export","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\n/*import { GPU } from \"gpu.js\";*/\n\n//export const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(dataset: Dataset): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatasetModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatasetModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatasetModifier extends AbstractDatasetModifier {\n  apply(dataset: Dataset): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatasetModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(dataset: Dataset): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      dataset.data.data[row][col] = valueToFill;\n    });\n\n    return dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatasetModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class ShuffleDatasetModifier extends AbstractDatasetModifier {\n  public sortList: number[] = [];\n\n  constructor(dataset: Dataset) {\n    super(dataset);\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let index = 0;\n    const data = Matrix.from(\n      dataset.data.transpose().data.sort((exampleA: number[], exampleB: number[]) => {\n        if (typeof this.sortList[index] === \"undefined\") {\n          // first run\n          this.sortList[index] = Math.random() - 0.5;\n        }\n        index += 1;\n        return this.sortList[index - 1];\n      })\n    ).transpose().data;\n    return new Dataset(dataset.getExampleSize(), dataset.getNumberOfExamples(), data);\n  }\n}\n","import { CallbackDatasetModifier } from \"./Callback\";\nimport { MinMaxScalingDatasetModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatasetModifier } from \"./MissingData\";\nimport { ShuffleDatasetModifier } from \"./Shuffle\";\n\nexport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n}\n","import { Dataset } from \"./Dataset\";\n\nexport { Dataset };\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\nexport class DatasetBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetBuilderSource>): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.cols;\n        const exampleSize = matrix.rows;\n\n        const dataset = new Dataset(exampleSize, numberOfExamples, matrix.data);\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { DatasetBuilderSourceCSV } from \"./DatasetBuilderSourceCSV\";\n\nexport { DatasetBuilderSourceCSV };\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetVocabularyBuilderSourceTextFile\";\n\nexport { DatasetVocabularyBuilderSourceTextFile };\n","import { DatasetBuilder } from \"./DatasetBuilder\";\nimport { DatasetVocabularyBuilder } from \"./DatasetVocabularyBuilder\";\n\nexport { DatasetBuilder, DatasetVocabularyBuilder };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./Backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer {\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {}\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): Layers {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  setWidth(value: number): Layers {\n    this.width = value;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): Layers {\n    this.height = value;\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): Layers {\n    this.depth = value;\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): Layers {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  abstract penalty(): number;\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { getComputation } from \"../Computation\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    this.W.resize(this.getHeight(), this.getWidth());\n    this.W = this.W.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.b.resize(this.getHeight(), 1);\n    this.b = this.b.setRandom(this.previousLayer ? (this.previousLayer.getHeight() as number) : this.getHeight());\n\n    this.gW.resize(this.getHeight(), this.getWidth());\n    this.gW = this.W.setZeros();\n\n    this.gb.resize(this.getHeight(), 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.getHeight(), this.getWidth());\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.getHeight(), 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.getHeight(), this.getWidth());\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.getHeight(), 1);\n    this.vb = this.vb.setZeros();\n\n    this.dW.resize(this.getHeight(), this.getWidth());\n    this.dW = this.dW.setZeros();\n\n    this.db.resize(this.getHeight(), 1);\n    this.db = this.db.setZeros();\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = this.W.dot(input).add(this.b.replicate(1, input.cols));\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer1D };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public sW: Matrix;\n  public vb: Matrix;\n  public sb: Matrix;\n  public dW: Matrix;\n  public db: Matrix;\n  public dZ: Matrix;\n\n  constructor() {\n    super();\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.vb = new Matrix();\n    this.sW = new Matrix();\n    this.sb = new Matrix();\n    this.dW = new Matrix();\n    this.db = new Matrix();\n  }\n\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n\n  abstract forward(input: Matrix): Matrix;\n\n  abstract derivative(delta: Matrix): Matrix;\n\n  penalty(): number {\n    return this.W.pow(2).sum();\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { getComputation } from \"../../Computation\";\nimport {Layers} from \"../../types\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n\n    const delta = sigma.dot(previousActivations.transpose());\n    this.layer.gW = delta.divide(numberOfExamples).add(layer.W.multiply(regularization / numberOfExamples));\n    this.layer.gb = sigma.rowwiseSum().transpose().divide(numberOfExamples);\n\n    if (this.previousLayer !== null) {\n      // @ts-ignore\n      const result = this.layer.W.transpose().dot(sigma);\n      if (result.rows !== previousActivations.rows || result.cols !== previousActivations.cols) {\n        throw new Error(\n          `Dimension error 1. (${result.rows}, ${result.cols}) | (${previousActivations.rows}, ${previousActivations.cols})`\n        );\n      }\n      if (this.layer.gW.rows !== this.layer.W.rows || this.layer.gW.cols !== this.layer.W.cols) {\n        throw new Error(\n          `Dimension error 2. (${this.layer.gW.rows}, ${this.layer.gW.cols}) | (${this.layer.W.rows}, ${this.layer.W.cols})`\n        );\n      }\n      if (this.layer.gb.rows !== this.layer.b.rows || this.layer.gb.cols !== this.layer.b.cols) {\n        throw new Error(\n          `Dimension error 3. (${this.layer.gb.rows}, ${this.layer.gb.cols}) | (${this.layer.b.rows}, ${this.layer.b.cols})`\n        );\n      }\n      return result;\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers} from \"../../types\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers, Layers3D} from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport {Layers, Layers3D} from \"../../types\";\nimport { getComputation } from \"../../Computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, layer: Layers, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { Layers, LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../Computation\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = this.W.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.b.resize(this.numFilters, 1);\n    this.b = this.b.setRandom(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth());\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = this.gW.setZeros();\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = this.gb.setZeros();\n\n    this.sW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.sW = this.sW.setZeros();\n\n    this.sb.resize(this.numFilters, 1);\n    this.sb = this.sb.setZeros();\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = this.vW.setZeros();\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = this.vb.setZeros();\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    ).setZeros();\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n\n      const tmp = this.W.dot(conv.transpose()).add(this.b.replicate(1, conv.rows));\n      result.setCol(i, tmp.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m.setMin(0);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { im2col } from \"../Math/math\";\nimport { getComputation } from \"../Computation\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool Layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D Layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, Layers, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport class LSTMLayer extends AbstractLayer {\n  public Wf: Matrix | null = null;\n  public bf: Matrix | null = null;\n  public Wi: Matrix | null = null;\n  public bi: Matrix | null = null;\n  public Wc: Matrix | null = null;\n  public bc: Matrix | null = null;\n  public Wo: Matrix | null = null;\n  public bo: Matrix | null = null;\n  public Wy: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dxt: Matrix | null = null;\n  public dWf: Matrix | null = null;\n  public dWi: Matrix | null = null;\n  public dWc: Matrix | null = null;\n  public dWo: Matrix | null = null;\n  public dbf: Matrix | null = null;\n  public dbi: Matrix | null = null;\n  public dbc: Matrix | null = null;\n  public dbo: Matrix | null = null;\n\n  configure(): void {}\n\n  forward(input: Matrix, aPrev: Matrix, cPrev): Matrix[] {\n    const nx = input.rows;\n    const m = input.cols;\n    const ny = this.Wy.rows;\n    const na = this.Wy.cols;\n\n    const concat = new Matrix(nx + na, m);\n\n    const ft = this.Wf.dot(concat).add(this.bf).sigmoid();\n    const it = this.Wi.dot(concat).add(this.bi).sigmoid();\n    const cct = this.Wc.dot(concat).add(this.bc).tanh();\n    const cNext = ft.multiply(cPrev).add(it.multiply(cct));\n    const ot = this.Wo.dot(concat).add(this.bo).sigmoid();\n    const aNext = ot.multiply(cNext.tanh());\n\n    const ytPred = this.Wy.dot(aNext).add(this.by).softmax();\n    return [aNext, cPrev];\n  }\n\n  backward(daNext: Matrix, dcNext: Matrix): void {}\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): LSTMLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(this.activation(delta).multiply(this.activation(delta.minusOne())));\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { maxpool } from \"../Math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n    // do nothing\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      );\n\n      result.setCol(i, pool.rollToColMatrix());\n    }\n\n    this.Z = result;\n    this.A = this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n}\n\nexport { MaxPoolLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass PurelinLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.purelin;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.setOnes();\n  }\n}\n\nexport { PurelinLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { Dimension, LayerType } from \"../types\";\nimport { AbstractLayer } from \"./AbstractLayer\";\n\nexport interface GradientResult {\n  dWax: Matrix;\n  dWya: Matrix;\n  dWaa: Matrix;\n  db: Matrix;\n  dby: Matrix;\n  daNext: Matrix;\n}\n\nexport class RecurrentLayer extends AbstractLayer {\n  public Wax: Matrix | null = null;\n  public Waa: Matrix | null = null;\n  public Wya: Matrix | null = null;\n  public b: Matrix | null = null;\n  public by: Matrix | null = null;\n  public dWax: Matrix | null = null;\n  public dWaa: Matrix | null = null;\n  public dWya: Matrix | null = null;\n  public db: Matrix | null = null;\n  public dby: Matrix | null = null;\n  public Y: Matrix[] = [];\n  public A: Matrix[] = [];\n  public X: Matrix[] = [];\n  public aNext: Matrix | null = null;\n  public aPrev: Matrix | null = null;\n  public daNext: Matrix | null = null;\n\n  configure(): void {\n    this.Wax = new Matrix(this.getWidth(), this.getHeight());\n    this.Wax = this.Wax.setRandom(this.getWidth());\n\n    this.Waa = new Matrix(this.getWidth(), this.getWidth());\n    this.Waa = this.Waa.setRandom(this.getWidth());\n\n    this.Wya = new Matrix(this.getDepth(), this.getWidth());\n    this.Wya = this.Wya.setRandom(this.getDepth());\n\n    this.b = new Matrix(this.getWidth(), 1);\n    this.b = this.b.setRandom(this.getWidth());\n\n    this.by = new Matrix(this.getDepth(), 1);\n    this.by = this.by.setRandom(this.getDepth());\n\n    this.dWax = new Matrix(this.getWidth(), this.getHeight());\n    this.dWax = this.dWax.setZeros();\n\n    this.dWaa = new Matrix(this.getWidth(), this.getWidth());\n    this.dWaa = this.dWaa.setZeros();\n\n    this.dWya = new Matrix(this.getDepth(), this.getWidth());\n    this.dWya = this.dWya.setZeros();\n\n    this.db = new Matrix(this.getWidth(), 1);\n    this.db = this.db.setZeros();\n\n    this.dby = new Matrix(this.getDepth(), 1);\n    this.dby = this.dby.setZeros();\n\n    this.daNext = new Matrix(this.getWidth(), this.getWidth());\n    this.daNext = this.daNext.setZeros();\n  }\n\n  forward(x: Matrix, aPrev: Matrix): Matrix[] {\n    const aNext = this.Wax.dot(x)\n      .add(this.Waa.dot(aPrev).replicate(1, this.getWidth()))\n      .add(this.b.replicate(1, x.cols))\n      .tanh();\n    const y = this.Wya.dot(aNext).add(this.by.replicate(1, x.cols)).softmax();\n    this.A.push(aNext);\n    this.X.push(x);\n    this.Y.push(y);\n    this.aPrev = aPrev;\n    return [aNext, y];\n  }\n\n  backward(dy: Matrix, x: Matrix, a: Matrix, aPrev: Matrix): GradientResult {\n    const dTanh = a.pow(2).minusOne().multiply(dy);\n\n    const dWax = dTanh.dot(x.transpose());\n    const dWaa = dTanh.dot(aPrev.transpose());\n    const db = this.db; //.add(dtanh.colwiseSum().divide(dtanh.cols)).setMin(-5).setMax(5);\n    const dby = this.dby; //.replicate(1, this.getWidth()).add(dy).setMin(-5).setMax(5);\n    const dWya = this.dWya; //.add(dy.dot(a.transpose())).setMin(-5).setMax(5);\n    const daNext = this.Waa.transpose().dot(dTanh);\n\n    return {\n      dWax,\n      dWya,\n      dWaa,\n      db,\n      dby,\n      daNext,\n    };\n  }\n\n  activation(m: Matrix): Matrix {\n    return m;\n  }\n\n  getType(): LayerType {\n    return LayerType.rnnlayer;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  setSize(value: Dimension): RecurrentLayer {\n    this.setWidth(value[0]);\n    this.setHeight(value[1]);\n    this.setDepth(value[2]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  penalty(): number {\n    return 0;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../Computation\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.setMax(0.0);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  derivative(delta: Matrix) {\n    return getComputation().execute(\"reluBackpropagation\", delta, this.A) as Matrix;\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.softmax();\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).add(1).fraction(1);\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.exp().add(1).log();\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  derivative(delta: Matrix): Matrix {\n    return delta.multiply(-1).exp().add(1).fraction(1);\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"../Math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return m.tanh();\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  derivative(sigma: Matrix): Matrix {\n    return this.activation(sigma).pow(2).minusOne();\n  }\n}\n\nexport { TanhLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { SoftmaxLayer } from \"./Softmax\";\nimport { LogisticLayer } from \"./Logistic\";\nimport { TanhLayer } from \"./Tanh\";\nimport { ReluLayer } from \"./Relu\";\nimport { SoftplusLayer } from \"./Softplus\";\nimport { ConvLayer } from \"./Conv\";\nimport { FullyConnectedLayer } from \"./FullyConnected\";\nimport { MaxPoolLayer } from \"./MaxPool\";\nimport { RecurrentLayer } from \"./Recurrent\";\nimport { PurelinLayer } from \"./Purelin\";\nimport { LSTMLayer } from \"./LSTM\";\n\nexport {\n  AbstractLayer,\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n  PurelinLayer,\n  LSTMLayer,\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else if (arr[row] instanceof Float32Array) {\n          data[row][col] = arr[row][col];\n        } else if (arr[row] && typeof arr[row][col] === \"number\") {\n          data[row][col] = arr[row][col];\n        } else if (typeof arr[row][col] === \"string\") {\n          // @ts-ignore\n          data[row][col] = arr[row][col].length ? Number(arr[row][col]) : NaN;\n        } else {\n          data[row][col] = NaN;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../Computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","import { Dimension, Layers } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"../Computation\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n    //let sigma = Y.divide(predictions).multiply(-1).subtract(Y.minusOne().divide(predictions.minusOne()));\n    let sigma = predictions.subtract(Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      sigma = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, this.layers[layer], this.layers[layer].derivative(sigma));\n    }\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { Dimension, LayersRNN } from \"../types\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class NetworkRNN {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: LayersRNN[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: LayersRNN): NetworkRNN {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): LayersRNN[] {\n    return this.layers;\n  }\n\n  loss(vocabularySize: number, sequenceLength: number): number {\n    return -Math.log(1 / vocabularySize) * sequenceLength;\n  }\n\n  sample(dataset: DatasetVocabulary) {\n    const Waa = this.layers[0].Waa;\n    const Wax = this.layers[0].Wax;\n    const Wya = this.layers[0].Wya;\n    const by = this.layers[0].by;\n    const b = this.layers[0].b;\n    const indices = [];\n    const charIndices = dataset.getCharIndices();\n    const newLineCharacter = charIndices[\"\\n\"];\n    const chars = dataset.getChars();\n\n    let x = new Matrix(this.dimensions[1], 1).setZeros();\n    let aPrev = new Matrix(this.dimensions[0], 1).setRandom(this.dimensions[1]);\n\n    let idx = -1;\n    let counter = 0;\n\n    while (idx != newLineCharacter && counter != 50) {\n      const a = Wax.dot(x).add(Waa.dot(aPrev)).add(b).setMin(1e-3).tanh();\n      const z = Wya.dot(a).add(by);\n      const y = z.softmax();\n\n      idx = charIndices[chars[y.colMaxCoeffIndex(0)]];\n      x = new Matrix(this.dimensions[1], 1).setZeros();\n      let maxIndex = y.colMaxCoeffIndex(0);\n      if (maxIndex === -1) {\n        maxIndex = Math.floor(Math.random() * this.dimensions[1]);\n        idx = charIndices[chars[maxIndex]];\n      }\n      x.data[maxIndex][0] = 1;\n\n      indices.push(idx);\n      aPrev = a;\n\n      counter += 1;\n    }\n\n    if (counter === 50) {\n      indices.push(newLineCharacter);\n    }\n\n    return indices\n      .map((i) => {\n        return chars[i];\n      })\n      .join(\"\");\n  }\n\n  forward(X: Matrix, Y: Matrix, a0: Matrix): [number] {\n    const x = [null];\n    const a = [a0];\n    const yHat = [null];\n    let loss = 0;\n    for (let t = 1; t <= X.rows; t += 1) {\n      x[t] = new Matrix(this.dimensions[1], this.dimensions[0]).setZeros();\n      x[t].data[X.data[t - 1][0]][0] = 1;\n      const [_a, _yHat] = this.layers[0].forward(x[t], a[t - 1]);\n      a[t] = _a;\n      yHat[t] = _yHat; //.setMin(1e-5);\n      loss += 0; // todo\n    }\n    this.layers[0].A = a;\n    this.layers[0].X = x;\n    this.layers[0].Y = yHat;\n    return [loss];\n  }\n\n  backward(X: Matrix): void {\n    const a = this.layers[0].A;\n    const x = this.layers[0].X;\n    const yHat = this.layers[0].Y;\n\n    let _dWax = new Matrix(this.layers[0].Wax.rows, this.layers[0].Wax.cols).setZeros();\n    let _dWaa = new Matrix(this.layers[0].Waa.rows, this.layers[0].Waa.cols).setZeros();\n    let _dWya = new Matrix(this.layers[0].Wya.rows, this.layers[0].Wya.cols).setZeros();\n    let _db = new Matrix(this.layers[0].db.rows, this.layers[0].db.cols).setZeros();\n    let _dby = new Matrix(this.layers[0].dby.rows, this.layers[0].dby.cols).setZeros();\n    let _daNext = new Matrix(this.layers[0].daNext.rows, this.layers[0].daNext.rows).setZeros();\n\n    for (let t = X.rows - 1; t >= 1; t -= 1) {\n      // loop over examples\n      const dy = Matrix.from(a[t].data);\n      dy.data[X.data[t - 1][0]][0] -= 1;\n      const { dWax, dWya, dWaa, db, dby, daNext } = this.layers[0].backward(dy, x[t], a[t], a[t - 1]);\n      _dWax = _dWax.add(dWax.replicate(1, _dWax.cols));\n      _dWaa = _dWaa.add(dWaa.replicate(1, _dWaa.cols));\n      _dWya = _dWya.add(dWya);\n      _db = _db.add(db);\n      _dby = _dby.add(dby);\n      _daNext = _daNext.add(daNext);\n    }\n\n    // gradient clipping\n    this.layers[0].dWax = _dWax.setMin(-5).setMax(5);\n    this.layers[0].dWaa = _dWaa.setMin(-5).setMax(5);\n    this.layers[0].dWya = _dWya.setMin(-5).setMax(5);\n    this.layers[0].db = _dby.setMin(-5).setMax(5);\n    this.layers[0].dby = _dby.setMin(-5).setMax(5);\n    this.layers[0].daNext = _daNext.setMin(-5).setMax(5);\n  }\n\n  optimize(X: Matrix, Y: Matrix, aPrev: Matrix, learningRate: number): [number, Matrix] {\n    const [loss] = this.forward(X, Y, aPrev);\n    this.backward(X);\n\n    this.layers[0].Wax = this.layers[0].Wax.add(\n      this.layers[0].dWax.replicate(1, this.getDimensions()[2]).multiply(-learningRate)\n    );\n    this.layers[0].Waa = this.layers[0].Waa.add(this.layers[0].dWaa.multiply(-learningRate));\n    this.layers[0].Wya = this.layers[0].Wya.add(this.layers[0].dWya.multiply(-learningRate));\n    //this.layers[0].b = this.layers[0].b.add(this.layers[0].db.multiply(-learningRate));\n    //this.layers[0].by = this.layers[0].by.add(\n    //  this.layers[0].dby.multiply(-learningRate).rowwiseSum().divide(this.layers[0].dby.cols).transpose()\n    //);\n\n    return [loss, this.layers[0].A[X.rows - 1]];\n  }\n\n  getDimensions(): Dimension {\n    return this.dimensions;\n  }\n\n  /*save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }*/\n}\n","import { Network } from \"./Network\";\nimport { NetworkRNN } from \"./NetworkRNN\";\n\nexport { Network, NetworkRNN };\n","import { Dimension, Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport { BackpropagationFactory } from \"../Layer/Backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    // @ts-ignore\n    const layer: Layers = new layerClass();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      // @ts-ignore\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            // @ts-ignore\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"W\"].length,\n            json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"W\"]\n          );\n          layer.b = new Matrix(\n            json[\"layers\"][i][\"weights\"][\"b\"].length,\n            json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n            json[\"layers\"][i][\"weights\"][\"b\"]\n          );\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport { Network } from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../Layer/\";\nimport { ConvLayer } from \"../Layer/\";\nimport { MaxPoolLayer } from \"../Layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      // @ts-ignore\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              // @ts-ignore\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { NetworkBuilder1D } from \"./NetworkBuilder1D\";\nimport { NetworkBuilder3D } from \"./NetworkBuilder3D\";\n\nexport { AbstractNetworkBuilder, NetworkBuilder1D, NetworkBuilder3D };\n","import { Network } from \"../Network\";\nimport { AbstractOptimizer } from \"./Optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../Dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 1e-4;\n  iterations = 1000;\n  learningRate = 0.001;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    const predictions = this.network.forward(inputDataset.data);\n    const correctOutput = outputDataset.data;\n\n    /*const error = Y.multiply(predictions.log())\n      .add(Y.minusOne().multiply(predictions.minusOne().log()))\n      .multiply(-1)\n      .sum();*/\n    const error = correctOutput.multiply(predictions.log()).sum();\n    const cost = (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n    for (let col = 0; col < predictions.cols; col += 1) {\n      const index1 = predictions.colMaxCoeffIndex(col);\n      const index2 = correctOutput.colMaxCoeffIndex(col);\n\n      if (index1 === index2) {\n        accuracy++;\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer, CostResult } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = this.batchSize;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0.0;\n    let accuracy = 0.0;\n\n    // calculate penalty\n    let penalty = 0.0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty = layer.penalty();\n    });\n\n    const startTime = new Date().getTime();\n    const startIterationTime = new Date().getTime();\n\n    for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n      const startIterationTime2 = new Date().getTime();\n      const input = inputDataset.getBatch(offset, this.batchSize);\n      const correctOutput = outputDataset.getBatch(offset, this.batchSize);\n      const predictions = this.network.forward(input.data);\n\n      const error = correctOutput.data.multiply(predictions.log()).sum();\n      cost += (-1 / numberOfExamples) * error + this.regularization / (penalty * (2 * inputDataset.data.cols));\n\n      for (let col = 0; col < predictions.cols; col += 1) {\n        const index1 = predictions.colMaxCoeffIndex(col);\n        const index2 = correctOutput.data.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: (accuracy / numberOfExamples) * 100,\n    };\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const startIterationTime = new Date().getTime();\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const predictions = this.network.forward(input.data);\n\n        this.network.backward(input.data, output.data, predictions, this.regularization);\n\n        this.optimizer.setT(++t);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const cost = this.cost(input, output);\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Batch time: ${\n              endIterationTime - startIterationTime2\n            }ms | Time from start: ${round((endIterationTime - startIterationTime) / 1000, 1)}s. | Cost: ${round(\n              cost.cost,\n              2\n            )} | Acc: ${cost.accuracy}`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdagrad extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adagrad(layer, this.learningRate);\n  }\n\n  adagrad(layer: Layers, learningRate: number): void {\n    layer.dW = layer.dW.add(layer.gW.pow(2));\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate).divide(layer.dW.sqrt().add(1e-8)).multiply(layer.gW));\n\n    layer.db = layer.db.add(layer.gb.pow(2));\n    layer.b = layer.b.subtract(layer.db.multiply(learningRate).divide(layer.db.sqrt().add(1e-8)).multiply(layer.gb));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  protected beta1 = 0.9;\n  protected beta2 = 0.999;\n\n  setBeta1(beta1: number): OptimizerAdam {\n    this.beta1 = beta1;\n    return this;\n  }\n\n  setBeta2(beta2: number): OptimizerAdam {\n    this.beta2 = beta2;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    layer.vW = layer.vW.multiply(this.beta1).add(layer.gW.multiply(1 - this.beta1));\n    layer.vb = layer.vb.multiply(this.beta1).add(layer.gb.multiply(1 - this.beta1));\n\n    layer.sW = layer.sW.multiply(this.beta2).add(layer.sW.pow(2).multiply(1 - this.beta2));\n    layer.sb = layer.sb.multiply(this.beta2).add(layer.sb.pow(2).multiply(1 - this.beta2));\n\n    const vWCorrected = layer.vW.divide(1 - Math.pow(this.beta1, 2));\n    const vbCorrected = layer.vb.divide(1 - Math.pow(this.beta1, 2));\n\n    const sWCorrected = layer.sW.add(1e-8).sqrt();\n    const sbCorrected = layer.sb.add(1e-8).sqrt();\n\n    layer.W = layer.W.subtract(vWCorrected.divide(sWCorrected).multiply(learningRate));\n    layer.b = layer.b.subtract(vbCorrected.divide(sbCorrected).multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = layer.W.subtract(layer.gW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.b.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerMomentum extends AbstractOptimizer {\n  protected beta = 0.9;\n\n  optimize(layer: Layers): void {\n    this.momentum(layer, this.learningRate);\n  }\n\n  setBeta(beta: number): OptimizerMomentum {\n    this.beta = beta;\n    return this;\n  }\n\n  momentum(layer: Layers, learningRate: number): void {\n    layer.vW = layer.gW.multiply(this.beta).add(layer.gW.multiply(1 - this.beta));\n    layer.vb = layer.gb.multiply(this.beta).add(layer.gb.multiply(1 - this.beta));\n\n    layer.W = layer.W.subtract(layer.vW.multiply(learningRate));\n    layer.b = layer.b.subtract(layer.vb.multiply(learningRate));\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\n\nexport class OptimizerRMSProp extends AbstractOptimizer {\n  protected alpha = 1e-3;\n  protected beta = 0.9;\n\n  setBeta(beta: number): OptimizerRMSProp {\n    this.beta = beta;\n    return this;\n  }\n\n  setAlpha(alpha: number): OptimizerRMSProp {\n    this.alpha = alpha;\n    return this;\n  }\n\n  optimize(layer: Layers): void {\n    this.rmsprop(layer, this.learningRate, this.alpha, this.beta);\n  }\n\n  rmsprop(layer: Layers, learningRate: number, alpha: number, beta: number): void {\n    layer.sW = layer.sW.multiply(beta).add(layer.gW.pow(2).multiply(1 - beta));\n    layer.sb = layer.sb.multiply(beta).add(layer.gb.pow(2).multiply(1 - beta));\n\n    layer.W = layer.W.subtract(layer.gW.multiply(alpha).divide(layer.sW.sqrt().add(1e-8)));\n    layer.b = layer.b.subtract(layer.gb.multiply(alpha).divide(layer.sb.sqrt().add(1e-8)));\n  }\n}\n","import { OptimizerAdam } from \"./OptimizerAdam\";\nimport { OptimizerGradientDescent } from \"./OptimizerGradientDescent\";\nimport { OptimizerAdagrad } from \"./OptimizerAdagrad\";\nimport { OptimizerMomentum } from \"./OptimizerMomentum\";\nimport { OptimizerRMSProp } from \"./OptimizerRMSProp\";\n\nexport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdagrad, OptimizerMomentum, OptimizerRMSProp };\n","import { NetworkRNN } from \"../Network\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class RNNTrainer {\n  protected network: NetworkRNN | null = null;\n  protected iterations: number = 1000;\n  protected learningRate: number = 0.01;\n\n  constructor(network: NetworkRNN) {\n    this.network = network;\n  }\n\n  train(dataset: DatasetVocabulary): [number] {\n    let loss = this.network.loss(dataset.getVocabularySize(), 7);\n\n    const [X, Y] = dataset.buildData(100);\n    const [x, y] = dataset.vectorization(X, Y);\n\n    let aPrev = new Matrix(this.network.getDimensions()[0], this.network.getDimensions()[0]).setZeros();\n\n    for (let iteration = 0; iteration < this.iterations; iteration += 1) {\n      const index = iteration % x.length;\n      const [_loss] = this.network.forward(x[index], y, aPrev);\n      loss = _loss;\n      const [currentLoss, _aPrev] = this.network.optimize(x[index], y, aPrev, this.learningRate);\n      aPrev = _aPrev;\n      loss = loss * 0.999 + currentLoss * 0.001;\n      console.log(`Iteration ${iteration + 1} | Loss: ${loss} | Sample: ${this.network.sample(dataset).trim()}`);\n    }\n    return [loss];\n  }\n\n  setIterations(num: number): RNNTrainer {\n    this.iterations = num;\n    return this;\n  }\n\n  setLearningRate(num: number): RNNTrainer {\n    this.learningRate = num;\n    return this;\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../Dataset\";\nimport { round } from \"../Math/math\";\n\nexport class Trainer extends AbstractTrainer {\n  train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(numberOfExamples);\n    this.optimizer.setLearningRate(this.learningRate);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startTime = new Date().getTime();\n      const predictions = this.network.forward(inputDataset.data);\n\n      this.network.backward(inputDataset.data, outputDataset.data, predictions, this.regularization);\n\n      this.optimizer.setT(++t);\n\n      this.network.getLayers().forEach((layer) => {\n        this.optimizer.optimize(layer);\n      });\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const currentResult = this.cost(inputDataset, outputDataset);\n          const endTime = new Date().getTime();\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${round(currentResult.cost, 5)} | Accuracy: ${round(\n              currentResult.accuracy,\n              2\n            )}% | Time: ${(endTime - startTime) / 1000} s.`\n          );\n        }\n      }\n\n      this.stepCallback({\n        iteration: i,\n      });\n    }\n\n    return this;\n  }\n}\n","import { MiniBatchTrainer } from \"./MiniBatchTrainer\";\nimport { Trainer } from \"./Trainer\";\nimport { RNNTrainer } from \"./RNNTrainer\";\n\nexport { MiniBatchTrainer, Trainer, RNNTrainer };\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./Layer\";\nimport { ConvLayer } from \"./Layer/\";\nimport { MaxPoolLayer } from \"./Layer/\";\nimport { FullyConnectedLayer } from \"./Layer/\";\nimport { PurelinLayer } from \"./Layer\";\nimport { AbstractLayer3D } from \"./Layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./Layer/AbstractLayer1D\";\nimport { RecurrentLayer } from \"./Layer\";\nimport { LSTMLayer } from \"./Layer\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n  rnnlayer = \"rnnlayer\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer3D\n  | AbstractLayer1D;\nexport type Layers1D = LogisticLayer | SoftmaxLayer | TanhLayer | ReluLayer | SoftplusLayer | PurelinLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\nexport type LayersRNN = RecurrentLayer;\nexport type LayersLSTM = LSTMLayer;\n","module.exports = require(\"csvtojson\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { NetworkBuilder1D, NetworkBuilder3D } from \"./NetworkBuilder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n  RecurrentLayer,\n} from \"./Layer\";\nimport { Matrix } from \"./Math/Matrix\";\nimport { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n} from \"./Trainer/Optimizer\";\nimport { MiniBatchTrainer, Trainer as TrainerTrainer, RNNTrainer } from \"./Trainer\";\nimport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n} from \"./Dataset/DatasetModifier\";\nimport { ComputationCPU, ComputationGPU, setComputation, getComputation } from \"./Computation\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { NetworkRNN } from \"./Network\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n  RecurrentLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdagrad,\n  OptimizerMomentum,\n  OptimizerRMSProp,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n  Trainer: TrainerTrainer,\n  RNNTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n  getComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\nconst Network = {\n  NetworkRNN,\n};\n\nexport {\n  NetworkBuilder,\n  Math,\n  Layer,\n  Dataset,\n  DatasetBuilder,\n  Optimizer,\n  Trainer,\n  DatasetModifier,\n  Computation,\n  DatasetBuilderSource,\n  Network,\n};\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","logisticActivation","m","Math","exp","from","logisticLoss","output","predictions","log","epsilon","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","kernel","gpu","createKernel","a","b","thread","x","y","setOutput","constants","number","setConstants","softmaxActivation","divider","colwiseSum","replicate","softmaxLoss","kernel2","kernel3","ComputationGPU","setComputation","getComputation","currentComputation","type","Dataset","exampleSize","numberOfExamples","arr","length","Number","NaN","index","offset","batchSize","block","fromMatrix","instance","AbstractDatasetModifier","dataset","CallbackDatasetModifier","example","exampleIndex","getNumberOfExamples","callback","exampleAt","MinMaxScalingDatasetModifier","min","Infinity","MissingDataScalingDatasetModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","push","modificationType","forEach","ShuffleDatasetModifier","sort","exampleA","exampleB","sortList","DatasetVocabulary","str","toLowerCase","chars","Set","split","dataSize","vocabularySize","replace","map","result","char","tx","stride","X","Y","substr","nx","getCharIndices","setZeros","xIndex","rowIndex","sentence","_m","t","getExamples","ch","DatasetBuilder","sourcePromise","Promise","resolve","then","source","matrix","parse","AbstractDatasetBuilderSource","csvtojson","CSVState","DatasetBuilderSourceCSV","path","noheader","fromFile","DatasetVocabularyBuilder","AbstractDatasetVocabularyBuilderSource","fs","DatasetVocabularyBuilderSourceTextFile","reject","readFile","err","buffer","toString","AbstractLayer","backPropagation","value","width","height","depth","previousLayer","AbstractLayer1D","W","A","Z","gW","gb","vW","vb","sW","sb","dW","db","resize","getHeight","getWidth","setRandom","input","activation","is1D","setWidth","getSize","is3D","getOutputWidth","getOutputHeight","getOutputDepth","setHeight","AbstractLayer3D","setSize","dimension","setDepth","getDepth","AbstractBackPropagation","layer","Backpropagation1Dto1D","regularization","previousActivations","delta","divide","rowwiseSum","Backpropagation3Dto1D","LayerType","BackpropagationToMaxPool","BackpropagationToConv","BackpropagationFactory","getType","conv","maxpool","fullyconnected","padding","getPadding","getStride","filterSize","getFilterSize","outputWidth","outputHeight","outputDepth","inputWidth","inputHeight","inputDepth","tmpResult","execute","c","h","w","vertStart","vertEnd","horizStart","horizEnd","d","vertical","verticalPad","horizontal","horizontalPad","z","prevLayer","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","im2col","ConvLayer","numFilters","size","tmp","setCol","rollToColMatrix","setMin","FullyConnectedLayer","LSTMLayer","aPrev","cPrev","ny","Wy","na","concat","ft","Wf","bf","sigmoid","it","Wi","bi","cct","Wc","bc","tanh","cNext","ot","Wo","bo","aNext","ytPred","by","softmax","daNext","dcNext","rnnlayer","LogisticLayer","fraction","logistic","MaxPoolLayer","pool","PurelinLayer","purelin","RecurrentLayer","Wax","Waa","Wya","dWax","dWaa","dWya","dby","dy","dTanh","ReluLayer","setMax","relu","SoftmaxLayer","SoftplusLayer","softplus","TanhLayer","generateData","Float32Array","newData","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","_row","abs","numberOfElements","shape","cb","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","boundingY","boundingX","currentResultCol","channel","resultWidth","resultHeight","resultDepth","round","decimalPlaces","EPSILON","Network","dimensions","layers","forward","getBackPropagation","propagate","derivative","resultJSON","weights","JSON","stringify","writeFile","console","error","NetworkRNN","sequenceLength","indices","charIndices","newLineCharacter","getChars","idx","counter","colMaxCoeffIndex","floor","join","a0","yHat","loss","_a","_yHat","_dWax","_dWaa","_dWya","_db","_dby","_daNext","backward","learningRate","getDimensions","AbstractNetworkBuilder","network","layerClass","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","NetworkBuilder1D","jsonPath","json","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","AbstractTrainer","optimizer","undefined","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","accuracy","correctOutput","cost","index1","index2","MiniBatchTrainer","numBatches","ceil","startTime","Date","getTime","startIterationTime","batch","startIterationTime2","getBatch","setBatchSize","setLearningRate","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractOptimizer","OptimizerAdagrad","adagrad","OptimizerAdam","beta1","beta2","adam","vWCorrected","vbCorrected","sWCorrected","sbCorrected","OptimizerGradientDescent","gradientDescent","OptimizerMomentum","momentum","beta","OptimizerRMSProp","alpha","rmsprop","RNNTrainer","getVocabularySize","buildData","vectorization","_loss","currentLoss","_aPrev","sample","trim","Trainer","DatasetDataset","DatasetBuilderBuilder","TrainerTrainer","NetworkBuilder","Layer","Optimizer","DatasetModifier","Computation","DatasetBuilderSource"],"sourceRoot":""}