{"version":3,"file":"impulse-ts.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,4JCLvD,MAAM,EAA+BC,QAAQ,M,sKCEtC,IAAMC,EAAb,wB,qGAAA,S,EACsB,I,EADtB,kB,sBAAA,K,uDAAA,K,aAAA,O,EAAA,E,EAAA,wBAGE,SAAUC,EAAcC,GAEtB,OADAC,KAAKC,QAAQH,GAAQC,EACdC,OALX,qBAQE,SACEF,GAEQ,2BADLI,EACK,iCADLA,EACK,kBACR,OAAOF,KAAKC,QAAQH,GAAMK,MAAM,KAAMD,M,oBAZ1C,K,4XCAO,IAAME,EAAb,WAKE,aAAyD,IAA7CC,EAA6C,uDAAtC,EAAGC,EAAmC,uDAA5B,EAAGC,EAAyB,uDAAN,KAAM,wBAJ3C,GAI2C,cAH3C,GAG2C,cAF3C,MAGZP,KAAKQ,OAAOH,EAAMC,GACdC,GACFP,KAAKS,aAAaF,G,QARxB,O,EAAA,G,EAAA,qBAYE,SAAOF,EAAcC,GACnBN,KAAKK,KAAOA,EACZL,KAAKM,KAAOA,EACZN,KAAKO,KAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxCV,KAAKO,KAAKG,GAAO,IAAIC,MAAMX,KAAKM,MAGlC,OAAON,OApBX,0BAuBE,SAAaY,GACXZ,KAAKO,KAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxCV,KAAKO,KAAKG,GAAO,IAAIC,MAAMX,KAAKM,MAElC,IAAK,IAAIO,EAAM,EAAGA,EAAMb,KAAKM,KAAMO,GAAO,EACxC,IAAK,IAAIH,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EAChB,iBAAbE,EAAIC,GACbb,KAAKO,KAAKG,GAAKG,GAAOD,EAAIC,GACjBD,EAAIC,aAAgBC,aAC7Bd,KAAKO,KAAKG,GAAKG,GAAOD,EAAIC,GAAKH,GAE/BV,KAAKO,KAAKG,GAAKG,GAAO,EAI5B,OAAOb,OAvCX,sBA0CE,WACE,IAAMe,EAAS,IAAIC,YAAYhB,KAAKK,KAAOL,KAAKM,KAAO,IACjDW,EAAO,IAAIC,SAASH,EAAQ,EAAGf,KAAKK,KAAOL,KAAKM,KAAO,IAI7D,OAHAN,KAAKO,KAAKY,SAAQ,SAACC,EAAKC,GACtBJ,EAAKK,WAAWD,EAAGD,MAEdL,IAhDX,iBAmDE,WAEE,IADA,IAAIQ,EAAM,EACDb,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxC,IAAK,IAAIG,EAAM,EAAGA,EAAMb,KAAKM,KAAMO,GAAO,EACxCU,GAAOvB,KAAKO,KAAKG,GAAKG,GAG1B,OAAOU,IA1DX,wBA6DE,WAEE,IADA,IAAMhB,EAAO,GACJM,EAAM,EAAGA,EAAMb,KAAKM,KAAMO,GAAO,EAAG,CAE3C,IADA,IAAIU,EAAM,EACDb,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxCa,GAAOvB,KAAKO,KAAKG,GAAKG,GAExBN,EAAKM,GAAO,CAACU,GAEf,OAAO,IAAInB,EAAO,EAAGJ,KAAKM,KAAMC,KAtEpC,wBAyEE,WAEE,IADA,IAAMA,EAAO,GACJG,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EAAG,CAE3C,IADA,IAAIa,EAAM,EACDV,EAAM,EAAGA,EAAMb,KAAKK,KAAMQ,GAAO,EACxCU,GAAOvB,KAAKO,KAAKG,GAAKG,GAExBN,EAAKG,GAAO,CAACa,GAEf,OAAO,IAAInB,EAAOJ,KAAKK,KAAM,EAAGE,KAlFpC,uBAqFE,SAAUF,EAAcC,GACtB,IAAMkB,EAAUxB,KAAKO,KACfkB,EAAU,GACZV,EAAS,KACb,GAAa,IAATV,GAA4B,IAAdL,KAAKM,MAAcA,EAAO,EAAG,CAC7CS,EAAS,IAAIX,EAAOJ,KAAKK,KAAMC,GAC/B,IAAK,IAAII,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EAAG,CAC3Ce,EAAQf,GAAO,GACf,IAAK,IAAIG,EAAM,EAAGA,EAAMP,EAAMO,GAAO,EACnCY,EAAQf,GAAKG,GAAOW,EAAQd,GAAK,SAGhC,GAAa,IAATJ,GAA4B,IAAdN,KAAKK,MAAcA,EAAO,EAAG,CACpDU,EAAS,IAAIX,EAAOC,EAAML,KAAKM,MAC/B,IAAK,IAAII,EAAM,EAAGA,EAAML,EAAMK,GAAO,EAAG,CACtCe,EAAQf,GAAO,GACf,IAAK,IAAIG,EAAM,EAAGA,EAAMb,KAAKM,KAAMO,GAAO,EACxCY,EAAQf,GAAKG,GAAOW,EAAQ,GAAGX,IAIrC,OAAIE,GACFA,EAAON,aAAagB,GACbV,GAEFf,OA9GX,uBAiHE,WACE,OAAO0B,IAAiBC,QAAQ,YAAa3B,QAlHjD,uBAqHE,WACE,OAAOA,OAtHX,8BAyHE,SAAiBa,GAIf,IAHA,IAAIe,GAAY,EACZC,GAAM,IAEDnB,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACpCV,KAAKO,KAAKG,GAAKG,GAAOgB,IACxBA,EAAM7B,KAAKO,KAAKG,GAAKG,GACrBe,EAAWlB,GAIf,OAAOkB,IApIX,mBAuIE,SACEE,EACAC,EACAC,EACAC,GAIA,IAFA,IAAM1B,EAAO,GAGPG,EAAMoB,EAAUI,EAAS,EAC7BxB,EAAMV,KAAKK,MAAQK,EAAMoB,EAAWE,EACpCtB,GAAO,EAAGwB,GAAU,EACpB,CACA3B,EAAKG,GAAO,IAAIC,MAAMsB,GACtB,IACE,IAAIpB,EAAMkB,EAAUI,EAAS,EAC7BtB,EAAMb,KAAKM,MAAQO,EAAMkB,EAAWE,EACpCpB,GAAO,EAAGsB,GAAU,EAEpB5B,EAAK2B,GAAQC,GAAUnC,KAAKO,KAAKG,GAAKG,GAI1C,OAAO,IAAIT,EAAO4B,EAAWC,EAAW1B,KA9J5C,iBAiKE,SAAIM,GAEF,IADA,IAAMN,EAAO,GACJG,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxCH,EAAKG,GAAO,CAACV,KAAKO,KAAKG,GAAKG,IAE9B,OAAO,IAAIT,EAAOJ,KAAKK,KAAM,EAAGE,KAtKpC,oBAyKE,SAAOM,EAAauB,GAClB,IAAK,IAAI1B,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EACxCV,KAAKO,KAAKG,GAAKG,GAAOuB,EAAI7B,KAAKG,GAAK,GAEtC,OAAOV,OA7KX,6BAgLE,WAIE,IAHA,IAAMO,EAAO,GAET8B,EAAO,EACF3B,EAAM,EAAGA,EAAMV,KAAKK,KAAMK,GAAO,EAAG,CAC3CH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMb,KAAKM,KAAMO,GAAO,EACxCN,EAAK8B,KAAQ,GAAKrC,KAAKO,KAAKG,GAAKG,GAIrC,OAAO,IAAIT,EAAOJ,KAAKK,KAAOL,KAAKM,KAAM,EAAGC,Q,iBA3LhD,K,8uBCGO,IAAM+B,EAAM,ICLkB1C,QAAQ,UDKtB2C,KAAI,CAAEC,KAAM,QAEtBC,EAAoB,SAACC,EAAYC,GAC5C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAGlB,IAAMC,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GACzB,OAAOD,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKH,EAAEhD,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,MAEvEC,UAAU,CAACV,EAAGrC,KAAMsC,EAAGrC,OAE1B,OAAO,IAAIF,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMuC,EAAOH,EAAGnC,KAAMoC,EAAGpC,QAG5C8C,EAA0B,SAACX,EAAYtB,GAClD,IAAMyB,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKnD,KAAKsD,UAAUC,UAEzDH,UAAU,CAACV,EAAGrC,KAAMqC,EAAGpC,OACvBkD,aAAa,CACZD,OAAQnC,IAGZ,OAAO,IAAIhB,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMuC,EAAOH,EAAGnC,QAGnCkD,EAAoB,SAACC,GAChC,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKC,IAAIb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAE9CC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OAClBC,EAAO,IAAIH,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,OAC3CsD,EAAU,IAAIzD,EAAO,EAAGsD,EAAEpD,KAAMC,EAAKuD,aAAavD,MAAMwD,UAC5DL,EAAErD,KACF,GAOF,OALe,IAAID,EACjBsD,EAAErD,KACFqD,EAAEpD,KACFmC,EAAkBlC,EAAMsD,GAAStD,OAKxByD,EAAc,SAACC,EAAgBC,GAC1C,IAAMrB,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKQ,IAAIpB,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAE9CC,UAAU,CAACc,EAAY7D,KAAM6D,EAAY5D,OAC5C,OAAO,IAAIF,EACT6D,EAAO5D,KACP4D,EAAO3D,KACP8D,EACEH,EACA,IAAI7D,EACF6D,EAAO5D,KACP4D,EAAO3D,KACPuC,EAAOqB,EAAY3D,QAErBA,MACFgB,OAGS8C,EAAqB,SAACX,GACjC,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAO,GAAO,EAAMY,KAAKC,KAAKb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,QAE5DC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhC+D,EAAqB,SAACZ,GACjC,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OACEA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,IAC5B,EAAMJ,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAGvCC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhCgE,EAAe,SAACN,EAAgBC,GAC3C,IAAMrB,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKQ,IAAIpB,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAE9CC,UAAU,CAACa,EAAO5D,KAAM4D,EAAO3D,OAC5BkE,EAAUlC,EACbQ,cAAa,SAAUC,GACtB,OAAO,EAAMA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,MAE3CC,UAAU,CAACa,EAAO5D,KAAM4D,EAAO3D,OAC5BmE,EAAUnC,EACbQ,cAAa,SAAUC,GACtB,OAAOY,KAAKQ,IAAI,EAAMpB,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAEpDC,UAAU,CAACc,EAAY7D,KAAM6D,EAAY5D,OAE5C,OAAOoE,EACLN,EACEH,EACA,IAAI7D,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAMuC,EAAOoB,EAAO1D,QAErD6D,EACE,IAAIhE,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAMkE,EAAQP,EAAO1D,OACpD,IAAIH,EACF8D,EAAY7D,KACZ6D,EAAY5D,KACZmE,EAAQP,EAAY3D,SAGxBgB,OAGSoD,EAAiB,SAACjB,GAC7B,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OACE,GAAO,EAAMY,KAAKC,KAAK,EAAMb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,KAAO,KAGpEC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhCqE,EAAiB,SAAClB,GAC7B,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OACE,EACAY,KAAKkB,IACH,GAAO,EAAMlB,KAAKC,KAAK,EAAMb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,KAAO,EACjE,MAILC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhCuE,EAAiB,SAACpB,GAC7B,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAK9B,IAAI,EAAKkB,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,OAEnDC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhCwE,EAAiB,SAACrB,GAC7B,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAIA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAK,EAC7B,EAEF,KAERC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhCyE,EAAqB,SAACtB,GACjC,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKQ,IAAI,EAAIR,KAAKC,IAAIb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,QAE3DC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhC0E,EAAqB,SAACvB,GACjC,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAO,GAAK,EAAIY,KAAKC,KAAKb,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,QAExDC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhC2E,EAAU,SAACxB,GACtB,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKkB,IAAI9B,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAI,MAElDC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,OAAqBgB,OAGrD4D,EAAO,SAACzB,GACnB,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOY,KAAKwB,KAAKpC,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAK,SAEpDC,UAAU,CAACM,EAAErD,KAAMqD,EAAEpD,OACxB,OAAO,IAAIF,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMuC,EAAOa,EAAEnD,QAGhC6E,EAAc,SAACnB,EAAgBC,GAC1C,IAAMrB,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GACzB,OACEA,EAAEhD,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAC7BQ,KAAKkB,IAAI9B,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAI,MAG7CC,UAAU,CAACa,EAAO5D,KAAM4D,EAAO3D,OAClC,OAAO,IAAIF,EACT6D,EAAO5D,KACP4D,EAAO3D,KACPuC,EAAOoB,EAAO1D,OACdgB,OAGS8D,EAAW,SAAC3C,EAAYC,GACnC,GAAID,EAAGpC,OAASqC,EAAGtC,KACjB,MAAM,IAAIuC,MAAJ,oCACyBF,EAAGpC,KAD5B,wBACgDqC,EAAGtC,KADnD,MAKR,IAAMwC,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GAEzB,IADA,IAAIzB,EAAM,EACDF,EAAI,EAAGA,EAAIrB,KAAKsD,UAAUhD,KAAMe,IACvCE,GAAOwB,EAAE/C,KAAKiD,OAAOC,GAAG7B,GAAK2B,EAAE3B,GAAGrB,KAAKiD,OAAOE,GAEhD,OAAO5B,KAER6B,UAAU,CAACV,EAAGrC,KAAMsC,EAAGrC,OACvBkD,aAAa,CACZlD,KAAMoC,EAAGrC,OAGb,OAAO,IAAID,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMuC,EAAOH,EAAGnC,KAAMoC,EAAGpC,QAG5CmE,EAAiB,SAAChC,EAAYC,GACzC,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAGlB,IAAMC,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GACzB,OAAOD,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKH,EAAEhD,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,MAEvEC,UAAU,CAACV,EAAGrC,KAAMsC,EAAGrC,OAE1B,OAAO,IAAIF,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMuC,EAAOH,EAAGnC,KAAMoC,EAAGpC,QAG5C+E,EAAsB,SAAC5C,EAAYC,GAC9C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAGlB,IAAMC,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GACzB,OAAOD,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKH,EAAEhD,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,MAEvEC,UAAU,CAACV,EAAGrC,KAAMsC,EAAGrC,OAE1B,OAAO,IAAIF,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMuC,EAAOH,EAAGnC,KAAMoC,EAAGpC,QAG5CgF,EAAa,SAAC7C,EAAY8C,GACrC,IAAM3C,EAASP,EACZQ,cAAa,WACZ,OAAQa,KAAK8B,SAAW,IAAO9B,KAAKwB,KAAK,EAAMnF,KAAKsD,UAAUkC,cAE/DpC,UAAU,CAACV,EAAGrC,KAAMqC,EAAGpC,OACvBkD,aAAa,CACZgC,UAAAA,IAGJ,OAAO,IAAIpF,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMuC,MAGzB6C,EAAW,SAAChD,GACvB,IAAMG,EAASP,EACZQ,cAAa,WACZ,OAAO,KAERM,UAAU,CAACV,EAAGrC,KAAMqC,EAAGpC,OAC1B,OAAO,IAAIF,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMuC,MAYzBuB,EAAsB,SAAC1B,EAAYC,GAC9C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAGlB,IAAMC,EAASP,EACZQ,cAAa,SAAUC,EAAGC,GACzB,OAAOD,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKH,EAAEhD,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,MAEvEC,UAAU,CAACV,EAAGrC,KAAMsC,EAAGrC,OAE1B,OAAO,IAAIF,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMuC,EAAOH,EAAGnC,KAAMoC,EAAGpC,QAG5CoF,EAA4B,SAACjD,EAAYtB,GACpD,IAAMyB,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKnD,KAAKsD,UAAUC,UAEzDH,UAAU,CAACV,EAAGrC,KAAMqC,EAAGpC,OACvBkD,aAAa,CACZD,OAAQnC,IAGZ,OAAO,IAAIhB,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMuC,EAAOH,EAAGnC,QAGnCqF,EAAY,SAAClC,GACxB,IAAMb,EAASP,EACZQ,cAAa,SAAUC,GACtB,OAAOA,EAAE/C,KAAKiD,OAAOE,GAAGnD,KAAKiD,OAAOC,MAErCE,UAAU,CAACM,EAAEpD,KAAMoD,EAAErD,OAExB,OAAO,IAAID,EAAOsD,EAAEpD,KAAMoD,EAAErD,KAAMwC,EAAOa,EAAEnD,QAGhCsF,EAAb,a,kOAAA,U,IAAA,G,EAAA,E,+YACE,aAAc,a,4FAAA,UACZ,gBAEKC,UAAU,WAAYT,GAC3B,EAAKS,UAAU,iBAAkBpB,GACjC,EAAKoB,UAAU,sBAAuBR,GACtC,EAAKQ,UAAU,aAAcP,GAC7B,EAAKO,UAAU,WAAYJ,GAC3B,EAAKI,UAAU,sBAAuB1B,GACtC,EAAK0B,UAAU,4BAA6BH,GAC5C,EAAKG,UAAU,oBAAqBrD,GACpC,EAAKqD,UAAU,0BAA2BzC,GAC1C,EAAKyC,UAAU,oBAAqBrC,GACpC,EAAKqC,UAAU,cAAe9B,GAC9B,EAAK8B,UAAU,qBAAsBzB,GACrC,EAAKyB,UAAU,qBAAsBxB,GACrC,EAAKwB,UAAU,eAAgBvB,GAC/B,EAAKuB,UAAU,iBAAkBnB,GACjC,EAAKmB,UAAU,iBAAkBlB,GACjC,EAAKkB,UAAU,iBAAkBhB,GACjC,EAAKgB,UAAU,iBAAkBf,GACjC,EAAKe,UAAU,qBAAsBd,GACrC,EAAKc,UAAU,qBAAsBb,GACrC,EAAKa,UAAU,UAAWZ,GAC1B,EAAKY,UAAU,OAAQX,GACvB,EAAKW,UAAU,cAAeV,GAC9B,EAAKU,UAAU,YAAaF,GA1BhB,EADhB,UAAoC/F,GElWhCkG,EAA0C,IAAIF,EAMrCnE,EAAiB,WAC5B,OAAOqE,G,8RCkFT,QAvFMC,WAKJ,WAAYC,I,4FAAuB,6BAJH,MAIG,cAHpB,GAGoB,gBAFR,IAGzBjG,KAAKiG,WAAaA,E,6CAGpB,SAASC,GAIP,OAHAlG,KAAKmG,OACLnG,KAAKoG,OAAOC,KAAKH,GAEVlG,O,uBAGT,WACE,OAAOA,KAAKoG,S,qBAGd,SAAQE,GACN,IAAIrC,EAASqC,EAMb,OAJAtG,KAAKoG,OAAOjF,SAAQ,SAAC+E,GACnBjC,EAASiC,EAAMK,QAAQtC,MAGlBA,I,sBAGT,SACEuC,EACAC,EACAvC,EACAwC,GAMA,IAJA,IAAMhD,EAAI8C,EAAElG,KAERqG,EAAQjF,IAAiBC,QAAQ,sBAAuBuC,EAAauC,GAEhEP,EAAQlG,KAAKoG,OAAOQ,OAAS,EAAGV,GAAS,EAAGA,GAAS,EAC5DS,EAAQ3G,KAAKoG,OAAOF,GACjBW,qBACAC,UAAUN,EAAG9C,EAAGgD,EAAgBC,K,kBAIvC,SAAK1C,EAAgBC,GACnB,OAAOlE,KAAKoG,OAAOpG,KAAKoG,OAAOQ,OAAS,GAAGG,KAAK9C,EAAQC,K,mBAG1D,SAAMR,GACJ,OAAO1D,KAAKoG,OAAOpG,KAAKoG,OAAOQ,OAAS,GAAGI,MAAMtD,K,kBAGnD,SAAKuD,GACH,IAAMC,EAAa,CACjBjB,WAAYjG,KAAKiG,WACjBG,OAAQ,IAGVpG,KAAKoG,OAAOjF,SAAQ,SAAC+E,GACnBgB,EAAWd,OAAOC,KAAK,CACrBc,KAAMjB,EAAMkB,UACZjB,KAAMD,EAAMmB,UACZC,QAAS,CACPC,EAAGrB,EAAMqB,EAAEhH,KACXyC,EAAGkD,EAAMlD,EAAEzC,WAKjB,IAAMQ,EAASyG,KAAKC,UAAUP,GAE9B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,UAAaZ,EAAMlG,GAAQ,SAAC+G,GACtBA,IACFC,QAAQf,MAAMc,GACdF,KAEFD,EAAQ5G,c,mBAhFViF,GCUC,IAAKgC,E,kIAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,OAAAA,EAAAA,QAAAA,UAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,KCZL,IAAeC,EAIpB,WAAY/B,EAAegC,I,4FAAuB,wBAHxB,MAGwB,uBAFhB,MAGhClI,KAAKkG,MAAQA,EACblG,KAAKkI,cAAgBA,G,k/BCLlB,IAAMC,EAAb,a,kOAAA,U,QAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,wBACE,SACE7B,EACA8B,EACA1B,EACA2B,GAEA,IAAMC,EACmB,OAAvBtI,KAAKkI,cAAyBlI,KAAKkI,cAAcK,EAAIjC,EACjDK,EAAQjF,IAAiBC,QAC7B,WACA0G,EACAC,EAAoB1C,YAAY4C,aAoBlC,OAlBAxI,KAAKkG,MAAMuC,GAAK/G,IAAiBC,QAC/B,iBACAD,IAAiBC,QACf,0BACAgF,EACAyB,GAEF1G,IAAiBC,QACf,4BACA3B,KAAKkG,MAAMqB,EACXb,EAAiB0B,IAGrBpI,KAAKkG,MAAMwC,GAAKhH,IAAiBC,QAC/B,0BACA0G,EAAMM,aACNP,GAEyB,OAAvBpI,KAAKkI,cACAxG,IAAiBC,QACtB,sBACAD,IAAiBC,QAAQ,WAAY3B,KAAKkG,MAAMqB,EAAE3B,YAAayC,GAC/DrI,KAAKkI,cAAcU,WAAW5I,KAAKkI,cAAcK,IAG9C,IAAInI,O,iBAvCf,GAA2C6H,G,+/BCDpC,IAAMY,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,wBACE,SACEvC,EACA8B,EACA1B,EACA2B,GAEA,OAAOA,O,kBAPX,GAA2CJ,G,6nCCEpC,IAAMa,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,uKACsC,MADtC,S,EAAA,G,EAAA,wBAGE,SACExC,EACA8B,EACA1B,EACA2B,GAiBA,IAfA,IAAMU,EAAY/I,KAAKkI,cACjBnH,EAASW,IAAiBC,QAC9B,WACA,IAAIvB,EAAO2I,EAAUC,EAAE3I,KAAM0I,EAAUC,EAAE1I,OAGrC2I,EAAaF,EAAUG,gBACvBC,EAASJ,EAAUK,YACnBC,EAAaN,EAAUO,WACvBC,EAAcR,EAAUS,YAExBC,GADaV,EAAUW,WACTX,EAAUY,kBACxBC,EAAeb,EAAUc,kBACzBC,EAAcf,EAAUgB,iBAErBrG,EAAI,EAAGA,EAAI0E,EAAkB1E,IACpC,IAAK,IAAIsG,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAYpC,IAXA,IAEMC,EAAahB,EAASe,EAGxBE,GAAO,IACLC,EAAcd,EAAcF,EAAaW,EACzCM,EAAeV,EAAeH,EAAcO,EAC9CO,EAAO,EACPC,EAAO,EAEFrH,EAAI,EAAGsH,EAXEtB,EAASc,EAWS9G,EAAI8F,EAAY9F,IAAKsH,IACvD,IACE,IAAIvH,EAAI,EAAGwH,EAASP,EACpBjH,EAAI+F,EACJ/F,IAAKwH,IAGHN,EACArB,EAAUC,EAAEzI,KAAK8J,EAAcI,EAASpB,EAAaqB,GACnDhH,KAGF0G,EACErB,EAAUC,EAAEzI,KACV8J,EAAcI,EAASpB,EAAaqB,GACpChH,GACJ6G,EAAOG,EACPF,EAAOC,GAKb1J,EAAOR,KAAK8J,EAAcG,EAAOnB,EAAakB,GAAM7G,GAClD2E,EAAMiC,EAAeL,EAAIR,EAAcS,GAAGxG,GAMpD,OAAO3C,O,kBApEX,GAA8CkH,G,6nCCAvC,IAAM0C,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,uKACsC,MADtC,S,EAAA,G,EAAA,wBAGE,SACErE,EACA8B,EACA1B,EACA2B,GAEA,IAAMH,EAAgBlI,KAAKkI,cAErB0C,EAAU1C,EAAc2C,aACxB1B,EAASjB,EAAckB,YACvBH,EAAaf,EAAcgB,gBAC3BO,EAAcvB,EAAcyB,iBAC5BC,EAAe1B,EAAc2B,kBAC7BC,EAAc5B,EAAc6B,iBAC5BV,EAAanB,EAAcoB,WAC3BC,EAAcrB,EAAcsB,YAC5BsB,EAAa5C,EAAcwB,WAE3BqB,EAAYrJ,IAAiBC,QACjC,WACA,IAAIvB,GACDiJ,EAAa,EAAIuB,IAAYrB,EAAc,EAAIqB,GAAWE,EAC3D1C,IAIErH,EAAS,IAAIX,EACjBiJ,EAAaE,EAAcuB,EAC3B1C,GAGYF,EAAcU,WAAWV,EAAcK,GAErDL,EAAcO,GAAK/G,IAAiBC,QAAQ,WAAYuG,EAAcO,IACtEP,EAAcQ,GAAKhH,IAAiBC,QAAQ,WAAYuG,EAAcQ,IAEtE,IAAK,IAAIhF,EAAI,EAAGA,EAAI0E,EAAkB1E,IAAK,CACzC,IAAK,IAAIsG,EAAI,EAAGA,EAAIF,EAAaE,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAOpC,IANA,IAAMc,EAAY7B,EAASc,EAErBE,EAAahB,EAASe,EAInBe,EAAI,EAAGA,EAAIH,EAAYG,IAC9B,IACE,IAAI9H,EAAI,EAAG+H,EAAWF,EAAWG,GAAeP,EAChDzH,EAAI8F,EACJ9F,IAAK+H,IAAYC,IAEjB,IACE,IAAIjI,EAAI,EAAGkI,EAAajB,EAAYkB,GAAiBT,EACrD1H,EAAI+F,EACJ/F,IAAKkI,IAAcC,IACnB,CACAN,EACEE,GACG5B,EAAa,EAAIuB,IACjBrB,EAAc,EAAIqB,GACnBM,GAAY7B,EAAa,EAAIuB,GAC7BQ,GACF1H,IACAwE,EAAcX,EAAEhH,KAAKyJ,GACnBiB,EAAIhC,EAAaA,EAAa9F,EAAI8F,EAAa/F,GAEjDmF,EAAM2B,EAAIP,EAAcG,EAAeK,EAAIR,EAAcS,GACvDxG,GAGJ,IAAI4H,EAAI,EACO,GAAXV,EACFU,EACEpD,EAAcc,EAAEzI,KACd0K,EAAI5B,EAAaE,EACf2B,EAAW7B,EACX+B,GACF1H,GAGFyH,GAAe,GACfE,GAAiB,GACjBF,EAAc5B,GACd8B,EAAgBhC,IAEhBiC,EACEpD,EAAcc,EAAEzI,KACd0K,EAAI5B,EAAaE,EACf4B,EAAc9B,EACdgC,GACF3H,IAIRwE,EAAcO,GAAGlI,KAAKyJ,GACpBiB,EAAIhC,EAAaA,EAAa9F,EAAI8F,EAAa/F,IAE9CoI,EACCjD,EACE2B,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GACrDxG,GACJ0E,EAKRF,EAAcQ,GAAGnI,KAAKyJ,GAAG,IACvB3B,EAAM2B,GAAKP,EAAcG,GAAgBK,EAAIR,EAAcS,GAAGxG,GAC9D0E,EAKR,GAAIwC,EAAU,EAEZ,IAAK,IAAIZ,EAAI,EAAGA,EAAIc,EAAYd,IAC9B,IAAK,IAAIC,GAAKW,EAASzH,EAAI,EAAG8G,EAAIV,EAAcqB,EAASX,IAAK9G,IAC5D,IAAK,IAAI+G,GAAKU,EAAS1H,EAAI,EAAGgH,EAAIb,EAAauB,EAASV,IAAKhH,IACvDgH,GAAK,GAAKD,GAAK,GAAKC,EAAIb,GAAcY,EAAIV,IAC5CxI,EAAOiJ,EAAIX,EAAaE,EAAcU,EAAIZ,EAAaa,GAAGxG,GACxDqH,EACEf,GACGX,EAAa,EAAIuB,IACjBrB,EAAc,EAAIqB,GACnBzH,GAAKkG,EAAa,EAAIuB,GACtB1H,GACFQ,IAQhB,OAAIkH,EAAU,EACL7J,EAGFgK,O,kBA9IX,GAA2C9C,G,uKCEpC,IAAMsD,GAAb,yB,4FAAA,S,QAAA,O,EAAA,E,EAAA,qBACE,SAAcrD,EAAuBhC,GACnC,GAAqB,MAAjBgC,EAAuB,CACzB,GAAIhC,EAAMsF,OACR,OAAO,IAAIrD,EAAsBjC,EAAOgC,GACnC,GAAIhC,EAAMkB,WAAaY,EAAUyD,KACtC,OAAO,IAAI5C,GAAsB3C,EAAOgC,OAErC,CACL,GAAIA,EAAcd,WAAaY,EAAU0D,QACvC,OAAO,IAAI5C,GAAyB5C,EAAOgC,GACtC,GAAIA,EAAcd,WAAaY,EAAUyD,KAC9C,OAAO,IAAId,GAAsBzE,EAAOgC,GACnC,GACLA,EAAcsD,QACdtD,EAAcd,WAAaY,EAAU2D,eAErC,OAAO,IAAIxD,EAAsBjC,EAAOgC,GAG5C,OAAO,QApBX,M,eAAA,M,WAAA,K,oSCFe0D,GAAAA,WAKb,WAAYC,I,4FAAsB,8BAJA,MAIA,oBAHJ,MAGI,kBAFL,MAG3B7L,KAAKiG,WAAa4F,EAClB7L,KAAK8L,QAAU,IAAI9F,EAAQ6F,G,+CAG7B,SACE1E,GAEiB,IADjB4E,EACiB,uDAD0B,KAErC7F,EAAQ,IAAIiB,EAoBlB,MAlBwB,mBAAb4E,GACTA,EAAS7F,GAGY,OAAnBlG,KAAKgM,UACPhM,KAAKiM,qBAAqB/F,GAE1BA,EAAMgG,WAAWlM,KAAKgM,WAGxB9F,EAAMiG,YACNjG,EAAMkG,mBACJb,GAAuBc,OAAOrM,KAAKgM,UAAW9F,IAGhDlG,KAAK8L,QAAQQ,SAASpG,GACtBlG,KAAKgM,UAAY9F,EAEVlG,O,wBAGT,WACE,OAAOA,KAAK8L,W,uBAtCDF,G,oSCAAW,GAAAA,WAkBb,c,4FAAc,yBANI,GAMJ,iBALK,GAKL,gBAJI,GAIJ,wBAHoB,MAGpB,0BAFuC,MAGnDvM,KAAKuH,EAAI,IAAInH,EACbJ,KAAKgD,EAAI,IAAI5C,EACbJ,KAAKuI,EAAI,IAAInI,EACbJ,KAAKgJ,EAAI,IAAI5I,EACbJ,KAAKyI,GAAK,IAAIrI,EACdJ,KAAK0I,GAAK,IAAItI,EACdJ,KAAKwM,GAAK,IAAIpM,EACdJ,KAAKyM,GAAK,IAAIrM,EACdJ,KAAK0M,GAAK,IAAItM,EACdJ,KAAK2M,GAAK,IAAIvM,E,uDAGhB,SAAmBwM,GAEjB,OADA5M,KAAK4M,gBAAkBA,EAChB5M,O,gCAGT,WACE,OAAOA,KAAK4M,kB,qBAGd,SAAQtG,GAON,OANAtG,KAAKgJ,EAAItH,IAAiBC,QACxB,iBACAD,IAAiBC,QAAQ,WAAY3B,KAAKuH,EAAGjB,GAC7CtG,KAAKgD,EAAEe,UAAU,EAAGuC,EAAMhG,OAE5BN,KAAKuI,EAAIvI,KAAK6M,WAAW7M,KAAKgJ,GACvBhJ,KAAKuI,I,sBAGd,SAAS5I,GAGP,OAFAK,KAAK8M,MAAQnN,EAENK,O,sBAGT,WACE,OAAOA,KAAK8M,Q,uBAGd,SAAUnN,GAGR,OAFAK,KAAK+M,OAASpN,EAEPK,O,uBAGT,WACE,OAAOA,KAAK+M,S,sBAGd,SAASpN,GAGP,OAFAK,KAAKgN,MAAQrN,EAENK,O,sBAGT,WACE,OAAOA,KAAKgN,Q,wBAed,SAAW9E,GAET,OADAlI,KAAKkI,cAAgBA,EACdlI,O,qBAiBT,WACE,OAAO0B,IAAiBC,QAAQ,UAAW3B,KAAKuH,Q,oBAhHrCgF,G,66CCDAU,GAAAA,SAAAA,I,6yBACK,G,wCAElB,WACEjN,KAAKuH,EAAE/G,OAAOR,KAAK+M,OAAQ/M,KAAK8M,OAChC9M,KAAKuH,EAAI7F,IAAiBC,QAAQ,aAAc3B,KAAKuH,EAAGvH,KAAK8M,OAE7D9M,KAAKgD,EAAExC,OAAOR,KAAK+M,OAAQ,GAC3B/M,KAAKgD,EAAItB,IAAiBC,QAAQ,aAAc3B,KAAKgD,EAAGhD,KAAK8M,OAE7D9M,KAAKyI,GAAGjI,OAAOR,KAAK+M,OAAQ/M,KAAK8M,OACjC9M,KAAKyI,GAAK/G,IAAiBC,QAAQ,WAAY3B,KAAKyI,IAEpDzI,KAAK0I,GAAGlI,OAAOR,KAAK+M,OAAQ,GAC5B/M,KAAK0I,GAAKhH,IAAiBC,QAAQ,WAAY3B,KAAK0I,IAEpD1I,KAAKyM,GAAGjM,OAAOR,KAAK+M,OAAQ/M,KAAK8M,OACjC9M,KAAKyM,GAAK/K,IAAiBC,QAAQ,WAAY3B,KAAKyM,IAEpDzM,KAAK2M,GAAGnM,OAAOR,KAAK+M,OAAQ,GAC5B/M,KAAK2M,GAAKjL,IAAiBC,QAAQ,WAAY3B,KAAK2M,IAEpD3M,KAAKwM,GAAGhM,OAAOR,KAAK+M,OAAQ/M,KAAK8M,OACjC9M,KAAKwM,GAAK9K,IAAiBC,QAAQ,WAAY3B,KAAKwM,IAEpDxM,KAAK0M,GAAGlM,OAAOR,KAAK+M,OAAQ,GAC5B/M,KAAK0M,GAAKhL,IAAiBC,QAAQ,WAAY3B,KAAK2M,M,kBAGtD,WACE,OAAO,I,kBAGT,WACE,OAAO,I,wBAGT,SAAWzE,GAaT,OAZIA,EAAcsD,OAChBxL,KAAKkN,SAAShF,EAAcb,WACnBa,EAAciF,QACvBnN,KAAKkN,SACHhF,EAAcyB,iBACZzB,EAAc2B,kBACd3B,EAAc6B,kBAIpB,gDAAiB7B,GAEVlI,O,qBAGT,SAAQL,GAGN,OAFAK,KAAKoN,UAAUzN,EAAM,IAEdK,O,qBAGT,WACE,OAAOA,KAAK+M,S,4BAGd,WACE,OAAO/M,KAAK8M,Q,6BAGd,WACE,OAAO9M,KAAK+M,S,4BAGd,WACE,OAAO,O,oBAxEIE,CAAwBV,I,mgCCCjCc,GAAAA,SAAAA,I,4uBACJ,SAAW3J,GACT,OAAOhC,IAAiBC,QAAQ,oBAAqB+B,K,wBAGvD,SAAWA,GACT,MAAM,IAAId,MAAM,wB,qBAGlB,WACE,OAAOoF,EAAUsF,U,kBAGnB,SAAKrJ,EAAgBC,GACnB,OAAOxC,IAAiBC,QAAQ,cAAesC,EAAQC,K,mBAGzD,SAAMR,GACJ,OAAQ,EAAMA,O,oBAlBZ2J,CAAqBJ,I,mgCCArBM,GAAAA,SAAAA,I,4uBACJ,SAAW7J,GACT,OAAOhC,IAAiBC,QAAQ,qBAAsB+B,K,wBAGxD,SAAWA,GACT,OAAOhC,IAAiBC,QAAQ,qBAAsB+B,K,qBAGxD,WACE,OAAOsE,EAAUwF,W,kBAGnB,SAAKvJ,EAAgBC,GACnB,OAAOxC,IAAiBC,QAAQ,eAAgBsC,EAAQC,K,mBAG1D,SAAMR,GACJ,OAAQ,EAAMA,O,oBAlBZ6J,CAAsBN,I,mgCCAtBQ,GAAAA,SAAAA,I,4uBACJ,SAAW/J,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,wBAGpD,SAAWA,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,qBAGpD,WACE,OAAOsE,EAAU0F,O,kBAGnB,SAAKzJ,EAAgBC,GACnB,OAAO,I,mBAGT,SAAMR,GACJ,OAAO,O,oBAlBL+J,CAAkBR,I,mgCCAlBU,GAAAA,SAAAA,I,4uBACJ,SAAWjK,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,wBAGpD,SAAWA,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,qBAGpD,WACE,OAAOsE,EAAU4F,O,kBAGnB,SAAK3J,EAAgBC,GACnB,OAAO,I,mBAGT,SAAMR,GACJ,OAAO,O,oBAlBLiK,CAAkBV,I,mgCCAlBY,GAAAA,SAAAA,I,4uBACJ,SAAWnK,GACT,OAAOhC,IAAiBC,QAAQ,qBAAsB+B,K,wBAGxD,SAAWA,GACT,OAAOhC,IAAiBC,QAAQ,qBAAsB+B,K,qBAGxD,WACE,OAAOsE,EAAU8F,W,kBAGnB,SAAK7J,EAAgBC,GACnB,OAAO,I,mBAGT,SAAMR,GACJ,OAAO,O,oBAlBLmK,CAAsBZ,ICFfc,GAAS,SACpBzH,EACA0H,EACAjB,EACAD,EACAmB,EACAC,EACAC,EACAC,EACAC,EACAC,GAUA,IARA,IAAMjO,EAAO6N,EAAWD,EAAWD,EAC7B1N,IACFwM,EAAQoB,EAAW,EAAIE,GAASE,EAAW,KAC3CvB,EAASkB,EAAW,EAAIE,GAASE,EAAW,GAC5CE,EAAmB,EAEjBxN,EAASW,IAAiBC,QAAQ,WAAY,IAAIvB,EAAOC,EAAMC,IAG/DkO,GAAaL,EACjBK,EAAYP,GAAYlB,EAASoB,EACjCK,GAAaH,EAEb,IACE,IAAII,GAAaL,EACjBK,EAAYP,GAAYpB,EAAQsB,EAChCK,GAAaH,EACb,CAEA,IADA,IAAII,EAAmB,EACdC,EAAU,EAAGA,EAAUX,EAAUW,IAExC,IADA,IAAMtE,EAAc0C,EAASD,EAAQ6B,EAC5BxL,EAAI,EAAGA,EAAI8K,EAAU9K,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIgL,EAAUhL,IAE1BsL,EAAYrL,GAAK,GACjBsL,EAAYvL,GAAK,GACjBuL,EAAYvL,EAAI4J,GAChB0B,EAAYrL,EAAI4J,IAEhBhM,EAAOR,KAAKmO,GAAkBH,GAC5BjI,EAAM/F,MACH4C,EAAIqL,GAAa1B,EAAQ2B,EAAYvL,EAAImH,GAC1C,IAENqE,IAINH,IAGJ,OAAOxN,GAGI2K,GAAU,SACrBpF,EACA0H,EACAjB,EACAD,EACAmB,EACAC,EACAG,EACAC,GAYA,IAVA,IAAMM,GAAe9B,EAAQoB,GAAYI,EAAW,EAC9CO,GAAgB9B,EAASkB,GAAYI,EAAW,EAChDS,EAAcd,EAEhBO,EAAmB,EACjBxN,EAASW,IAAiBC,QAC9B,WACA,IAAIvB,EAAOwO,EAAcC,EAAeC,EAAa,IAIjDN,EAAY,EAChBA,EAAYP,GAAYlB,EACxByB,GAAaH,EAEb,IACE,IAAII,EAAY,EAChBA,EAAYP,GAAYpB,EACxB2B,GAAaH,EACb,CACA,IAAK,IAAIK,EAAU,EAAGA,EAAUX,EAAUW,IAAW,CAInD,IAHA,IAAIvE,GAAO,IACLC,EAAc0C,EAASD,EAAQ6B,EAC/BrE,EAAesE,EAAcC,EAAeF,EACzCxL,EAAI,EAAGA,EAAI8K,EAAU9K,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIgL,EAAUhL,IAC5BkH,EAAOzG,KAAK9B,IACVuI,EACA9D,EAAM/F,KACJ8J,GAAelH,EAAIqL,GAAa1B,EAAQ2B,EAAYvL,GACpD,IAIRnC,EAAOR,KAAK+J,EAAeiE,GAAkB,GAAKnE,EAEpDmE,IAGJ,OAAO,IAAInO,G,+yCCzGE2O,GAAAA,SAAAA,I,2uBACb,c,kBAIA,WACE,OAAO,I,kBAGT,WACE,OAAO,I,wBAGT,SAAW7G,GAWT,OAVIA,EAAciF,QAChBnN,KAAKgP,QAAQ,CACX9G,EAAcyB,iBACdzB,EAAc2B,kBACd3B,EAAc6B,mBAIlB,gDAAiB7B,GAEVlI,O,qBAGT,SAAQ6L,GAKN,OAJA7L,KAAKkN,SAASrB,EAAU,IACxB7L,KAAKoN,UAAUvB,EAAU,IACzB7L,KAAKiP,SAASpD,EAAU,IAEjB7L,O,qBAGT,WACE,MAAO,CAACA,KAAKsJ,WAAYtJ,KAAKwJ,YAAaxJ,KAAK0J,iB,oBApCrCqF,CAAwBxC,I,ioCCGjC2C,GAAAA,SAAAA,I,kzBACmB,I,sBACA,G,mBACH,G,kBACD,G,wCAEnB,WACElP,KAAKuH,EAAE/G,OACLR,KAAKmP,WACLnP,KAAKiJ,WAAajJ,KAAKiJ,WAAajJ,KAAKgN,OAE3ChN,KAAKuH,EAAI7F,IAAiBC,QACxB,aACA3B,KAAKuH,EACLvH,KAAK8M,MAAQ9M,KAAK+M,OAAS/M,KAAKgN,OAGlChN,KAAKgD,EAAExC,OAAOR,KAAKmP,WAAY,GAC/BnP,KAAKgD,EAAItB,IAAiBC,QAAQ,aAAc3B,KAAKgD,EAAG,KAExDhD,KAAKyI,GAAGjI,OACNR,KAAKmP,WACLnP,KAAKiJ,WAAajJ,KAAKiJ,WAAajJ,KAAKgN,OAE3ChN,KAAKyI,GAAK/G,IAAiBC,QAAQ,WAAY3B,KAAKyI,IAEpDzI,KAAK0I,GAAGlI,OAAOR,KAAKmP,WAAY,GAChCnP,KAAK0I,GAAKhH,IAAiBC,QAAQ,WAAY3B,KAAK0I,IAEpD1I,KAAKyM,GAAGjM,OACNR,KAAKmP,WACLnP,KAAKiJ,WAAajJ,KAAKiJ,WAAajJ,KAAKgN,OAE3ChN,KAAKyM,GAAK/K,IAAiBC,QAAQ,WAAY3B,KAAK0I,IAEpD1I,KAAK2M,GAAGnM,OAAOR,KAAKmP,WAAY,GAChCnP,KAAK2M,GAAKjL,IAAiBC,QAAQ,WAAY3B,KAAK2M,IAEpD3M,KAAKwM,GAAGhM,OACNR,KAAKmP,WACLnP,KAAKiJ,WAAajJ,KAAKiJ,WAAajJ,KAAKgN,OAE3ChN,KAAKwM,GAAK9K,IAAiBC,QAAQ,WAAY3B,KAAKwM,IAEpDxM,KAAK0M,GAAGlM,OAAOR,KAAKmP,WAAY,GAChCnP,KAAK0M,GAAKhL,IAAiBC,QAAQ,WAAY3B,KAAK0M,M,6BAGtD,WACE,OAAQ1M,KAAK8M,MAAQ9M,KAAKiJ,WAAa,EAAIjJ,KAAK4K,SAAW5K,KAAKmJ,OAAS,I,4BAG3E,WACE,OAAQnJ,KAAK+M,OAAS/M,KAAKiJ,WAAa,EAAIjJ,KAAK4K,SAAW5K,KAAKmJ,OAAS,I,4BAG5E,WACE,OAAOnJ,KAAKmP,a,2BAGd,SAAchJ,GAEZ,OADAnG,KAAKiJ,WAAa9C,EACXnG,O,2BAGT,WACE,OAAOA,KAAKiJ,a,2BAGd,SAAckG,GAEZ,OADAnP,KAAKmP,WAAaA,EACXnP,O,2BAGT,WACE,OAAOA,KAAKmP,a,wBAGd,SAAWvE,GAET,OADA5K,KAAK4K,QAAUA,EACR5K,O,wBAGT,WACE,OAAOA,KAAK4K,U,uBAGd,SAAUzB,GAER,OADAnJ,KAAKmJ,OAASA,EACPnJ,O,uBAGT,WACE,OAAOA,KAAKmJ,S,qBAGd,SAAQ7C,GAMN,IALA,IAAMvF,EAAS,IAAIX,EACjBJ,KAAK2J,iBAAmB3J,KAAK6J,kBAAoB7J,KAAK+J,iBACtDzD,EAAMhG,MAGCe,EAAI,EAAGA,EAAIiF,EAAMhG,KAAMe,GAAK,EAAG,CACtC,IAAMoK,EAAOsC,GACXzH,EAAMzF,IAAIQ,GACVrB,KAAKgN,MACLhN,KAAK+M,OACL/M,KAAK8M,MACL9M,KAAKiJ,WACLjJ,KAAKiJ,WACLjJ,KAAK4K,QACL5K,KAAK4K,QACL5K,KAAKmJ,OACLnJ,KAAKmJ,QAED/G,EAAOpC,KAAKgJ,EAAItH,IACnBC,QACC,iBACAD,IAAiBC,QAAQ,WAAY3B,KAAKuH,EAAGkE,GAC7CzL,KAAKgD,EAAEe,UAAU,EAAGuC,EAAMhG,OAE3B8O,kBAEHrO,EAAOsO,OAAOhO,EAAGe,GAMnB,OAHApC,KAAKgJ,EAAIjI,EACTf,KAAK6M,WAAW7M,KAAKgJ,GAEdhJ,KAAKuI,I,wBAGd,SAAW7E,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,wBAGpD,SAAWA,GACT,OAAOhC,IAAiBC,QAAQ,iBAAkB+B,K,qBAGpD,WACE,OAAOsE,EAAUyD,O,kBAGnB,SAAKxH,EAAgBC,GACnB,MAAM,IAAItB,MAAM,kB,mBAGlB,SAAMc,GACJ,MAAM,IAAId,MAAM,qB,oBArJdsM,CAAkBH,I,mgCCHlBO,GAAAA,SAAAA,I,2uBACJ,c,wBAIA,SAAWpH,GACT,IAAIA,EAAciF,OAkBhB,MAAM,IAAIvK,MACR,+DAlBF,GAAIsF,EAAcd,WAAaY,EAAU0D,QAYvC,MAAM,IAAI9I,MACR,wEASN,OArBI5C,KAAKiJ,WAAaf,EAAcyB,iBAChC3J,KAAK4K,QAAU,EACf5K,KAAKmJ,OAAS,EACdnJ,KAAK8M,MAAQ5E,EAAcyB,iBAC3B3J,KAAK+M,OAAS7E,EAAc2B,kBAC5B7J,KAAKgN,MAAQ9E,EAAc6B,iBAC3B/J,KAAKmP,WACHjH,EAAcyB,iBACdzB,EAAc2B,kBACd3B,EAAc6B,iBAYb/J,O,qBAGT,SAAQ6L,GACN,MAAM,IAAIjJ,MAAM,iB,2BAGlB,SAAcqG,GACZ,MAAM,IAAIrG,MAAM,iB,uBAGlB,SAAUuG,GACR,MAAM,IAAIvG,MAAM,iB,wBAGlB,SAAWgI,GACT,MAAM,IAAIhI,MAAM,iB,sBAGlB,SAASjD,GACP,MAAM,IAAIiD,MAAM,iB,uBAGlB,SAAUjD,GACR,MAAM,IAAIiD,MAAM,iB,sBAGlB,SAASjD,GACP,MAAM,IAAIiD,MAAM,iB,2BAGlB,SAAcjD,GACZ,MAAM,IAAIiD,MAAM,oB,oBA7Dd0M,CAA4BJ,I,mgCCG5BK,GAAAA,SAAAA,I,2uBAIJ,WACEvP,KAAK4M,gBAAkB,IAAI9D,GACzB9I,KACAA,KAAKkI,iB,6BAIT,WACE,OAAQlI,KAAK+M,OAAS/M,KAAKiJ,YAAcjJ,KAAKmJ,OAAS,I,4BAGzD,WACE,OAAQnJ,KAAK8M,MAAQ9M,KAAKiJ,YAAcjJ,KAAKmJ,OAAS,I,4BAGxD,WACE,OAAOnJ,KAAKgN,Q,2BAGd,SAAc7G,GAEZ,OADAnG,KAAKiJ,WAAa9C,EACXnG,O,2BAGT,WACE,OAAOA,KAAKiJ,a,uBAGd,SAAUE,GAER,OADAnJ,KAAKmJ,OAASA,EACPnJ,O,uBAGT,WACE,OAAOA,KAAKmJ,S,qBAGd,SAAQ7C,GAMN,IALA,IAAMvF,EAAS,IAAIX,EACjBJ,KAAK2J,iBAAmB3J,KAAK6J,kBAAoB7J,KAAK+J,iBACtDzD,EAAMhG,MAGCe,EAAI,EAAGA,EAAIiF,EAAMhG,KAAMe,GAAK,EAAG,CACtC,IAAMmO,EAAO9D,GACXpF,EAAMzF,IAAIQ,GACVrB,KAAKgN,MACLhN,KAAK+M,OACL/M,KAAK8M,MACL9M,KAAKiJ,WACLjJ,KAAKiJ,WACLjJ,KAAKmJ,OACLnJ,KAAKmJ,QACLiG,kBAEFrO,EAAOsO,OAAOhO,EAAGmO,GAMnB,OAHAxP,KAAKgJ,EAAIjI,EACTf,KAAK6M,WAAW7M,KAAKgJ,GAEdhJ,KAAKuI,I,wBAGd,SAAW7E,GACT,MAAM,IAAId,MAAM,sC,wBAGlB,SAAWc,GACT,MAAM,IAAId,MAAM,sC,qBAGlB,WACE,OAAOoF,EAAU0D,U,kBAGnB,SAAKzH,EAAgBC,GACnB,MAAM,IAAItB,MAAM,kB,mBAGlB,SAAMc,GACJ,MAAM,IAAId,MAAM,qB,oBArFd2M,CAAqBR,I,mgCCMrBU,GAAAA,SAAAA,I,2uBAKJ,SAAgBC,GACd,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAY6H,GAAU,SAAC5H,EAAKvH,GAC1B,GAAIuH,EACFF,EAAOE,OADT,CAIA,IAAM6H,EAAOnI,KAAKoI,MAAMrP,EAAKsP,YAEvBC,EAAU,IAAIL,EAAUE,EAAI,YAElCA,EAAI,OAAWxO,SAAQ,SAAC4O,GACtB,IAAIC,EAAa,KAES,aAAtBD,EAAS,KACXC,EAAazC,GACkB,YAAtBwC,EAAS,KAClBC,EAAa3C,GACkB,SAAtB0C,EAAS,KAClBC,EAAarC,GACkB,aAAtBoC,EAAS,KAClBC,EAAanC,GACkB,SAAtBkC,EAAS,OAClBC,EAAavC,IAGfqC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,kBAI3B,IAAMjE,EAAUgE,EAAQI,aAExBpE,EAAQqE,YAAYhP,SAAQ,SAAC+E,EAAO7E,GAClC6E,EAAMqB,EAAIoI,EAAI,OAAJ,EACVzJ,EAAMlD,EAAI2M,EAAI,OAAJ,KAGZhI,EAAQmE,c,qCA1Cd,SAAqB5F,GACnBA,EAAMgH,SAASlN,KAAKiG,WAAW,S,+BAF7BwJ,CAAkB7D,I,mgCCElBwE,GAAAA,SAAAA,I,2uBAKJ,SAAgBV,GACd,OAAO,IAAIhI,SAAQ,SAACC,EAASC,GAC3BC,EAAAA,SAAY6H,GAAU,SAAC5H,EAAKvH,GAC1B,GAAIuH,EACFF,EAAOE,OADT,CAIA,IAAM6H,EAAOnI,KAAKoI,MAAMrP,EAAKsP,YAEvBC,EAAU,IAAIM,EAAUT,EAAI,YAElCA,EAAI,OAAWxO,SAAQ,SAAC4O,GACtB,IAAIC,EAAa,KAES,aAAtBD,EAAS,MACXC,EAAazC,GACbuC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,gBAEM,YAAtBA,EAAS,MAClBC,EAAa3C,GACbyC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAarC,GACbmC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,gBAEM,aAAtBA,EAAS,MAClBC,EAAanC,GACbiC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAavC,GACbqC,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,gBAEM,SAAtBA,EAAS,MAClBC,EAAad,GACbY,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,YACvB7J,EAAMmK,cAAcN,EAAS,YAC7B7J,EAAMoK,UAAUP,EAAS,QACzB7J,EAAMqK,cAAcR,EAAS,YAC7B7J,EAAMsK,WAAWT,EAAS,aAEG,YAAtBA,EAAS,MAClBC,EAAaT,GACbO,EAAQG,YAAYD,GAAY,SAAC9J,GAC/BA,EAAM8I,QAAQe,EAAS,YACvB7J,EAAMmK,cAAcN,EAAS,YAC7B7J,EAAMoK,UAAUP,EAAS,YAEI,mBAAtBA,EAAS,OAClBC,EAAaT,GACbO,EAAQG,YAAYD,OAIxB,IAAMlE,EAAUgE,EAAQI,aAExBpE,EAAQqE,YAAYhP,SAAQ,SAAC+E,EAAO7E,GAClC6E,EAAMqB,EAAIoI,EAAI,OAAJ,EACVzJ,EAAMlD,EAAI2M,EAAI,OAAJ,KAGZhI,EAAQmE,c,qCAxEd,SAAqB5F,GACnBA,EAAM8I,QAAQhP,KAAKiG,iB,+BAFjBmK,CAAkBxE,I,gSCZjB,IAAM6E,GAAb,WAKE,WAAYC,EAAqBtI,EAA0BxH,I,4FAAiB,+BAJvD,GAIuD,2BAHlD,GAGkD,eAFtD,MAGpBZ,KAAK0Q,YAAcA,EACnB1Q,KAAKoI,iBAAmBA,EAGxB,IAFA,IAAM7H,EAAO,GAEJoQ,EAAU,EAAGA,EAAUvI,EAAkBuI,GAAW,EAAG,CAC9DpQ,EAAKoQ,GAAW,GAChB,IAAK,IAAIC,EAAY,EAAGA,EAAYF,EAAaE,GAAa,EAC5DrQ,EAAKoQ,GAASC,GAAahQ,EAAI+P,GAASC,GAAWhK,OAC/CiK,OAAOjQ,EAAI+P,GAASC,IACpBE,IAIR9Q,KAAKO,KAAO,IAAIH,EAAOJ,KAAK0Q,YAAa1Q,KAAKoI,iBAAkB7H,G,QAnBpE,O,EAAA,G,EAAA,wBAsBE,SAAUwQ,GACR,OAAO/Q,KAAKO,KAAKM,IAAIkQ,KAvBzB,iCA0BE,WACE,OAAO/Q,KAAKoI,mBA3BhB,sBA8BE,SAAS4I,EAAgBC,GACvB,OAAOjR,KAAKO,KAAK2Q,MAAM,EAAGF,EAAQhR,KAAKO,KAAKF,KAAM4Q,Q,kBA/BtD,KCFA,MAAM,GAA+BrR,QAAQ,a,uKCGtC,IAAMuR,GAAb,yB,4FAAA,S,QAAA,O,EAAA,E,EAAA,sBACE,SAAeC,GACb,OAAO,IAAI1J,SAAQ,SAACC,GAClB0J,GAAU,CACRC,UAAU,EACVrN,OAAQ,QAEPsN,SAASH,GACTI,MAAK,SAAC5Q,GACL,IAAMwH,EAAmBxH,EAAIgG,OACvB8J,EAAc9P,EAAI,GAAGgG,OAErB6K,EAAU,IAAIhB,GAAQC,EAAatI,EAAkBxH,GAC3D+G,EAAQ8J,YAblB,M,eAAA,M,WAAA,K,gSCDO,IAAeC,GAAtB,yB,4FAAA,6BACwB,GADxB,YAEgB,GAFhB,uBAG2B,G,QAH3B,O,EAAA,G,EAAA,2BAKE,SAAaT,GAEX,OADAjR,KAAKiR,UAAYA,EACVjR,OAPX,kBAUE,SAAK2R,GAEH,OADA3R,KAAK2R,EAAIA,EACF3R,OAZX,6BAeE,SAAgB4R,GAEd,OADA5R,KAAK4R,aAAeA,EACb5R,U,kBAjBX,K,+/BCEO,IAAM6R,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,uBACE,SAAS3L,GACPlG,KAAK8R,KAAK5L,EAAOlG,KAAK4R,aAAc5R,KAAK2R,KAF7C,kBAKE,SAAKzL,EAAe0L,EAAsBD,GACxC,IAAMI,EAAQ,GACRC,EAAQ,KAEd9L,EAAMsG,GAAK9K,IAAiBC,QAC1B,iBACAD,IAAiBC,QAAQ,4BAA6BuE,EAAMsG,GAAIuF,GAChErQ,IAAiBC,QAAQ,4BAA6BuE,EAAMuC,GAAI,EAAIsJ,IAEtE,IAAME,EAAavQ,IAAiBC,QAClC,0BACAuE,EAAMsG,GACN,EAAI7I,KAAKkB,IAAIkN,EAAOJ,IAGtBzL,EAAMuG,GAAK/K,IAAiBC,QAC1B,iBACAD,IAAiBC,QAAQ,4BAA6BuE,EAAMuG,GAAIsF,GAChErQ,IAAiBC,QAAQ,4BAA6BuE,EAAMuC,GAAI,EAAIsJ,IAEtE,IAAMG,EAAaxQ,IAAiBC,QAClC,OACAD,IAAiBC,QACf,4BACAuE,EAAMuG,GACN,EAAI9I,KAAKkB,IAAImN,EAAOL,KAIxBzL,EAAMqB,EAAI7F,IAAiBC,QACzB,sBACAuE,EAAMqB,EACN7F,IAAiBC,QACf,4BACAD,IAAiBC,QAAQ,sBAAuBsQ,EAAYC,GAC5DN,IAIJ1L,EAAMwG,GAAKhL,IAAiBC,QAC1B,iBACAD,IAAiBC,QAAQ,4BAA6BuE,EAAMwG,GAAIqF,GAChErQ,IAAiBC,QAAQ,4BAA6BuE,EAAMwC,GAAI,EAAIqJ,IAEtE,IAAMI,EAAczQ,IAAiBC,QACnC,0BACAuE,EAAMwG,GACN,EAAI/I,KAAKkB,IAAIkN,EAAOJ,IAEtBzL,EAAMyG,GAAKjL,IAAiBC,QAC1B,iBACAD,IAAiBC,QAAQ,4BAA6BuE,EAAMyG,GAAIqF,GAChEtQ,IAAiBC,QACf,4BACAD,IAAiBC,QAAQ,sBAAuBuE,EAAMwC,GAAIxC,EAAMwC,IAChE,EAAIsJ,IAGR,IAAMI,EAAc1Q,IAAiBC,QACnC,OACAD,IAAiBC,QACf,0BACAuE,EAAMyG,GACN,EAAIhJ,KAAKkB,IAAImN,EAAOL,KAIxBzL,EAAMlD,EAAItB,IAAiBC,QACzB,sBACAuE,EAAMlD,EACNtB,IAAiBC,QACf,4BACAD,IAAiBC,QAAQ,oBAAqBwQ,EAAaC,GAC3DR,S,kBA9ER,GAAmCF,I,+/BCA5B,IAAMW,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,uBACE,SAASnM,GACPlG,KAAKsS,gBAAgBpM,EAAOlG,KAAK4R,gBAFrC,6BAKE,SAAgB1L,EAAe0L,GAC7B1L,EAAMqB,EAAI7F,IAAiBC,QACzB,sBACAuE,EAAMqB,EACN7F,IAAiBC,QACf,4BACAuE,EAAMuC,GACNmJ,IAGJ1L,EAAMlD,EAAItB,IAAiBC,QACzB,sBACAuE,EAAMlD,EACNtB,IAAiBC,QACf,4BACAuE,EAAMwC,GACNkJ,S,kBArBR,GAA8CF,I,gSCSvC,IAAea,GAAtB,WAUE,WAAYzG,EAAkB0G,I,4FAA8B,2BATzC,MASyC,oBAR7B,MAQ6B,yBAP3C,GAO2C,qBAN/C,KAM+C,uBAL7C,IAK6C,mBAJlD,GAIkD,sBAH9C,GAG8C,uBAF7CC,UAGbzS,KAAK8L,QAAUA,EACf9L,KAAKwS,UAAYA,E,QAZrB,O,EAAA,E,EAAA,gCAeE,SAAkB9L,GAEhB,OADA1G,KAAK0G,eAAiBA,EACf1G,OAjBX,2BAoBE,SAAc0S,GAEZ,OADA1S,KAAK0S,WAAaA,EACX1S,OAtBX,6BAyBE,SAAgB4R,GAEd,OADA5R,KAAK4R,aAAeA,EACb5R,OA3BX,wBA8BE,SAAW2S,GAET,OADA3S,KAAK2S,QAAUA,EACR3S,OAhCX,4BAmCE,SAAe4S,GAEb,OADA5S,KAAK4S,YAAcA,EACZ5S,OArCX,6BAwCE,SACE6S,GAGA,OADA7S,KAAK6S,aAAeA,EACb7S,OA5CX,kBA+CE,SAAK8S,EAAuBC,GAC1B,IAAM9B,EAAY,IACZ7I,EAAmB0K,EAAaE,sBAChCC,EAAatP,KAAKuP,KAAK9K,EAAmB6I,GAE5CkC,EAAO,EACPC,EAAW,EACXlO,EAAU,EAEdlF,KAAK8L,QAAQqE,YAAYhP,SAAQ,SAAC+E,GAChChB,GAAWgB,EAAMhB,aAGnB,IACE,IAAImO,EAAQ,EAAGrC,EAAS,EACxBqC,EAAQjL,EACRiL,GAASpC,EAAWD,GAAU,EAC9B,CACA,IAAMsC,EAAkBtT,KAAK8L,QAAQvF,QACnCuM,EAAaS,SAASvC,EAAQC,IAE1BuC,EAAgBT,EAAcQ,SAASvC,EAAQC,GAE/CwC,EAAgBD,EAAclT,KAE9ByG,EAAO/G,KAAK8L,QAAQ/E,KAAKyM,EAAeF,GAG9CH,IAFcnT,KAAK8L,QAAQ9E,MAAMyM,GAGtB1M,EACN/G,KAAK0G,eAAiBxB,GAAY,EAAMuO,KAE1CR,GAAcQ,EAAgBxC,IAEjC,IAAK,IAAIpQ,EAAM,EAAGA,EAAMyS,EAAgBhT,KAAMO,GAAO,EACpCyS,EAAgBI,iBAAiB7S,IACjCyS,EAAgBI,iBAAiB7S,IAG9CuS,IAUN,MALe,CACbD,KAAAA,EACAC,UAAYA,EAAW,GAAKhL,EAAoB,Q,qBA7FtD,K,6nCCVO,IAAMuL,GAAb,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,mKACc,KADd,S,EAAA,G,EAAA,2BAGE,SAAa1C,GAEX,OADAjR,KAAKiR,UAAYA,EACVjR,OALX,mBAQE,SAAM8S,EAAuBC,GAA8B,WACnD3K,EAAmB0K,EAAaE,sBAChCY,GAAY,IAAIC,MAAOC,UAEzBnC,EAAI,EAER3R,KAAKwS,UAAUuB,aAAa/T,KAAKiR,WAEjC,IAAK,IAAI5P,EAAI,EAAGA,EAAIrB,KAAK0S,WAAYrR,GAAK,EAAG,CAG3C,IAFA,IAAM2S,GAAqB,IAAIH,MAAOC,UAGhCT,EAAQ,EAAGrC,EAAS,EACxBqC,EAAQjL,EACRiL,GAASrT,KAAKiR,UAAWD,GAAUhR,KAAKiR,UACxC,CACA,IAAMgD,GAAsB,IAAIJ,MAAOC,UACjCxN,EAAQwM,EAAaS,SAASvC,EAAQhR,KAAKiR,WAC3ChN,EAAS8O,EAAcQ,SAASvC,EAAQhR,KAAKiR,WAC7C1K,EAAUvG,KAAK8L,QAAQvF,QAAQD,GASrC,GAPAtG,KAAK8L,QAAQoI,SAAS5N,EAAOrC,EAAQsC,EAASvG,KAAK0G,gBAEnD1G,KAAK8L,QAAQqE,YAAYhP,SAAQ,SAAC+E,GAChC,EAAKsM,UAAU2B,OAAOxC,GACtB,EAAKa,UAAU4B,SAASlO,MAGtBlG,KAAK2S,QAAS,CAChB,IAAM0B,GAAmB,IAAIR,MAAOC,UACpC/L,QAAQ5D,IAAR,iBACY6M,EADZ,cACwB5I,EADxB,oBAEIiM,EAAmBJ,EAFvB,iBAGWI,EAAmBL,EAH9B,UAQJ,GAAIhU,KAAK2S,UACFtR,EAAI,GAAKrB,KAAK4S,aAAgB,EAAG,CACpC,IAAM0B,GAAU,IAAIT,MAAOC,UACrBS,EAAgBvU,KAAKmT,KAAKL,EAAcC,GAE9ChL,QAAQ5D,IAAR,qBACgB9C,EAAI,EADpB,oBACiCkT,EAAcpB,KAD/C,wBAEIoB,EAAcnB,SAFlB,qBAGekB,EAAUV,EAHzB,SAQ6B,mBAAtB5T,KAAK6S,cACd7S,KAAK6S,aAAa,CAChB2B,UAAWnT,U,kBA7DrB,GAAsCkR,I,uKCD/B,IAAekC,GAAtB,WAGE,WAAYhD,G,mGAAkB,U,EAAA,kB,sBAAA,K,SAFD,K,4CAEC,K,GAFD,KAG3BzR,KAAKyR,QAAUA,E,QAJnB,O,EAAA,G,EAAA,oBAOE,WACE,IACE,IAAId,EAAU,EACdA,EAAU3Q,KAAKyR,QAAQuB,sBACvBrC,GAAW,EAEX3Q,KAAK0U,eAAe/D,GAGtB,OAAO3Q,KAAKyR,a,kBAhBhB,K,k/HCCO,IAAMhP,GAAoB,SAACC,EAAYC,GAC5C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAKlB,IAFA,IAAMrC,EAAO,GAEJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAO8B,EAAGpC,KAAKG,GAAKG,GAItD,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMC,IAGzB8C,GAA0B,SAACX,EAAYtB,GAGlD,IAFA,IAAMb,EAAO,GAEJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAOO,EAIzC,OAAO,IAAIhB,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzBkD,GAAoB,SAACC,GAGhC,IAFA,IAAMnD,EAAO,GAEJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO8C,KAAKC,IAAIF,EAAEnD,KAAKG,GAAKG,IAI1C,IAAM8T,EAAa,IAAIvU,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,GACxCsD,EAAU,IAAIzD,EAAO,EAAGsD,EAAEpD,KAAMqU,EAAW7Q,aAAavD,MAAMwD,UAClEL,EAAErD,KACF,GAEF,OAAO,IAAID,EACTsD,EAAErD,KACFqD,EAAEpD,KACFmC,GAAkBkS,EAAY9Q,GAAStD,OAI9ByD,GAAc,SAACC,EAAgBC,GAG1C,IAFA,IAAM3D,EAAO,GAEJG,EAAM,EAAGA,EAAMwD,EAAY7D,KAAMK,GAAO,EAAG,CAClDH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMqD,EAAY5D,KAAMO,GAAO,EAC/CN,EAAKG,GAAKG,GAAO8C,KAAKQ,IAAID,EAAY3D,KAAKG,GAAKG,IAIpD,OAAO,IAAIT,EACT6D,EAAO5D,KACP4D,EAAO3D,KACP8D,GAAoBH,EAAQ,IAAI7D,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAMC,IAAOA,MACxEgB,OAGS8C,GAAqB,SAACX,GAGjC,IAFA,IAAMnD,EAAO,GAEJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO,GAAO,EAAM8C,KAAKC,KAAKF,EAAEnD,KAAKG,GAAKG,KAIxD,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvB+D,GAAqB,SAACZ,GAGjC,IAFA,IAAMnD,EAAO,GAEJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO6C,EAAEnD,KAAKG,GAAKG,IAAQ,EAAM6C,EAAEnD,KAAKG,GAAKG,IAI3D,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvBgE,GAAe,SAACN,EAAgBC,GAE3C,IADA,IAAMC,EAAM,GACHzD,EAAM,EAAGA,EAAMuD,EAAO5D,KAAMK,GAAO,EAAG,CAC7CyD,EAAIzD,GAAO,GACX,IAAK,IAAIG,EAAM,EAAGA,EAAMoD,EAAO3D,KAAMO,GAAO,EAC1CsD,EAAIzD,GAAKG,GAAO8C,KAAKQ,IAAIF,EAAO1D,KAAKG,GAAKG,IAM9C,IAHA,IAAM+T,EAAY,IAAIxU,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAM6D,GAEjD0Q,EAAM,GACHnU,EAAM,EAAGA,EAAMuD,EAAO5D,KAAMK,GAAO,EAAG,CAC7CmU,EAAInU,GAAO,GACX,IAAK,IAAIG,EAAM,EAAGA,EAAMoD,EAAO3D,KAAMO,GAAO,EAC1CgU,EAAInU,GAAKG,GAAO,EAAMoD,EAAO1D,KAAKG,GAAKG,GAM3C,IAHA,IAAMiU,EAAY,IAAI1U,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAMuU,GAEjDtU,EAAO,GACJG,EAAM,EAAGA,EAAMwD,EAAY7D,KAAMK,GAAO,EAAG,CAClDH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMqD,EAAY5D,KAAMO,GAAO,EAC/CN,EAAKG,GAAKG,GAAO8C,KAAKQ,IAAI,EAAMD,EAAY3D,KAAKG,GAAKG,IAG1D,IAAMkU,EAAe,IAAI3U,EAAO8D,EAAY7D,KAAM6D,EAAY5D,KAAMC,GAEpE,OAAOmE,GACLN,GAAoBH,EAAQ2Q,GAC5BxQ,GAAoB0Q,EAAWC,IAC/BxT,OAGSoD,GAAiB,SAACjB,GAE7B,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO,GAAO,EAAM8C,KAAKC,KAAK,EAAMF,EAAEnD,KAAKG,GAAKG,KAAS,EAGvE,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvBqE,GAAiB,SAAClB,GAE7B,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GACR,EACA8C,KAAKkB,IAAI,GAAO,EAAMlB,KAAKC,KAAK,EAAMF,EAAEnD,KAAKG,GAAKG,KAAS,EAAK,GAGtE,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvBuE,GAAiB,SAACpB,GAE7B,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO8C,KAAK9B,IAAI,EAAK6B,EAAEnD,KAAKG,GAAKG,IAG/C,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvBwE,GAAiB,SAACrB,GAE7B,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO6C,EAAEnD,KAAKG,GAAKG,GAAO,EAAI,EAAI,EAGhD,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvByE,GAAqB,SAACtB,GAEjC,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO8C,KAAKQ,IAAI,EAAIR,KAAKC,IAAIF,EAAEnD,KAAKG,GAAKG,KAGvD,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvB0E,GAAqB,SAACvB,GAEjC,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GACR,GAAK,EAAI8C,KAAKC,KAAKD,KAAKQ,IAAI,EAAIR,KAAKC,IAAIF,EAAEnD,KAAKG,GAAKG,OAG3D,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvB2E,GAAU,SAACxB,GAEtB,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO8C,KAAKkB,IAAInB,EAAEnD,KAAKG,GAAKG,GAAM,GAGhD,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,GAAMgB,OAG7B4D,GAAO,SAACzB,GAEnB,IADA,IAAMnD,EAAO,GACJG,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EAAG,CACxCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EACrCN,EAAKG,GAAKG,GAAO8C,KAAKwB,KAAKzB,EAAEnD,KAAKG,GAAKG,GAAO,MAGlD,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,IAGvB6E,GAAc,SAACnB,EAAgBC,GAE1C,IADA,IAAM3D,EAAO,GACJG,EAAM,EAAGA,EAAMuD,EAAO5D,KAAMK,GAAO,EAAG,CAC7CH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAMoD,EAAO3D,KAAMO,GAAO,EAC1CN,EAAKG,GAAKG,GACRoD,EAAO1D,KAAKG,GAAKG,GAAO8C,KAAKkB,IAAIX,EAAYxD,GAAKG,GAAM,GAG9D,OAAO,IAAIT,EAAO6D,EAAO5D,KAAM4D,EAAO3D,KAAMC,GAAMgB,OAGvC8D,GAAW,SAAC3C,EAAYC,GACnC,GAAID,EAAGpC,OAASqC,EAAGtC,KACjB,MAAM,IAAIuC,MAAJ,oCACyBF,EAAGpC,KAD5B,wBACgDqC,EAAGtC,KADnD,MAKR,IADA,IAAME,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,OAAQK,EAAK,CACtCH,EAAKG,GAAO,IAAIC,MAAMgC,EAAGrC,MACzB,IAAK,IAAIO,EAAM,EAAGA,EAAM8B,EAAGrC,OAAQO,EAAK,CACtCN,EAAKG,GAAKG,GAAO,EACjB,IAAK,IAAIQ,EAAI,EAAGA,EAAIqB,EAAGpC,OAAQe,EAC7Bd,EAAKG,GAAKG,IAAQ6B,EAAGnC,KAAKG,GAAKW,GAAKsB,EAAGpC,KAAKc,GAAGR,IAIrD,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMsC,EAAGrC,KAAMC,IAGzBmE,GAAiB,SAAChC,EAAYC,GACzC,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAIlB,IADA,IAAMrC,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAO8B,EAAGpC,KAAKG,GAAKG,GAGtD,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzB+E,GAAsB,SAAC5C,EAAYC,GAC9C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAIlB,IADA,IAAMrC,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAO8B,EAAGpC,KAAKG,GAAKG,GAGtD,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzBgF,GAAa,SAAC7C,EAAY8C,GAErC,IADA,IAAMjF,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,IAAQ8C,KAAK8B,SAAW,IAAO9B,KAAKwB,KAAK,EAAMK,GAG7D,OAAO,IAAIpF,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzBmF,GAAW,SAAChD,GAEvB,IADA,IAAMnC,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO,EAGrB,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAczB6D,GAAsB,SAAC1B,EAAYC,GAC9C,GAAID,EAAGrC,OAASsC,EAAGtC,KACjB,MAAM,IAAIuC,MAAM,0BAElB,GAAIF,EAAGpC,OAASqC,EAAGrC,KACjB,MAAM,IAAIsC,MAAM,0BAIlB,IADA,IAAMrC,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAO8B,EAAGpC,KAAKG,GAAKG,GAGtD,OAAO,IAAIT,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzBoF,GAA4B,SAACjD,EAAYtB,GAEpD,IADA,IAAMb,EAAO,GACJG,EAAM,EAAGA,EAAMgC,EAAGrC,KAAMK,GAAO,EAAG,CACzCH,EAAKG,GAAO,GACZ,IAAK,IAAIG,EAAM,EAAGA,EAAM6B,EAAGpC,KAAMO,GAAO,EACtCN,EAAKG,GAAKG,GAAO6B,EAAGnC,KAAKG,GAAKG,GAAOO,EAGzC,OAAO,IAAIhB,EAAOsC,EAAGrC,KAAMqC,EAAGpC,KAAMC,IAGzBqF,GAAY,SAAClC,GAExB,IADA,IAAMnD,EAAO,GACJM,EAAM,EAAGA,EAAM6C,EAAEpD,KAAMO,GAAO,EAAG,CACxCN,EAAKM,GAAO,GACZ,IAAK,IAAIH,EAAM,EAAGA,EAAMgD,EAAErD,KAAMK,GAAO,EACrCH,EAAKM,GAAKH,GAAOgD,EAAEnD,KAAKG,GAAKG,GAGjC,OAAO,IAAIT,EAAOsD,EAAErD,KAAMqD,EAAEpD,KAAMC,ICrV9ByU,GAAW,CAAEvF,UAAAA,GAAWW,UAAAA,IACxBzM,GAAO,CACXvD,OAAAA,GAEI6U,GAAS,CACb5H,aAAAA,GACAE,cAAAA,GACAI,UAAAA,GACAE,cAAAA,GACAJ,UAAAA,GACAyB,UAAAA,GACAK,aAAAA,GACAD,oBAAAA,IAEImB,GAAU,CACdU,eAAgBA,IAEZ+D,GAAa,CACjBrD,cAAAA,GACAQ,yBAAAA,IAEI8C,GAAW,CACfxB,iBAAAA,IAEIyB,GAAmB,CACvBC,yBC7CF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,mKACiC,SAAC1E,GAAD,OAAaA,KAD9C,S,EAAA,G,EAAA,6BAGE,SAAeA,GACb,IACE,IAAI2E,EAAe,EACnBA,EAAetV,KAAKyR,QAAQuB,sBAC5BsC,GAAgB,EAGhB,IADA,IAAM3E,EAAU3Q,KAAK+L,SAAS/L,KAAKyR,QAAQ8D,UAAUD,IAC5C5U,EAAM,EAAGA,EAAMV,KAAKyR,QAAQlR,KAAKA,KAAKF,KAAMK,GAAO,EAC1DV,KAAKyR,QAAQlR,KAAKA,KAAKG,GAAK4U,GAAgB3E,EAAQpQ,KAAKA,KAAKG,GAAK,KAX3E,yBAgBE,SAAYqL,GAEV,OADA/L,KAAK+L,SAAWA,EACT/L,U,kBAlBX,GAA8CyU,ID8C5Ce,8BE7CF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,8D,EAAA,G,EAAA,6BACE,SAAe7E,GAIb,IAHA,IAAI8E,EAAMC,EAAAA,EACN7T,GAAM,IAGJyT,EAAe,EACnBA,EAAetV,KAAKyR,QAAQuB,sBAC5BsC,GAAgB,EAGhB,IADA,IAAM3E,EAAU3Q,KAAKyR,QAAQ8D,UAAUD,GAC9B5U,EAAM,EAAGA,EAAMiQ,EAAQtQ,KAAMK,GAAO,EAC3C+U,EAAM9R,KAAK8R,IAAI9E,EAAQpQ,KAAKG,GAAK,IACjCmB,EAAM8B,KAAK9B,IAAI8O,EAAQpQ,KAAKG,GAAK,IAIrC,IAAMmC,EAASP,EAAAA,cACC,SAAUS,GACtB,OACGA,EAAE/C,KAAKiD,OAAOC,GAAGlD,KAAKiD,OAAOE,GAAKnD,KAAKsD,UAAUmS,MACjDzV,KAAKsD,UAAUzB,IAAM7B,KAAKsD,UAAUmS,QAGxCrS,UAAU,CAACpD,KAAKyR,QAAQlR,KAAKA,KAAKF,KAAML,KAAKyR,QAAQlR,KAAKA,KAAKD,OAC/DkD,aAAa,CACZiS,IAAAA,EACA5T,IAAAA,IAEJ7B,KAAKyR,QAAQlR,KAAKA,KAAOsC,EAAO7C,KAAKyR,QAAQlR,KAAKA,W,kBA7BtD,GAAmDkU,IF8CjDkB,mCG/CF,a,mOAAA,U,QAAA,G,EAAA,E,kZAAA,0KAC+B,QAD/B,S,EAAA,G,EAAA,6BAGE,SAAehF,GAMb,IANoC,WAC9BiF,EAAa,GACfC,EAAuB,EACvBtU,EAAM,EACNuU,EAAc,EAGZR,EAAe,EACnBA,EAAetV,KAAKyR,QAAQuB,sBAC5BsC,GAAgB,EAGhB,IADA,IAAM3E,EAAU3Q,KAAKyR,QAAQ8D,UAAUD,GAC9B5U,EAAM,EAAGA,EAAMiQ,EAAQpQ,KAAKF,KAAMK,GAAO,EAC5CqV,MAAMpF,EAAQjQ,GAAK,IACrBkV,EAAWvP,KAAK,CACd3F,IAAAA,EACAG,IAAK8P,KAGPpP,GAAOoP,EAAQjQ,GAAK,GACpBmV,KAKwB,SAA1B7V,KAAKgW,mBACPF,EAAcvU,EAAMsU,GAGtBD,EAAWzU,SAAQ,YAAkB,IAAfT,EAAe,EAAfA,IAAKG,EAAU,EAAVA,IACzB,EAAK4Q,QAAQlR,KAAKA,KAAKG,GAAKG,GAAOiV,OAjCzC,iCAqCE,SAAoB3O,GAElB,OADAnH,KAAKgW,iBAAmB7O,EACjBnH,U,kBAvCX,GAAwDyU,KHiDlDwB,GAAe,CACnBC,eD0TF,a,mOAAA,U,IAAA,G,EAAA,E,kZACE,aAAc,a,4FAAA,UACZ,gBAEKpQ,UAAU,WAAYT,IAC3B,EAAKS,UAAU,iBAAkBpB,IACjC,EAAKoB,UAAU,sBAAuBR,IACtC,EAAKQ,UAAU,aAAcP,IAC7B,EAAKO,UAAU,WAAYJ,IAC3B,EAAKI,UAAU,sBAAuB1B,IACtC,EAAK0B,UAAU,4BAA6BH,IAC5C,EAAKG,UAAU,oBAAqBrD,IACpC,EAAKqD,UAAU,0BAA2BzC,IAC1C,EAAKyC,UAAU,oBAAqBrC,IACpC,EAAKqC,UAAU,cAAe9B,IAC9B,EAAK8B,UAAU,qBAAsBzB,IACrC,EAAKyB,UAAU,qBAAsBxB,IACrC,EAAKwB,UAAU,eAAgBvB,IAC/B,EAAKuB,UAAU,iBAAkBnB,IACjC,EAAKmB,UAAU,iBAAkBlB,IACjC,EAAKkB,UAAU,iBAAkBhB,IACjC,EAAKgB,UAAU,iBAAkBf,IACjC,EAAKe,UAAU,qBAAsBd,IACrC,EAAKc,UAAU,qBAAsBb,IACrC,EAAKa,UAAU,UAAWZ,IAC1B,EAAKY,UAAU,OAAQX,IACvB,EAAKW,UAAU,cAAeV,IAC9B,EAAKU,UAAU,YAAaF,IA1BhB,EADhB,UAAoC/F,GCzTlCgG,eAAAA,EACAsQ,elCjD4B,SAAChP,GAC7BpB,EAAqBoB,I","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/computation/abstract.tsx","webpack://impulse-ts/./src/typescript/math/matrix.tsx","webpack://impulse-ts/./src/typescript/computation/computationgpu.tsx","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/computation/utils.tsx","webpack://impulse-ts/./src/typescript/network.tsx","webpack://impulse-ts/./src/typescript/types.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagation1dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationto3dto1d.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtomaxpool.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/backpropagationtoconv.tsx","webpack://impulse-ts/./src/typescript/layer/backpropagation/factory.tsx","webpack://impulse-ts/./src/typescript/builder/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract.tsx","webpack://impulse-ts/./src/typescript/layer/abstract1d.tsx","webpack://impulse-ts/./src/typescript/layer/softmax.tsx","webpack://impulse-ts/./src/typescript/layer/logistic.tsx","webpack://impulse-ts/./src/typescript/layer/tanh.tsx","webpack://impulse-ts/./src/typescript/layer/relu.tsx","webpack://impulse-ts/./src/typescript/layer/softplus.tsx","webpack://impulse-ts/./src/typescript/math/math.tsx","webpack://impulse-ts/./src/typescript/layer/abstract3d.tsx","webpack://impulse-ts/./src/typescript/layer/conv.tsx","webpack://impulse-ts/./src/typescript/layer/fullyconnected.tsx","webpack://impulse-ts/./src/typescript/layer/maxpool.tsx","webpack://impulse-ts/./src/typescript/builder/builder1d.tsx","webpack://impulse-ts/./src/typescript/builder/builder3d.tsx","webpack://impulse-ts/./src/typescript/dataset/dataset.tsx","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/datasetbuilder.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/adam.tsx","webpack://impulse-ts/./src/typescript/trainer/optimizer/gradientdescent.tsx","webpack://impulse-ts/./src/typescript/trainer/abstract.tsx","webpack://impulse-ts/./src/typescript/trainer/minibatch.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/abstract.tsx","webpack://impulse-ts/./src/typescript/computation/computationcpu.tsx","webpack://impulse-ts/./src/typescript/main.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/callback.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/minmaxscaling.tsx","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/missingdata.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Matrix } from \"../math/matrix\";\n\nexport class AbstractComputation {\n  protected kernels = {};\n\n  addKernel(name: string, func: Function): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(\n    name: string,\n    ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]\n  ): Matrix {\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { getComputation } from \"../computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          this.data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          this.data[row][col] = arr[col][row];\n        } else {\n          this.data[row][col] = 0;\n        }\n      }\n    }\n    return this;\n  }\n\n  toBuffer(): ArrayBuffer {\n    const result = new ArrayBuffer(this.rows * this.cols * 64);\n    const view = new DataView(result, 0, this.rows * this.cols * 64);\n    this.data.forEach((num, i) => {\n      view.setFloat64(i, num);\n    });\n    return result;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        sum += this.data[row][col];\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this);\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(\n    startRow: number,\n    startCol: number,\n    blockRows: number,\n    blockCols: number\n  ): Matrix {\n    const data = [];\n\n    for (\n      let row = startRow, newRow = 0;\n      row < this.rows && row < startRow + blockRows;\n      row += 1, newRow += 1\n    ) {\n      data[row] = new Array(blockCols);\n      for (\n        let col = startCol, newCol = 0;\n        col < this.cols && col < startCol + blockCols;\n        col += 1, newCol += 1\n      ) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row][col] = tmp.data[row][0];\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n\nexport const cols = (m: Matrix): number => {\n  return m.cols;\n};\n","import { AbstractComputation } from \"./abstract\";\nimport { Matrix } from \"../math/matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  const result = new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(data, divider).data\n  );\n  return result;\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(\n      output,\n      new Matrix(\n        output.rows,\n        output.cols,\n        kernel(predictions.data) as number[][]\n      )\n    ).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        a[this.thread.x][this.thread.y] *\n        (1.0 - a[this.thread.x][this.thread.y])\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return elementWiseAdd(\n    elementWiseMultiply(\n      output,\n      new Matrix(output.rows, output.cols, kernel(output.data) as number[][])\n    ),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(\n        predictions.rows,\n        predictions.cols,\n        kernel3(predictions.data) as number[][]\n      )\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return (\n        1.0 -\n        Math.pow(\n          2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0,\n          2.0\n        )\n      );\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return (\n        b[this.thread.x][this.thread.y] -\n        Math.pow(a[this.thread.x][this.thread.y], 2)\n      );\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    kernel(output.data) as number[][]\n  ).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return (Math.random() - 0.5) * Math.sqrt(2.0 / this.constants.parameter);\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"elementWiseAdd\", elementWiseAdd);\n    this.addKernel(\"elementWiseSubtract\", elementWiseSubtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseMultiplyNumber\", elementWiseMultiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"elementWiseDivideNumber\", elementWiseDivideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractComputation } from \"./abstract\";\nimport { ComputationGPU } from \"./computationgpu\";\n\nlet currentComputation: AbstractComputation = new ComputationGPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Dimension, Layers } from \"./types\";\nimport { Matrix } from \"./math/matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"./computation/utils\";\n\nclass Network {\n  private dimensions: Dimension = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(\n    X: Matrix,\n    Y: Matrix,\n    predictions: Matrix,\n    regularization: number\n  ): void {\n    const m = X.cols;\n\n    let delta = getComputation().execute(\"elementWiseSubtract\", predictions, Y);\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      delta = this.layers[layer]\n        .getBackPropagation()\n        .propagate(X, m, regularization, delta);\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import {\n  SoftmaxLayer,\n  LogisticLayer,\n  TanhLayer,\n  ReluLayer,\n  SoftplusLayer,\n  AbstractLayer,\n} from \"./layer\";\nimport { ConvLayer } from \"./layer/\";\nimport { MaxPoolLayer } from \"./layer/\";\nimport { FullyConnectedLayer } from \"./layer/\";\nimport { PurelinLayer } from \"./layer/purelin\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | AbstractLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers = null;\n  protected previousLayer: Layers = null;\n\n  constructor(layer: Layers, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix;\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousActivations =\n      this.previousLayer !== null ? this.previousLayer.A : input;\n    const delta = getComputation().execute(\n      \"multiply\",\n      sigma,\n      previousActivations.transpose().conjugate()\n    );\n    this.layer.gW = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\n        \"elementWiseDivideNumber\",\n        delta,\n        numberOfExamples\n      ),\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        this.layer.W,\n        regularization / numberOfExamples\n      )\n    );\n    this.layer.gb = getComputation().execute(\n      \"elementWiseDivideNumber\",\n      sigma.rowwiseSum(),\n      numberOfExamples\n    );\n    if (this.previousLayer !== null) {\n      return getComputation().execute(\n        \"elementWiseMultiply\",\n        getComputation().execute(\"multiply\", this.layer.W.transpose(), sigma),\n        this.previousLayer.derivative(this.previousLayer.A)\n      );\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const prevLayer = this.previousLayer;\n    const result = getComputation().execute(\n      \"setZeros\",\n      new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)\n    );\n\n    const filterSize = prevLayer.getFilterSize();\n    const stride = prevLayer.getStride();\n    const inputWidth = prevLayer.getWidth();\n    const inputHeight = prevLayer.getHeight();\n    const inputDepth = prevLayer.getDepth();\n    const outputWidth = prevLayer.getOutputWidth();\n    const outputHeight = prevLayer.getOutputHeight();\n    const outputDepth = prevLayer.getOutputDepth();\n\n    for (let m = 0; m < numberOfExamples; m++) {\n      for (let c = 0; c < outputDepth; c++) {\n        for (let h = 0; h < outputHeight; h++) {\n          for (let w = 0; w < outputWidth; w++) {\n            const vertStart = stride * h;\n            const vertEnd = vertStart + filterSize;\n            const horizStart = stride * w;\n            const horizEnd = horizStart + filterSize;\n\n            let _max = -Infinity;\n            const inputOffset = inputHeight * inputWidth * c;\n            const outputOffset = outputHeight * outputWidth * c;\n            let maxX = 0;\n            let maxY = 0;\n\n            for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n              for (\n                let x = 0, hStart = horizStart;\n                x < filterSize;\n                x++, hStart++\n              ) {\n                if (\n                  _max <\n                  prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][\n                    m\n                  ]\n                ) {\n                  _max =\n                    prevLayer.Z.data[\n                      inputOffset + vStart * inputWidth + hStart\n                    ][m];\n                  maxX = hStart;\n                  maxY = vStart;\n                }\n              }\n            }\n\n            result.data[inputOffset + maxY * inputWidth + maxX][m] =\n              sigma[outputOffset + h * outputWidth + w][m];\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n}\n","import { AbstractBackPropagation } from \"./abstract\";\nimport { Matrix } from \"../../math/matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D = null;\n\n  propagate(\n    input: Matrix,\n    numberOfExamples: number,\n    regularization: number,\n    sigma: Matrix\n  ): Matrix {\n    const previousLayer = this.previousLayer;\n\n    const padding = previousLayer.getPadding();\n    const stride = previousLayer.getStride();\n    const filterSize = previousLayer.getFilterSize();\n    const outputWidth = previousLayer.getOutputWidth();\n    const outputHeight = previousLayer.getOutputHeight();\n    const outputDepth = previousLayer.getOutputDepth();\n    const inputWidth = previousLayer.getWidth();\n    const inputHeight = previousLayer.getHeight();\n    const inputDepth = previousLayer.getDepth();\n\n    const tmpResult = getComputation().execute(\n      \"setZeros\",\n      new Matrix(\n        (inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth,\n        numberOfExamples\n      )\n    );\n\n    const result = new Matrix(\n      inputWidth * inputHeight * inputDepth,\n      numberOfExamples\n    );\n\n    const aPrev = previousLayer.derivative(previousLayer.A);\n\n    previousLayer.gW = getComputation().execute(\"setZeros\", previousLayer.gW);\n    previousLayer.gb = getComputation().execute(\"setZeros\", previousLayer.gb);\n\n    for (let m = 0; m < numberOfExamples; m++) {\n      for (let c = 0; c < outputDepth; c++) {\n        for (let h = 0; h < outputHeight; h++) {\n          for (let w = 0; w < outputWidth; w++) {\n            const vertStart = stride * h;\n            const vertEnd = vertStart + filterSize;\n            const horizStart = stride * w;\n            const horizEnd = horizStart + filterSize;\n\n            // filter loop\n            for (let d = 0; d < inputDepth; d++) {\n              for (\n                let y = 0, vertical = vertStart, verticalPad = -padding;\n                y < filterSize;\n                y++, vertical++, verticalPad++\n              ) {\n                for (\n                  let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                  x < filterSize;\n                  x++, horizontal++, horizontalPad++\n                ) {\n                  tmpResult[\n                    d *\n                      (inputWidth + 2 * padding) *\n                      (inputHeight + 2 * padding) +\n                      vertical * (inputWidth + 2 * padding) +\n                      horizontal\n                  ][m] +=\n                    previousLayer.W.data[c][\n                      d * filterSize * filterSize + y * filterSize + x\n                    ] *\n                    sigma[c * outputWidth * outputHeight + h * outputWidth + w][\n                      m\n                    ];\n\n                  let z = 0;\n                  if (padding == 0) {\n                    z =\n                      previousLayer.Z.data[\n                        d * inputWidth * inputHeight +\n                          vertical * inputWidth +\n                          horizontal\n                      ][m];\n                  } else {\n                    if (\n                      verticalPad >= 0 &&\n                      horizontalPad >= 0 &&\n                      verticalPad < inputHeight &&\n                      horizontalPad < inputWidth\n                    ) {\n                      z =\n                        previousLayer.Z.data[\n                          d * inputWidth * inputHeight +\n                            verticalPad * inputWidth +\n                            horizontalPad\n                        ][m];\n                    }\n                  }\n\n                  previousLayer.gW.data[c][\n                    d * filterSize * filterSize + y * filterSize + x\n                  ] +=\n                    (z *\n                      sigma[\n                        c * (outputWidth * outputHeight) + h * outputWidth + w\n                      ][m]) /\n                    numberOfExamples;\n                }\n              }\n            }\n\n            previousLayer.gb.data[c][0] +=\n              sigma[c * (outputWidth * outputHeight) + h * outputWidth + w][m] /\n              numberOfExamples;\n          }\n        }\n      }\n\n      if (padding > 0) {\n        // unpad\n        for (let c = 0; c < inputDepth; c++) {\n          for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n            for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n              if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight) {\n                result[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                  tmpResult[\n                    c *\n                      (inputWidth + 2 * padding) *\n                      (inputHeight + 2 * padding) +\n                      y * (inputWidth + 2 * padding) +\n                      x\n                  ][m];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (padding > 0) {\n      return result;\n    }\n\n    return tmpResult;\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./backpropagation1dto1d\";\nimport { Backpropagation3Dto1D } from \"./backpropagationto3dto1d\";\nimport { BackpropagationToMaxPool } from \"./backpropagationtomaxpool\";\nimport { BackpropagationToConv } from \"./backpropagationtoconv\";\nimport { AbstractBackPropagation } from \"./abstract\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (\n        previousLayer.is1D() ||\n        previousLayer.getType() == LayerType.fullyconnected\n      ) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/factory\";\nimport { AbstractLayer } from \"../layer\";\n\nabstract class AbstractBuilder {\n  protected dimensions: Dimension = null;\n  protected lastLayer: Layers = null;\n  protected network: Network = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(\n    type: Layers,\n    callback: (layer: AbstractLayer) => void = null\n  ): AbstractBuilder {\n    const layer = new type();\n\n    if (typeof callback === \"function\") {\n      callback(layer);\n    }\n\n    if (this.lastLayer === null) {\n      this.firstLayerTransition(layer);\n    } else {\n      layer.transition(this.lastLayer);\n    }\n\n    layer.configure();\n    layer.setBackPropagation(\n      BackpropagationFactory.create(this.lastLayer, layer)\n    );\n\n    this.network.addLayer(layer);\n    this.lastLayer = layer;\n\n    return this;\n  }\n\n  getNetwork(): Network {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractBuilder };\n","import { Matrix } from \"../math/matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/abstract\";\nimport { getComputation } from \"../computation/utils\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers = null;\n  protected backPropagation: AbstractBackPropagation = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"multiply\", this.W, input),\n      this.b.replicate(1, input.cols)\n    );\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): number;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension): AbstractLayer;\n\n  abstract getSize(): number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W);\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./abstract\";\nimport { Dimension, Layers } from \"../types\";\nimport { getComputation } from \"../computation/utils\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width);\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, this.width);\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"setZeros\", this.gW);\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"setZeros\", this.gb);\n\n    this.cW.resize(this.height, this.width);\n    this.cW = getComputation().execute(\"setZeros\", this.cW);\n\n    this.cb.resize(this.height, 1);\n    this.cb = getComputation().execute(\"setZeros\", this.cb);\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"setZeros\", this.vW);\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"setZeros\", this.cb);\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize());\n    } else if (previousLayer.is3D()) {\n      this.setWidth(\n        previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth()\n      );\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension): AbstractLayer1D {\n    this.setHeight(value[0]);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticDerivative\", m);\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions);\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhDerivative\", m);\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m);\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../math/matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./abstract1d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusDerivative\", m);\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./matrix\";\nimport { getComputation } from \"../computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols =\n    ((width - kernel_w + 2 * pad_w) / stride_w + 1) *\n    ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"setZeros\", new Matrix(rows, cols));\n\n  for (\n    let boundingY = -pad_h;\n    boundingY + kernel_h <= height + pad_h;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = -pad_w;\n      boundingX + kernel_w <= width + pad_w;\n      boundingX += stride_w\n    ) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (\n              boundingY + y >= 0 &&\n              boundingX + x >= 0 &&\n              boundingX + x < width &&\n              boundingY + y < height\n            ) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[\n                  (y + boundingY) * width + boundingX + x + inputOffset\n                ][0];\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\n    \"setZeros\",\n    new Matrix(resultWidth * resultHeight * resultDepth, 1)\n  );\n\n  for (\n    let boundingY = 0;\n    boundingY + kernel_h <= height;\n    boundingY += stride_h\n  ) {\n    for (\n      let boundingX = 0;\n      boundingX + kernel_w <= width;\n      boundingX += stride_w\n    ) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(\n              _max,\n              input.data[\n                inputOffset + (y + boundingY) * width + boundingX + x\n              ][0]\n            );\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { AbstractLayer } from \"./abstract\";\nimport { Dimension } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: AbstractLayer): AbstractLayer3D {\n    if (previousLayer.is3D()) {\n      this.setSize([\n        previousLayer.getOutputWidth(),\n        previousLayer.getOutputHeight(),\n        previousLayer.getOutputDepth(),\n      ]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): AbstractLayer3D {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n}\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../math/matrix\";\nimport { im2col } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\nimport { getComputation } from \"../computation/utils\";\n\nclass ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.W = getComputation().execute(\n      \"fillRandom\",\n      this.W,\n      this.width * this.height * this.depth\n    );\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01);\n\n    this.gW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.gW = getComputation().execute(\"setZeros\", this.gW);\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"setZeros\", this.gb);\n\n    this.cW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.cW = getComputation().execute(\"setZeros\", this.gb);\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = getComputation().execute(\"setZeros\", this.cb);\n\n    this.vW.resize(\n      this.numFilters,\n      this.filterSize * this.filterSize * this.depth\n    );\n    this.vW = getComputation().execute(\"setZeros\", this.vW);\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"setZeros\", this.vb);\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = getComputation()\n        .execute(\n          \"elementWiseAdd\",\n          getComputation().execute(\"multiply\", this.W, conv),\n          this.b.replicate(1, input.cols)\n        )\n        .rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m);\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m);\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { ConvLayer };\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() *\n          previousLayer.getOutputHeight() *\n          previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\n          \"Invalid usage. Cannot fully connect with previous non maxpool layer.\"\n        );\n      }\n    } else {\n      throw new Error(\n        \"Invalid usage. Cannot fully connect with previous 1D layer.\"\n      );\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    throw new Error(\"Unsupported\");\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../math/matrix\";\nimport { maxpool } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./abstract3d\";\nimport { BackpropagationToMaxPool } from \"./backpropagation/backpropagationtomaxpool\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize: number;\n  stride: number;\n\n  configure(): void {\n    this.backPropagation = new BackpropagationToMaxPool(\n      this,\n      this.previousLayer\n    );\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(\n      this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(),\n      input.cols\n    );\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\n\nclass Builder1D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"dimensions\"]);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder1D };\n","import { AbstractBuilder } from \"./abstract\";\nimport { Layers } from \"../types\";\nimport Network from \"../network\";\nimport * as fs from \"fs\";\nimport {\n  LogisticLayer,\n  ReluLayer,\n  SoftmaxLayer,\n  SoftplusLayer,\n  TanhLayer,\n} from \"../layer/\";\nimport { ConvLayer } from \"../layer/\";\nimport { MaxPoolLayer } from \"../layer/\";\n\nclass Builder3D extends AbstractBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setSize(this.dimensions);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new Builder3D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            layerClass = ConvLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass, (layer) => {\n              layer.setSize(layerData[\"dimensions\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            layerClass = MaxPoolLayer;\n            builder.createLayer(layerClass);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        network.getLayers().forEach((layer, i) => {\n          layer.W = json[\"layers\"][\"W\"];\n          layer.b = json[\"layers\"][\"b\"];\n        });\n\n        resolve(network);\n      });\n    });\n  }\n}\n\nexport { Builder3D };\n","import { Matrix } from \"../math/matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = arr[example][dataIndex].length\n          ? Number(arr[example][dataIndex])\n          : NaN;\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix {\n    return this.data.block(0, offset, this.data.rows, batchSize);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n\n    layer.vW = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.vW, beta1),\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.gW, 1 - beta1)\n    );\n    const wCorrected = getComputation().execute(\n      \"elementWiseDivideNumber\",\n      layer.vW,\n      1 - Math.pow(beta1, t)\n    );\n\n    layer.cW = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.cW, beta1),\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.gW, 1 - beta1)\n    );\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.cW,\n        1 - Math.pow(beta2, t)\n      )\n    );\n\n    layer.W = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.W,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", wCorrected, sCorrected),\n        learningRate\n      )\n    );\n\n    layer.vb = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.vb, beta1),\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.gb, 1 - beta1)\n    );\n    const wCorrected2 = getComputation().execute(\n      \"elementWiseDivideNumber\",\n      layer.vb,\n      1 - Math.pow(beta1, t)\n    );\n    layer.cb = getComputation().execute(\n      \"elementWiseAdd\",\n      getComputation().execute(\"elementWiseMultiplyNumber\", layer.cb, beta2),\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb),\n        1 - beta2\n      )\n    );\n    const sCorrected2 = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\n        \"elementWiseDivideNumber\",\n        layer.cb,\n        1 - Math.pow(beta2, t)\n      )\n    );\n\n    layer.b = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.b,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        getComputation().execute(\"elementWiseDivide\", wCorrected2, sCorrected2),\n        learningRate\n      )\n    );\n  }\n}\n","import { AbstractOptimizer } from \"./abstract\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.W,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gW,\n        learningRate\n      )\n    );\n    layer.b = getComputation().execute(\n      \"elementWiseSubtract\",\n      layer.b,\n      getComputation().execute(\n        \"elementWiseMultiplyNumber\",\n        layer.gb,\n        learningRate\n      )\n    );\n  }\n}\n","import Network from \"../network\";\nimport { AbstractOptimizer } from \"./optimizer/abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network = null;\n  optimizer: AbstractOptimizer = null;\n  regularization = 0;\n  iterations = 1000;\n  learningRate = 0.1;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = Function;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(\n    stepCallback: (data: StepCallbackParameters) => void\n  ): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    this.network.getLayers().forEach((layer) => {\n      penalty += layer.penalty();\n    });\n\n    for (\n      let batch = 0, offset = 0;\n      batch < numberOfExamples;\n      batch += batchSize, offset += 1\n    ) {\n      const predictedOutput = this.network.forward(\n        inputDataset.getBatch(offset, batchSize)\n      );\n      const correctOutput = outputDataset.getBatch(offset, batchSize);\n\n      const miniBatchSize = correctOutput.cols;\n\n      const loss = this.network.loss(correctOutput, predictedOutput);\n      const error = this.network.error(miniBatchSize);\n\n      cost +=\n        (error * loss +\n          (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n        // TODO: fix it\n        (numBatches * (miniBatchSize / batchSize));\n\n      for (let col = 0; col < predictedOutput.cols; col += 1) {\n        const index1 = predictedOutput.colMaxCoeffIndex(col);\n        const index2 = predictedOutput.colMaxCoeffIndex(col);\n\n        if (index1 === index2) {\n          accuracy++;\n        }\n      }\n    }\n\n    const result = {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n\n    return result;\n  }\n}\n","import { AbstractTrainer } from \"./abstract\";\nimport { Dataset } from \"../dataset/dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): void {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    this.optimizer.setBatchSize(this.batchSize);\n\n    for (let i = 0; i < this.iterations; i += 1) {\n      const startIterationTime = new Date().getTime();\n\n      for (\n        let batch = 0, offset = 0;\n        batch < numberOfExamples;\n        batch += this.batchSize, offset += this.batchSize\n      ) {\n        const startIterationTime2 = new Date().getTime();\n        const input = inputDataset.getBatch(offset, this.batchSize);\n        const output = outputDataset.getBatch(offset, this.batchSize);\n        const forward = this.network.forward(input);\n\n        this.network.backward(input, output, forward, this.regularization);\n\n        this.network.getLayers().forEach((layer) => {\n          this.optimizer.setT(++t);\n          this.optimizer.optimize(layer);\n        });\n\n        if (this.verbose) {\n          const endIterationTime = new Date().getTime();\n          console.log(\n            `Batch: ${offset} / ${numberOfExamples} | Time: ${\n              endIterationTime - startIterationTime2\n            } ms | ${endIterationTime - startIterationTime} ms.`\n          );\n        }\n      }\n\n      if (this.verbose) {\n        if ((i + 1) % this.verboseStep === 0) {\n          const endTime = new Date().getTime();\n          const currentResult = this.cost(inputDataset, outputDataset);\n\n          console.log(\n            `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${\n              currentResult.accuracy\n            }% | Time: ${endTime - startTime} ms.`\n          );\n        }\n      }\n\n      if (typeof this.stepCallback === \"function\") {\n        this.stepCallback({\n          iteration: i,\n        });\n      }\n    }\n  }\n}\n","import { Dataset } from \"../dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  apply(): Dataset {\n    for (\n      let example = 0;\n      example < this.dataset.getNumberOfExamples();\n      example += 1\n    ) {\n      this.applyToExample(example);\n    }\n\n    return this.dataset;\n  }\n\n  abstract applyToExample(example: number): void;\n}\n","import { AbstractComputation } from \"./abstract\";\nimport { Matrix } from \"../math/matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const elementWiseDivideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(\n    m.rows,\n    1\n  );\n  return new Matrix(\n    m.rows,\n    m.cols,\n    elementWiseDivide(calculated, divider).data\n  );\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(predictions.data[row][col]);\n    }\n  }\n\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, data)).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] * (1.0 - m.data[row][col]);\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      log[row][col] = Math.log(output.data[row][col]);\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      sub[row][col] = 1.0 - output.data[row][col];\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(1.0 - predictions.data[row][col]);\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return elementWiseAdd(\n    elementWiseMultiply(output, logMatrix),\n    elementWiseMultiply(subMatrix, logSubMatrix)\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] =\n        1.0 -\n        Math.pow(2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0, 2.0);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.max(0.0, m.data[row][col]);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] > 0 ? 1 : 0;\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] =\n        1 / (1 + Math.exp(-Math.log(1 + Math.exp(m.data[row][col]))));\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.pow(m.data[row][col], 2);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      data[row][col] =\n        output.data[row][col] - Math.pow(predictions[row][col], 2);\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(\n      `DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`\n    );\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        data[row][col] += m1.data[row][i] * m2.data[i][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const elementWiseAdd = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseSubtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] - m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() - 0.5) * Math.sqrt(2.0 / parameter);\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] * m2.data[row][col];\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] * num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      data[col][row] = m.data[row][col];\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"elementWiseAdd\", elementWiseAdd);\n    this.addKernel(\"elementWiseSubtract\", elementWiseSubtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseMultiplyNumber\", elementWiseMultiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"elementWiseDivideNumber\", elementWiseDivideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","import { Builder1D, Builder3D } from \"./builder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/matrix\";\nimport { DatasetBuilder } from \"./dataset\";\nimport { OptimizerAdam, OptimizerGradientDescent } from \"./trainer/optimizer\";\nimport { MiniBatchTrainer } from \"./trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./dataset/datasetmodifier\";\nimport { ComputationCPU, ComputationGPU, setComputation } from \"./computation\";\n\nconst Builders = { Builder1D, Builder3D };\nconst Math = {\n  Matrix,\n};\nconst Layers = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst Dataset = {\n  DatasetBuilder: DatasetBuilder,\n};\nconst Optimizers = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n};\nconst Trainers = {\n  MiniBatchTrainer,\n};\nconst DatasetModifiers = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computations = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n};\n\nexport {\n  Builders,\n  Math,\n  Layers,\n  Dataset,\n  Optimizers,\n  Trainers,\n  DatasetModifiers,\n  Computations,\n};\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: Function = (example) => example;\n\n  applyToExample(example: number): void {\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.data.rows; row += 1) {\n        this.dataset.data.data[row][exampleIndex] = example.data.data[row][0];\n      }\n    }\n  }\n\n  setCallback(callback: Function): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\nimport { gpu } from \"../../computation/computationgpu\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number): void {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.rows; row += 1) {\n        min = Math.min(example.data[row][0]);\n        max = Math.max(example.data[row][0]);\n      }\n    }\n\n    const kernel = gpu\n      .createKernel(function (a) {\n        return (\n          (a[this.thread.x][this.thread.y] - this.constants.min) /\n          (this.constants.max - this.constants.min)\n        );\n      })\n      .setOutput([this.dataset.data.data.rows, this.dataset.data.data.cols])\n      .setConstants({\n        min,\n        max,\n      });\n    this.dataset.data.data = kernel(this.dataset.data.data);\n  }\n}\n","import { AbstractDatasetModifier } from \"./abstract\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  applyToExample(example: number): void {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (\n      let exampleIndex = 0;\n      exampleIndex < this.dataset.getNumberOfExamples();\n      exampleIndex += 1\n    ) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.data.rows; row += 1) {\n        if (isNaN(example[row][0])) {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      this.dataset.data.data[row][col] = valueToFill;\n    });\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AbstractComputation","name","func","this","kernels","args","apply","Matrix","rows","cols","data","resize","generateData","row","Array","arr","col","Float32Array","result","ArrayBuffer","view","DataView","forEach","num","i","setFloat64","sum","oldData","newData","getComputation","execute","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","gpu","GPU","mode","elementWiseDivide","m1","m2","Error","kernel","createKernel","a","b","thread","x","y","setOutput","elementWiseDivideNumber","constants","number","setConstants","softmaxActivation","m","Math","exp","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","elementWiseMultiply","logisticActivation","logisticDerivative","logisticLoss","kernel2","kernel3","elementWiseAdd","tanhActivation","tanhDerivative","pow","reluActivation","reluDerivative","softplusActivation","softplusDerivative","penalty","sqrt","purelinLoss","multiply","elementWiseSubtract","fillRandom","parameter","random","setZeros","elementWiseMultiplyNumber","transpose","ComputationGPU","addKernel","currentComputation","Network","dimensions","layer","size","layers","push","input","forward","X","Y","regularization","delta","length","getBackPropagation","propagate","loss","error","path","resultJSON","type","getType","getSize","weights","W","JSON","stringify","Promise","resolve","reject","fs","err","console","LayerType","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","sigma","previousActivations","A","conjugate","gW","gb","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","vStart","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractBuilder","dimension","network","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","cW","vb","cb","backPropagation","activation","width","height","depth","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","softmax","LogisticLayer","logistic","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","rollToColMatrix","setCol","FullyConnectedLayer","MaxPoolLayer","pool","Builder1D","jsonPath","json","parse","toString","builder","layerData","layerClass","createLayer","getNetwork","getLayers","Builder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","example","dataIndex","Number","NaN","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","AbstractOptimizer","t","learningRate","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","AbstractTrainer","optimizer","Function","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","numBatches","ceil","cost","accuracy","batch","predictedOutput","getBatch","correctOutput","miniBatchSize","colMaxCoeffIndex","MiniBatchTrainer","startTime","Date","getTime","setBatchSize","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","applyToExample","calculated","logMatrix","sub","subMatrix","logSubMatrix","Builders","Layers","Optimizers","Trainers","DatasetModifiers","CallbackDatabaseModifier","exampleIndex","exampleAt","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","isNaN","modificationType","Computations","ComputationCPU","setComputation"],"sourceRoot":""}