{"version":3,"file":"impulse-ts.js","mappings":"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","sources":["webpack://impulse-ts/webpack/bootstrap","webpack://impulse-ts/webpack/runtime/define property getters","webpack://impulse-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-ts/webpack/runtime/make namespace object","webpack://impulse-ts/external node-commonjs \"fs\"","webpack://impulse-ts/./src/typescript/computation/AbstractComputation.ts","webpack://impulse-ts/./src/typescript/math/Matrix.ts","webpack://impulse-ts/./src/typescript/computation/ComputationCPU.ts","webpack://impulse-ts/./src/typescript/computation/utils.ts","webpack://impulse-ts/./src/typescript/Network.ts","webpack://impulse-ts/./src/typescript/types.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/AbstractBackpropagation.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/Backpropagation1Dto1D.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/Backpropagation3Dto1D.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationToMaxPool.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationToConv.ts","webpack://impulse-ts/./src/typescript/layer/backpropagation/BackpropagationFactory.ts","webpack://impulse-ts/./src/typescript/network-builder/AbstractNetworkBuilder.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer1D.ts","webpack://impulse-ts/./src/typescript/layer/Softmax.ts","webpack://impulse-ts/./src/typescript/layer/Logistic.ts","webpack://impulse-ts/./src/typescript/layer/Tanh.ts","webpack://impulse-ts/./src/typescript/layer/Relu.ts","webpack://impulse-ts/./src/typescript/layer/Softplus.ts","webpack://impulse-ts/./src/typescript/math/math.ts","webpack://impulse-ts/./src/typescript/layer/AbstractLayer3D.ts","webpack://impulse-ts/./src/typescript/layer/Conv.ts","webpack://impulse-ts/./src/typescript/layer/FullyConnected.ts","webpack://impulse-ts/./src/typescript/layer/MaxPool.ts","webpack://impulse-ts/./src/typescript/network-builder/NetworkBuilder1D.ts","webpack://impulse-ts/./src/typescript/network-builder/NetworkBuilder3D.ts","webpack://impulse-ts/./src/typescript/dataset/Dataset.ts","webpack://impulse-ts/external commonjs2 \"csvtojson\"","webpack://impulse-ts/./src/typescript/dataset/DatasetBuilder.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/AbstractOptimizer.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/OptimizerAdam.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/OptimizerGradientDescent.ts","webpack://impulse-ts/./src/typescript/trainer/optimizer/OptimizerAdadelta.ts","webpack://impulse-ts/./src/typescript/trainer/AbstractTrainer.ts","webpack://impulse-ts/./src/typescript/trainer/MiniBatchTrainer.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/AbstractDatasetModifier.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/Callback.ts","webpack://impulse-ts/./src/typescript/computation/ComputationGPU.ts","webpack://impulse-ts/external commonjs2 \"gpu.js\"","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/MissingData.ts","webpack://impulse-ts/./src/typescript/main.ts","webpack://impulse-ts/./src/typescript/dataset/datasetmodifier/MinMaxScaling.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import { Matrix } from \"../math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { getComputation } from \"../computation/utils\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][]): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[col] === \"number\") {\n          data[row][col] = arr[col];\n        } else if (arr[col] instanceof Float32Array) {\n          data[row][col] = arr[col][row];\n        } else if (arr[col] && typeof arr[col][row] === \"number\") {\n          data[row][col] = arr[col][row];\n        } else {\n          data[row][col] = 0;\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      let sum = 0.0;\n      for (let row = 0; row < this.rows; row += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[col] = [sum];\n    }\n    return new Matrix(1, this.cols, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.rows; col += 1) {\n        if (this.data) {\n          sum += this.data[row][col];\n        }\n      }\n      data[row] = [sum];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    const oldData = this.data;\n    const newData = [];\n    let result = null;\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      result = new Matrix(this.rows, cols);\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = oldData[row][0];\n        }\n      }\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      result = new Matrix(rows, this.cols);\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = oldData[0][col];\n        }\n      }\n    }\n    if (result) {\n      result.generateData(newData);\n      return result;\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  conjugate(): Matrix {\n    return this;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[row] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        if (this.data) {\n          data[newRow][newCol] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data) {\n        data[row] = [this.data[row][col]];\n      }\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        if (this.data) {\n          data[_row++][0] = this.data[row][col];\n        }\n      }\n    }\n\n    return new Matrix(this.rows * this.cols, 1, data);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = Math.exp(m.data[row][col]);\n    }\n  }\n\n  const calculated = new Matrix(m.rows, m.cols, data);\n  const divider = new Matrix(1, m.cols, calculated.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(calculated, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      data[row][col] = Math.log(predictions.data[row][col]);\n    }\n  }\n\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, data)).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = m.data[row][col] * (1.0 - m.data[row][col]);\n    }\n  }\n\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        log[row][col] = Math.log(output.data[row][col]);\n      }\n    }\n  }\n  const logMatrix = new Matrix(output.rows, output.cols, log);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const subMatrix = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col]);\n      }\n    }\n  }\n  const logSubMatrix = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(elementWiseMultiply(output, logMatrix), elementWiseMultiply(subMatrix, logSubMatrix)).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * m.data[row][col])) - 1.0, 2.0);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = m.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = 1 / (1 + Math.exp(-Math.log(1 + Math.exp(m.data[row][col]))));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() - 0.5) * 0.1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Dimension, Layers } from \"./types\";\nimport { Matrix } from \"./math/Matrix\";\nimport * as fs from \"fs\";\nimport { getComputation } from \"./computation/utils\";\n\nclass Network {\n  private readonly dimensions: Dimension | null = null;\n  private size = 0;\n  private layers: Layers[] = [];\n\n  constructor(dimensions: Dimension) {\n    this.dimensions = dimensions;\n  }\n\n  addLayer(layer: Layers): Network {\n    this.size++;\n    this.layers.push(layer);\n\n    return this;\n  }\n\n  getLayers(): Layers[] {\n    return this.layers;\n  }\n\n  forward(input: Matrix): Matrix {\n    let output = input;\n\n    this.layers.forEach((layer: Layers) => {\n      output = layer.forward(output);\n    });\n\n    return output;\n  }\n\n  backward(X: Matrix, Y: Matrix, predictions: Matrix, regularization: number): void {\n    const m = X.cols;\n\n    let delta = getComputation().execute(\"subtract\", predictions, Y) as Matrix;\n\n    for (let layer = this.layers.length - 1; layer >= 0; layer -= 1) {\n      const backPropagation = this.layers[layer].getBackPropagation();\n      if (backPropagation) {\n        delta = backPropagation.propagate(X, m, regularization, delta);\n      }\n    }\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return this.layers[this.layers.length - 1].loss(output, predictions);\n  }\n\n  error(m: number): number {\n    return this.layers[this.layers.length - 1].error(m);\n  }\n\n  save(path: string): Promise<string> {\n    const resultJSON = {\n      dimensions: this.dimensions,\n      layers: [],\n    };\n\n    this.layers.forEach((layer: Layers) => {\n      resultJSON.layers.push({\n        type: layer.getType(),\n        size: layer.getSize(),\n        weights: {\n          W: layer.W.data,\n          b: layer.b.data,\n        },\n      });\n    });\n\n    const result = JSON.stringify(resultJSON);\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(path, result, (err) => {\n        if (err) {\n          console.error(err);\n          reject();\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport { Network };\nexport default Network;\n","import { SoftmaxLayer, LogisticLayer, TanhLayer, ReluLayer, SoftplusLayer, AbstractLayer } from \"./layer\";\nimport { ConvLayer } from \"./layer/\";\nimport { MaxPoolLayer } from \"./layer/\";\nimport { FullyConnectedLayer } from \"./layer/\";\nimport { PurelinLayer } from \"./layer/Purelin\";\nimport { AbstractLayer3D } from \"./layer/AbstractLayer3D\";\nimport { AbstractLayer1D } from \"./layer/AbstractLayer1D\";\n\nexport type Dimension = [number] | [number, number, number];\n\nexport enum LayerType {\n  logistic = \"logistic\",\n  softmax = \"softmax\",\n  tanh = \"tanh\",\n  relu = \"relu\",\n  softplus = \"softplus\",\n  conv = \"conv\",\n  maxpool = \"maxpool\",\n  fullyconnected = \"fullyconnected\",\n  purelin = \"purelin\",\n}\n\nexport type Layers =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | ConvLayer\n  | MaxPoolLayer\n  | FullyConnectedLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D\n  | AbstractLayer3D;\nexport type Layers1D =\n  | LogisticLayer\n  | SoftmaxLayer\n  | TanhLayer\n  | ReluLayer\n  | SoftplusLayer\n  | PurelinLayer\n  | AbstractLayer\n  | AbstractLayer1D;\nexport type Layers3D = ConvLayer | MaxPoolLayer | FullyConnectedLayer | AbstractLayer3D;\n","import { Layers } from \"../../types\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport abstract class AbstractBackPropagation {\n  protected layer: Layers | null = null;\n  protected previousLayer: Layers | null = null;\n\n  constructor(layer: Layers | null, previousLayer: Layers) {\n    this.layer = layer;\n    this.previousLayer = previousLayer;\n  }\n\n  abstract propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix;\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class Backpropagation1Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    if (this.layer) {\n      const previousActivations = this.previousLayer !== null ? this.previousLayer.A : input;\n      const delta = getComputation().execute(\"multiply\", sigma, previousActivations.transpose().conjugate()) as Matrix;\n      this.layer.gW = getComputation().execute(\n        \"add\",\n        getComputation().execute(\"divideNumber\", delta, numberOfExamples) as Matrix,\n        getComputation().execute(\"multiplyNumber\", this.layer.W, regularization / numberOfExamples) as Matrix\n      ) as Matrix;\n      this.layer.gb = getComputation().execute(\"divideNumber\", sigma.rowwiseSum(), numberOfExamples) as Matrix;\n      if (this.previousLayer !== null) {\n        return getComputation().execute(\n          \"elementWiseMultiply\",\n          getComputation().execute(\"multiply\", this.layer.W.transpose(), sigma) as Matrix,\n          this.previousLayer.derivative(this.previousLayer.A)\n        ) as Matrix;\n      }\n    }\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class Backpropagation3Dto1D extends AbstractBackPropagation {\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    return sigma;\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToMaxPool extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const prevLayer = this.previousLayer;\n    if (prevLayer) {\n      const result = getComputation().execute(\"fillZeros\", new Matrix(prevLayer.Z.rows, prevLayer.Z.cols)) as Matrix;\n\n      const filterSize = prevLayer.getFilterSize();\n      const stride = prevLayer.getStride();\n      const inputWidth = prevLayer.getWidth();\n      const inputHeight = prevLayer.getHeight();\n      const inputDepth = prevLayer.getDepth();\n      const outputWidth = prevLayer.getOutputWidth();\n      const outputHeight = prevLayer.getOutputHeight();\n      const outputDepth = prevLayer.getOutputDepth();\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              let _max = -Infinity;\n              const inputOffset = inputHeight * inputWidth * c;\n              const outputOffset = outputHeight * outputWidth * c;\n              let maxX = 0;\n              let maxY = 0;\n\n              for (let y = 0, vStart = vertStart; y < filterSize; y++, vStart++) {\n                for (let x = 0, hStart = horizStart; x < filterSize; x++, hStart++) {\n                  if (prevLayer.Z.data && _max < prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m]) {\n                    _max = prevLayer.Z.data[inputOffset + vStart * inputWidth + hStart][m];\n                    maxX = hStart;\n                    maxY = vStart;\n                  }\n                }\n              }\n\n              if (result.data && sigma.data) {\n                result.data[inputOffset + maxY * inputWidth + maxX][m] =\n                  sigma.data[outputOffset + h * outputWidth + w][m];\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    return new Matrix();\n  }\n}\n","import { AbstractBackPropagation } from \"./AbstractBackpropagation\";\nimport { Matrix } from \"../../math/Matrix\";\nimport { Layers3D } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\n\nexport class BackpropagationToConv extends AbstractBackPropagation {\n  protected previousLayer: Layers3D | null = null;\n\n  propagate(input: Matrix, numberOfExamples: number, regularization: number, sigma: Matrix): Matrix {\n    const previousLayer = this.previousLayer;\n\n    if (previousLayer) {\n      const padding = previousLayer.getPadding();\n      const stride = previousLayer.getStride();\n      const filterSize = previousLayer.getFilterSize();\n      const outputWidth = previousLayer.getOutputWidth();\n      const outputHeight = previousLayer.getOutputHeight();\n      const outputDepth = previousLayer.getOutputDepth();\n      const inputWidth = previousLayer.getWidth();\n      const inputHeight = previousLayer.getHeight();\n      const inputDepth = previousLayer.getDepth();\n\n      const tmpResult = getComputation().execute(\n        \"fillZeros\",\n        new Matrix((inputWidth + 2 * padding) * (inputHeight + 2 * padding) * inputDepth, numberOfExamples)\n      ) as Matrix;\n\n      const result = new Matrix(inputWidth * inputHeight * inputDepth, numberOfExamples);\n\n      const aPrev = previousLayer.derivative(previousLayer.A);\n\n      previousLayer.gW = getComputation().execute(\"fillZeros\", previousLayer.gW) as Matrix;\n      previousLayer.gb = getComputation().execute(\"fillZeros\", previousLayer.gb) as Matrix;\n\n      for (let m = 0; m < numberOfExamples; m++) {\n        for (let c = 0; c < outputDepth; c++) {\n          for (let h = 0; h < outputHeight; h++) {\n            for (let w = 0; w < outputWidth; w++) {\n              const vertStart = stride * h;\n              const vertEnd = vertStart + filterSize;\n              const horizStart = stride * w;\n              const horizEnd = horizStart + filterSize;\n\n              // filter loop\n              for (let d = 0; d < inputDepth; d++) {\n                for (\n                  let y = 0, vertical = vertStart, verticalPad = -padding;\n                  y < filterSize;\n                  y++, vertical++, verticalPad++\n                ) {\n                  for (\n                    let x = 0, horizontal = horizStart, horizontalPad = -padding;\n                    x < filterSize;\n                    x++, horizontal++, horizontalPad++\n                  ) {\n                    if (previousLayer.W.data && tmpResult.data && sigma.data) {\n                      tmpResult.data[\n                        d * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) +\n                          vertical * (inputWidth + 2 * padding) +\n                          horizontal\n                      ][m] +=\n                        previousLayer.W.data[c][d * filterSize * filterSize + y * filterSize + x] *\n                        sigma.data[c * outputWidth * outputHeight + h * outputWidth + w][m];\n                    }\n\n                    let z = 0;\n                    if (padding == 0) {\n                      if (previousLayer.Z.data) {\n                        z = previousLayer.Z.data[d * inputWidth * inputHeight + vertical * inputWidth + horizontal][m];\n                      }\n                    } else {\n                      if (\n                        verticalPad >= 0 &&\n                        horizontalPad >= 0 &&\n                        verticalPad < inputHeight &&\n                        horizontalPad < inputWidth\n                      ) {\n                        if (previousLayer.Z.data) {\n                          z =\n                            previousLayer.Z.data[\n                              d * inputWidth * inputHeight + verticalPad * inputWidth + horizontalPad\n                            ][m];\n                        }\n                      }\n                    }\n\n                    if (previousLayer.gW.data && sigma.data) {\n                      previousLayer.gW.data[c][d * filterSize * filterSize + y * filterSize + x] +=\n                        (z * sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m]) / numberOfExamples;\n                    }\n                  }\n                }\n              }\n\n              if (previousLayer.gb.data && sigma.data) {\n                previousLayer.gb.data[c][0] +=\n                  sigma.data[c * (outputWidth * outputHeight) + h * outputWidth + w][m] / numberOfExamples;\n              }\n            }\n          }\n        }\n\n        if (padding > 0) {\n          // unpad\n          for (let c = 0; c < inputDepth; c++) {\n            for (let h = -padding, y = 0; h < inputHeight + padding; h++, y++) {\n              for (let w = -padding, x = 0; w < inputWidth + padding; w++, x++) {\n                if (w >= 0 && h >= 0 && w < inputWidth && h < inputHeight && result.data && tmpResult.data) {\n                  result.data[c * inputWidth * inputHeight + h * inputWidth + w][m] =\n                    tmpResult.data[\n                      c * (inputWidth + 2 * padding) * (inputHeight + 2 * padding) + y * (inputWidth + 2 * padding) + x\n                    ][m];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (padding > 0) {\n        return result;\n      }\n\n      return tmpResult;\n    }\n  }\n}\n","import { Layers, LayerType } from \"../../types\";\nimport { Backpropagation1Dto1D } from \"./Backpropagation1Dto1D\";\nimport { Backpropagation3Dto1D } from \"./Backpropagation3Dto1D\";\nimport { BackpropagationToMaxPool } from \"./BackpropagationToMaxPool\";\nimport { BackpropagationToConv } from \"./BackpropagationToConv\";\nimport { AbstractBackPropagation } from \"./AbstractBackpropagation\";\n\nexport class BackpropagationFactory {\n  static create(previousLayer: Layers, layer: Layers): AbstractBackPropagation | null {\n    if (previousLayer == null) {\n      if (layer.is1D()) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      } else if (layer.getType() == LayerType.conv) {\n        return new Backpropagation3Dto1D(layer, previousLayer);\n      }\n    } else {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        return new BackpropagationToMaxPool(layer, previousLayer);\n      } else if (previousLayer.getType() == LayerType.conv) {\n        return new BackpropagationToConv(layer, previousLayer);\n      } else if (previousLayer.is1D() || previousLayer.getType() == LayerType.fullyconnected) {\n        return new Backpropagation1Dto1D(layer, previousLayer);\n      }\n    }\n    return null;\n  }\n}\n","import { Dimension, Layers } from \"../types\";\nimport Network from \"../Network\";\nimport { BackpropagationFactory } from \"../layer/backpropagation/BackpropagationFactory\";\n\nabstract class AbstractNetworkBuilder {\n  protected dimensions: Dimension | null = null;\n  protected lastLayer: Layers | null = null;\n  protected network: Network | null = null;\n\n  constructor(dimension: Dimension) {\n    this.dimensions = dimension;\n    this.network = new Network(dimension);\n  }\n\n  createLayer(layerClass: Layers, callback: (layer: Layers) => void | null = null): AbstractNetworkBuilder {\n    if (this.network) {\n      // @ts-ignore\n      const layer: Layers = new layerClass();\n\n      if (typeof callback === \"function\") {\n        callback(layer);\n      }\n\n      if (this.lastLayer === null) {\n        this.firstLayerTransition(layer);\n      } else {\n        // @ts-ignore\n        layer.transition(this.lastLayer);\n      }\n\n      layer.configure();\n      layer.setBackPropagation(BackpropagationFactory.create(this.lastLayer, layer));\n\n      this.network.addLayer(layer);\n      this.lastLayer = layer;\n    }\n\n    return this;\n  }\n\n  getNetwork(): Network | null {\n    return this.network;\n  }\n\n  abstract firstLayerTransition(layer: Layers): void;\n}\n\nexport { AbstractNetworkBuilder };\n","import { Matrix } from \"../math/Matrix\";\nimport { Dimension, Layers } from \"../types\";\nimport { AbstractBackPropagation } from \"./backpropagation/AbstractBackpropagation\";\nimport { getComputation } from \"../computation/utils\";\n\nabstract class AbstractLayer {\n  public W: Matrix;\n  public b: Matrix;\n  public A: Matrix;\n  public Z: Matrix;\n  public gW: Matrix;\n  public gb: Matrix;\n  public vW: Matrix;\n  public cW: Matrix;\n  public vb: Matrix;\n  public cb: Matrix;\n\n  protected width = 0;\n  protected height = 0;\n  protected depth = 0;\n  protected previousLayer: Layers | null = null;\n  protected backPropagation: AbstractBackPropagation | null = null;\n\n  constructor() {\n    this.W = new Matrix();\n    this.b = new Matrix();\n    this.A = new Matrix();\n    this.Z = new Matrix();\n    this.gW = new Matrix();\n    this.gb = new Matrix();\n    this.vW = new Matrix();\n    this.cW = new Matrix();\n    this.vb = new Matrix();\n    this.cb = new Matrix();\n  }\n\n  setBackPropagation(backPropagation: AbstractBackPropagation): AbstractLayer {\n    this.backPropagation = backPropagation;\n    return this;\n  }\n\n  getBackPropagation(): AbstractBackPropagation | null {\n    return this.backPropagation;\n  }\n\n  forward(input: Matrix): Matrix {\n    this.Z = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiply\", this.W, input) as Matrix,\n      this.b.replicate(1, input.cols)\n    ) as Matrix;\n    this.A = this.activation(this.Z);\n    return this.A;\n  }\n\n  setWidth(value: number): AbstractLayer {\n    this.width = value;\n\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setHeight(value: number): AbstractLayer {\n    this.height = value;\n\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setDepth(value: number): AbstractLayer {\n    this.depth = value;\n\n    return this;\n  }\n\n  getDepth(): number {\n    return this.depth;\n  }\n\n  abstract getOutputWidth(): number;\n\n  abstract getOutputHeight(): number;\n\n  abstract getOutputDepth(): number;\n\n  abstract configure(): void;\n\n  abstract is1D(): boolean;\n\n  abstract is3D(): boolean;\n\n  transition(previousLayer: Layers): AbstractLayer {\n    this.previousLayer = previousLayer;\n    return this;\n  }\n\n  abstract setSize(dimension: Dimension | number): AbstractLayer;\n\n  abstract getSize(): Dimension | number;\n\n  abstract activation(value: Matrix): Matrix;\n\n  abstract derivative(value: Matrix): Matrix;\n\n  abstract getType(): string;\n\n  abstract loss(output: Matrix, predictions: Matrix): number;\n\n  abstract error(m: number): number;\n\n  penalty(): number {\n    return getComputation().execute(\"penalty\", this.W) as number;\n  }\n}\n\nexport { AbstractLayer };\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\nimport { getComputation } from \"../computation/utils\";\nimport { Matrix } from \"../math/Matrix\";\n\nabstract class AbstractLayer1D extends AbstractLayer {\n  protected depth = 1;\n\n  configure(): void {\n    this.W.resize(this.height, this.width);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width) as Matrix;\n\n    this.b.resize(this.height, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, this.width) as Matrix;\n\n    this.gW.resize(this.height, this.width);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.height, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cW.resize(this.height, this.width);\n    this.cW = getComputation().execute(\"fillZeros\", this.cW) as Matrix;\n\n    this.cb.resize(this.height, 1);\n    this.cb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n\n    this.vW.resize(this.height, this.width);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.height, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n  }\n\n  is1D(): boolean {\n    return true;\n  }\n\n  is3D(): boolean {\n    return false;\n  }\n\n  transition(previousLayer: Layers): AbstractLayer1D {\n    if (previousLayer.is1D()) {\n      this.setWidth(previousLayer.getSize() as number);\n    } else if (previousLayer.is3D()) {\n      this.setWidth(previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth());\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(value: Dimension | number): AbstractLayer1D {\n    this.setHeight(value as number);\n\n    return this;\n  }\n\n  getSize(): number {\n    return this.height;\n  }\n\n  getOutputWidth(): number {\n    return this.width;\n  }\n\n  getOutputHeight(): number {\n    return this.height;\n  }\n\n  getOutputDepth(): number {\n    return 1;\n  }\n}\n\nexport { AbstractLayer1D };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftmaxLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softmaxActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"Unsupported usage.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.softmax;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"softmaxLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { SoftmaxLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass LogisticLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"logisticDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.logistic;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return getComputation().execute(\"logisticLoss\", output, predictions) as number;\n  }\n\n  error(m: number): number {\n    return -1.0 / m;\n  }\n}\n\nexport { LogisticLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass TanhLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"tanhDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.tanh;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { TanhLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass ReluLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.relu;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { ReluLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer1D } from \"./AbstractLayer1D\";\nimport { getComputation } from \"../computation/utils\";\n\nclass SoftplusLayer extends AbstractLayer1D {\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"softplusDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.softplus;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    return 0.0; // todo\n  }\n\n  error(m: number): number {\n    return 0.0; // todo\n  }\n}\n\nexport { SoftplusLayer };\n","import { Matrix } from \"./Matrix\";\nimport { getComputation } from \"../computation/utils\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const rows = kernel_w * kernel_h * channels;\n  const cols = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultCol = 0;\n\n  const result = getComputation().execute(\"fillZeros\", new Matrix(rows, cols)) as Matrix;\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultRow = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              if (result.data && input.data && result.data[currentResultRow]) {\n                result.data[currentResultRow][currentResultCol] =\n                  input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n              }\n            }\n            currentResultRow++;\n          }\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = getComputation().execute(\"fillZeros\", new Matrix(resultWidth * resultHeight * resultDepth, 1)) as Matrix;\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        if (result.data) {\n          result.data[outputOffset + currentResultCol][0] = _max;\n        }\n      }\n      currentResultCol++;\n    }\n  }\n  return new Matrix();\n};\n","import { AbstractLayer } from \"./AbstractLayer\";\nimport { Dimension, Layers } from \"../types\";\n\nabstract class AbstractLayer3D extends AbstractLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  is1D(): boolean {\n    return false;\n  }\n\n  is3D(): boolean {\n    return true;\n  }\n\n  transition(previousLayer: Layers): Layers {\n    if (previousLayer.is3D()) {\n      this.setSize([previousLayer.getOutputWidth(), previousLayer.getOutputHeight(), previousLayer.getOutputDepth()]);\n    }\n\n    super.transition(previousLayer);\n\n    return this;\n  }\n\n  setSize(dimension: Dimension | number): Layers {\n    this.setWidth(dimension[0]);\n    this.setHeight(dimension[1]);\n    this.setDepth(dimension[2]);\n\n    return this;\n  }\n\n  getSize(): Dimension {\n    return [this.getWidth(), this.getHeight(), this.getDepth()];\n  }\n\n  abstract getPadding(): number;\n\n  abstract getStride(): number;\n\n  abstract getFilterSize(): number;\n}\n\n\nexport { AbstractLayer3D };\n","import { Matrix } from \"../math/Matrix\";\nimport { im2col } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\nimport { getComputation } from \"../computation/utils\";\n\nexport class ConvLayer extends AbstractLayer3D {\n  protected numFilters = 32;\n  protected filterSize = 4;\n  protected padding = 1;\n  protected stride = 1;\n\n  configure(): void {\n    this.W.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.W = getComputation().execute(\"fillRandom\", this.W, this.width * this.height * this.depth) as Matrix;\n\n    this.b.resize(this.numFilters, 1);\n    this.b = getComputation().execute(\"fillRandom\", this.b, 0.01) as Matrix;\n\n    this.gW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.gW = getComputation().execute(\"fillZeros\", this.gW) as Matrix;\n\n    this.gb.resize(this.numFilters, 1);\n    this.gb = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.cW = getComputation().execute(\"fillZeros\", this.gb) as Matrix;\n\n    this.cb.resize(this.numFilters, 1);\n    this.cb = getComputation().execute(\"fillZeros\", this.cb) as Matrix;\n\n    this.vW.resize(this.numFilters, this.filterSize * this.filterSize * this.depth);\n    this.vW = getComputation().execute(\"fillZeros\", this.vW) as Matrix;\n\n    this.vb.resize(this.numFilters, 1);\n    this.vb = getComputation().execute(\"fillZeros\", this.vb) as Matrix;\n  }\n\n  getOutputHeight(): number {\n    return (this.width - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.height - this.filterSize + 2 * this.padding) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.numFilters;\n  }\n\n  setFilterSize(size: number): ConvLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setNumFilters(numFilters: number): ConvLayer {\n    this.numFilters = numFilters;\n    return this;\n  }\n\n  getNumFilters(): number {\n    return this.numFilters;\n  }\n\n  setPadding(padding: number): ConvLayer {\n    this.padding = padding;\n    return this;\n  }\n\n  getPadding(): number {\n    return this.padding;\n  }\n\n  setStride(stride: number): ConvLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const conv = im2col(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.padding,\n        this.padding,\n        this.stride,\n        this.stride\n      );\n      const tmp = (this.Z = getComputation()\n        .execute(\"add\", getComputation().execute(\"multiply\", this.W, conv) as Matrix, this.b.replicate(1, input.cols))\n        .rollToColMatrix());\n\n      result.setCol(i, tmp);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    return getComputation().execute(\"reluActivation\", m) as Matrix;\n  }\n\n  derivative(m: Matrix): Matrix {\n    return getComputation().execute(\"reluDerivative\", m) as Matrix;\n  }\n\n  getType(): LayerType {\n    return LayerType.conv;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n","import { Dimension, LayerType } from \"../types\";\nimport { ConvLayer } from \"./Conv\";\n\nclass FullyConnectedLayer extends ConvLayer {\n  configure(): void {\n    // do nothing\n  }\n\n  transition(previousLayer: FullyConnectedLayer): FullyConnectedLayer {\n    if (previousLayer.is3D()) {\n      if (previousLayer.getType() == LayerType.maxpool) {\n        this.filterSize = previousLayer.getOutputWidth();\n        this.padding = 0;\n        this.stride = 1;\n        this.width = previousLayer.getOutputWidth();\n        this.height = previousLayer.getOutputHeight();\n        this.depth = previousLayer.getOutputDepth();\n        this.numFilters =\n          previousLayer.getOutputWidth() * previousLayer.getOutputHeight() * previousLayer.getOutputDepth();\n      } else {\n        throw new Error(\"Invalid usage. Cannot fully connect with previous non maxpool layer.\");\n      }\n    } else {\n      throw new Error(\"Invalid usage. Cannot fully connect with previous 1D layer.\");\n    }\n\n    return this;\n  }\n\n  setSize(dimension: Dimension): FullyConnectedLayer {\n    return this;\n  }\n\n  setFilterSize(filterSize: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setStride(stride: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setPadding(padding: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setWidth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setHeight(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setDepth(value: number): FullyConnectedLayer {\n    return this;\n  }\n\n  setNumFilters(value: number): FullyConnectedLayer {\n    return this;\n  }\n}\n\nexport { FullyConnectedLayer };\n","import { Matrix } from \"../math/Matrix\";\nimport { maxpool } from \"../math/math\";\nimport { LayerType } from \"../types\";\nimport { AbstractLayer3D } from \"./AbstractLayer3D\";\n\nclass MaxPoolLayer extends AbstractLayer3D {\n  filterSize = 0;\n  stride = 0;\n\n  configure(): void {\n  }\n\n  getOutputHeight(): number {\n    return (this.height - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputWidth(): number {\n    return (this.width - this.filterSize) / this.stride + 1;\n  }\n\n  getOutputDepth(): number {\n    return this.depth;\n  }\n\n  setFilterSize(size: number): MaxPoolLayer {\n    this.filterSize = size;\n    return this;\n  }\n\n  getFilterSize(): number {\n    return this.filterSize;\n  }\n\n  setStride(stride: number): MaxPoolLayer {\n    this.stride = stride;\n    return this;\n  }\n\n  getStride(): number {\n    return this.stride;\n  }\n\n  getPadding(): number {\n    return 0;\n  }\n\n  forward(input: Matrix): Matrix {\n    const result = new Matrix(this.getOutputWidth() * this.getOutputHeight() * this.getOutputDepth(), input.cols);\n\n    for (let i = 0; i < input.cols; i += 1) {\n      const pool = maxpool(\n        input.col(i),\n        this.depth,\n        this.height,\n        this.width,\n        this.filterSize,\n        this.filterSize,\n        this.stride,\n        this.stride\n      ).rollToColMatrix();\n\n      result.setCol(i, pool);\n    }\n\n    this.Z = result;\n    this.activation(this.Z);\n\n    return this.A;\n  }\n\n  activation(m: Matrix): Matrix {\n    throw new Error(\"No activation for MAXPOOL layer.\");\n  }\n\n  derivative(m: Matrix): Matrix {\n    throw new Error(\"No derivative for MAXPOOL layer.\");\n  }\n\n  getType(): LayerType {\n    return LayerType.maxpool;\n  }\n\n  loss(output: Matrix, predictions: Matrix): number {\n    throw new Error(\"Unsupported.\");\n  }\n\n  error(m: number): number {\n    throw new Error(\"Unsupported.\");\n  }\n}\n\nexport { MaxPoolLayer };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../layer/\";\nimport { Matrix } from \"../math/Matrix\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder1D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    layer.setWidth(this.dimensions[0]);\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder1D(json[\"dimensions\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          let layerClass = null;\n\n          if (layerData[\"type\"] === \"logistic\") {\n            layerClass = LogisticLayer;\n          } else if (layerData[\"type\"] === \"softmax\") {\n            layerClass = SoftmaxLayer;\n          } else if (layerData[\"type\"] === \"relu\") {\n            layerClass = ReluLayer;\n          } else if (layerData[\"type\"] === \"softplus\") {\n            layerClass = SoftplusLayer;\n          } else if (layerData[\"type\"] === \"tanh\") {\n            layerClass = TanhLayer;\n          }\n\n          builder.createLayer(layerClass, (layer) => {\n            layer.setSize(layerData[\"size\"] as number);\n          });\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"W\"].length,\n              json[\"layers\"][i][\"weights\"][\"W\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"W\"]\n            );\n            layer.b = new Matrix(\n              json[\"layers\"][i][\"weights\"][\"b\"].length,\n              json[\"layers\"][i][\"weights\"][\"b\"][0].length,\n              json[\"layers\"][i][\"weights\"][\"b\"]\n            );\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder1D };\n","import { AbstractNetworkBuilder } from \"./AbstractNetworkBuilder\";\nimport { Layers } from \"../types\";\nimport Network from \"../Network\";\nimport * as fs from \"fs\";\nimport { LogisticLayer, ReluLayer, SoftmaxLayer, SoftplusLayer, TanhLayer } from \"../layer/\";\nimport { ConvLayer } from \"../layer/\";\nimport { MaxPoolLayer } from \"../layer/\";\nimport { JSONLayerData } from \"./types\";\n\nclass NetworkBuilder3D extends AbstractNetworkBuilder {\n  firstLayerTransition(layer: Layers): void {\n    if (this.dimensions) {\n      layer.setSize(this.dimensions);\n    }\n  }\n\n  static fromJSON(jsonPath: string): Promise<Network> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(jsonPath, (err, data) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        const json = JSON.parse(data.toString());\n\n        const builder = new NetworkBuilder3D(json[\"size\"]);\n\n        json[\"layers\"].forEach((layerData: JSONLayerData) => {\n          if (layerData[\"type\"] === \"logistic\") {\n            // @ts-ignore\n            builder.createLayer(LogisticLayer, (layer) => {\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softmax\") {\n            // @ts-ignore\n            builder.createLayer(SoftmaxLayer, (layer) => {\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"relu\") {\n            // @ts-ignore\n            builder.createLayer(ReluLayer, (layer) => {\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"softplus\") {\n            // @ts-ignore\n            builder.createLayer(SoftplusLayer, (layer) => {\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"tanh\") {\n            // @ts-ignore\n            builder.createLayer(TanhLayer, (layer) => {\n              layer.setSize(layerData[\"size\"]);\n            });\n          } else if (layerData[\"type\"] === \"conv\") {\n            // @ts-ignore\n            builder.createLayer(ConvLayer, (layer: ConvLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n              layer.setNumFilters(layerData[\"numFilters\"]);\n              layer.setPadding(layerData[\"padding\"]);\n            });\n          } else if (layerData[\"type\"] === \"maxpool\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer, (layer: MaxPoolLayer) => {\n              layer.setSize(layerData[\"size\"]);\n              layer.setFilterSize(layerData[\"filterSize\"]);\n              layer.setStride(layerData[\"stride\"]);\n            });\n          } else if (layerData[\"type\"] === \"fullyconnected\") {\n            // @ts-ignore\n            builder.createLayer(MaxPoolLayer);\n          }\n        });\n\n        const network = builder.getNetwork();\n\n        if (network) {\n          network.getLayers().forEach((layer, i) => {\n            layer.W = json[\"layers\"][\"W\"];\n            layer.b = json[\"layers\"][\"b\"];\n          });\n\n          resolve(network);\n        }\n      });\n    });\n  }\n}\n\nexport { NetworkBuilder3D };\n","import { Matrix } from \"../math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number, numberOfExamples: number, arr: string[][]) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n    const data = [];\n\n    for (let example = 0; example < numberOfExamples; example += 1) {\n      data[example] = [];\n      for (let dataIndex = 0; dataIndex < exampleSize; dataIndex += 1) {\n        data[example][dataIndex] = arr[example][dataIndex].length ? Number(arr[example][dataIndex]) : NaN;\n      }\n    }\n\n    this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n  }\n\n  exampleAt(index: number): Matrix | null {\n    if (this.data) {\n      return this.data.col(index);\n    }\n\n    return null;\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getBatch(offset: number, batchSize: number): Matrix | null {\n    if (this.data) {\n      return this.data.block(0, offset, this.data.rows, batchSize);\n    }\n    return null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"./Dataset\";\n\nexport class DatasetBuilder {\n  static fromCSV(csvPath: string): Promise<Dataset> {\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(csvPath)\n        .then((arr) => {\n          const numberOfExamples = arr.length;\n          const exampleSize = arr[0].length;\n\n          const dataset = new Dataset(exampleSize, numberOfExamples, arr);\n          resolve(dataset);\n        });\n    });\n  }\n}\n","import { Layers } from \"../../types\";\n\nexport abstract class AbstractOptimizer {\n  protected batchSize = 0;\n  protected t = 0;\n  protected learningRate = 0;\n\n  setBatchSize(batchSize: number): AbstractOptimizer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  setT(t: number): AbstractOptimizer {\n    this.t = t;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractOptimizer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  abstract optimize(layer: Layers): void;\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class OptimizerAdam extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adam(layer, this.learningRate, this.t);\n  }\n\n  adam(layer: Layers, learningRate: number, t: number): void {\n    const beta1 = 0.9;\n    const beta2 = 0.999;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vW, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - beta1) as Matrix\n    ) as Matrix;\n    const wCorrected = getComputation().execute(\"divideNumber\", layer.vW, 1 - Math.pow(beta1, t)) as Matrix;\n\n    layer.cW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1 - beta1) as Matrix\n    ) as Matrix;\n    const sCorrected = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, 1 - Math.pow(beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", wCorrected, sCorrected) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.vb, beta1) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gb, 1 - beta1) as Matrix\n    ) as Matrix;\n    const wCorrected2 = getComputation().execute(\"divideNumber\", layer.vb, 1 - Math.pow(beta1, t)) as Matrix;\n    layer.cb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cb, beta2) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - beta2\n      ) as Matrix\n    ) as Matrix;\n    const sCorrected2 = getComputation().execute(\n      \"sqrt\",\n      getComputation().execute(\"divideNumber\", layer.cb, 1 - Math.pow(beta2, t)) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseDivide\", wCorrected2, sCorrected2) as Matrix,\n        learningRate\n      ) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class OptimizerGradientDescent extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.gradientDescent(layer, this.learningRate);\n  }\n\n  gradientDescent(layer: Layers, learningRate: number): void {\n    layer.W = getComputation().execute(\n      \"subtract\",\n      layer.W,\n      getComputation().execute(\"multiplyNumber\", layer.gW, learningRate) as Matrix\n    ) as Matrix;\n    layer.b = getComputation().execute(\n      \"subtract\",\n      layer.b,\n      getComputation().execute(\"multiplyNumber\", layer.gb, learningRate) as Matrix\n    ) as Matrix;\n  }\n}\n","import { AbstractOptimizer } from \"./AbstractOptimizer\";\nimport { Layers } from \"../../types\";\nimport { getComputation } from \"../../computation/utils\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class OptimizerAdadelta extends AbstractOptimizer {\n  optimize(layer: Layers): void {\n    this.adadelta(layer, this.learningRate, this.t);\n  }\n\n  adadelta(layer: Layers, learningRate: number, batchSize: number): void {\n    const gamma = 0.9;\n\n    layer.cW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, gamma) as Matrix,\n      getComputation().execute(\"multiplyNumber\", layer.gW, 1.0 - gamma) as Matrix\n    ) as Matrix;\n\n    const deltaParameters = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vW) as Matrix,\n          getComputation().execute(\"sqrt\", layer.cW) as Matrix\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gW\n    ) as Matrix;\n\n    layer.vW = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cW, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", deltaParameters, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.W = getComputation().execute(\"add\", layer.W, deltaParameters) as Matrix;\n\n    layer.cb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.gb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"elementWiseMultiply\", layer.gb, layer.gb) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    const deltaParameters2 = getComputation().execute(\n      \"elementWiseMultiply\",\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\n          \"elementWiseDivide\",\n          getComputation().execute(\"sqrt\", layer.vb) as Matrix,\n          layer.cb\n        ) as Matrix,\n        -1\n      ) as Matrix,\n      layer.gb\n    ) as Matrix;\n\n    layer.vb = getComputation().execute(\n      \"add\",\n      getComputation().execute(\"multiplyNumber\", layer.cb, gamma) as Matrix,\n      getComputation().execute(\n        \"multiplyNumber\",\n        getComputation().execute(\"pow\", layer.cb, 2) as Matrix,\n        1 - gamma\n      ) as Matrix\n    ) as Matrix;\n\n    layer.b = getComputation().execute(\"elementWiseMultiply\", layer.b, deltaParameters2) as Matrix;\n  }\n}\n","import Network from \"../Network\";\nimport { AbstractOptimizer } from \"./optimizer/AbstractOptimizer\";\nimport { Dataset } from \"../dataset\";\n\nexport interface CostResult {\n  cost: number;\n  accuracy: number;\n}\n\nexport interface StepCallbackParameters {\n  iteration: number;\n}\n\nexport abstract class AbstractTrainer {\n  network: Network | null = null;\n  optimizer: AbstractOptimizer | null = null;\n  regularization = 0;\n  iterations = 1000;\n  learningRate = 0.01;\n  verbose = true;\n  verboseStep = 1;\n  stepCallback = (data: StepCallbackParameters): void => undefined;\n\n  constructor(network: Network, optimizer: AbstractOptimizer) {\n    this.network = network;\n    this.optimizer = optimizer;\n  }\n\n  abstract train(inputDataset: Dataset, outputDataset: Dataset): AbstractTrainer;\n\n  setRegularization(regularization: number): AbstractTrainer {\n    this.regularization = regularization;\n    return this;\n  }\n\n  setIterations(iterations: number): AbstractTrainer {\n    this.iterations = iterations;\n    return this;\n  }\n\n  setLearningRate(learningRate: number): AbstractTrainer {\n    this.learningRate = learningRate;\n    return this;\n  }\n\n  setVerbose(verbose: boolean): AbstractTrainer {\n    this.verbose = verbose;\n    return this;\n  }\n\n  setVerboseStep(verboseStep: number): AbstractTrainer {\n    this.verboseStep = verboseStep;\n    return this;\n  }\n\n  setStepCallback(stepCallback: (data: StepCallbackParameters) => void): AbstractTrainer {\n    this.stepCallback = stepCallback;\n    return this;\n  }\n\n  cost(inputDataset: Dataset, outputDataset: Dataset): CostResult {\n    const batchSize = 100;\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const numBatches = Math.ceil(numberOfExamples / batchSize);\n\n    let cost = 0;\n    let accuracy = 0;\n    let penalty = 0;\n\n    if (this.network) {\n      this.network.getLayers().forEach((layer) => {\n        penalty += layer.penalty();\n      });\n\n      for (let batch = 0, offset = 0; batch < numberOfExamples; batch += batchSize, offset += 100) {\n        const inputBatch = inputDataset.getBatch(offset, batchSize);\n        const outputBatch = outputDataset.getBatch(offset, batchSize);\n\n        if (inputBatch && outputBatch) {\n          const predictedOutput = this.network.forward(inputBatch);\n          const correctOutput = outputBatch;\n\n          const miniBatchSize = correctOutput.cols;\n\n          const loss = this.network.loss(correctOutput, predictedOutput);\n          const error = this.network.error(miniBatchSize);\n\n          cost +=\n            (error * loss + (this.regularization * penalty) / (2.0 * miniBatchSize)) /\n            // TODO: fix it\n            (numBatches * (miniBatchSize / batchSize));\n\n          for (let col = 0; col < predictedOutput.cols; col += 1) {\n            const index1 = predictedOutput.colMaxCoeffIndex(col);\n            const index2 = correctOutput.colMaxCoeffIndex(col);\n\n            if (index1 === index2) {\n              accuracy++;\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      cost,\n      accuracy: ((accuracy - 1) / numberOfExamples) * 100,\n    };\n  }\n}\n","import { AbstractTrainer } from \"./AbstractTrainer\";\nimport { Dataset } from \"../dataset\";\n\nexport class MiniBatchTrainer extends AbstractTrainer {\n  batchSize = 100;\n\n  setBatchSize(batchSize: number): MiniBatchTrainer {\n    this.batchSize = batchSize;\n    return this;\n  }\n\n  train(inputDataset: Dataset, outputDataset: Dataset): MiniBatchTrainer {\n    const numberOfExamples = inputDataset.getNumberOfExamples();\n    const startTime = new Date().getTime();\n\n    let t = 0;\n\n    if (this.optimizer && this.network) {\n      this.optimizer.setBatchSize(this.batchSize);\n\n      for (let i = 0; i < this.iterations; i += 1) {\n        const startIterationTime = new Date().getTime();\n\n        for (let batch = 0, offset = 0; batch < numberOfExamples; batch += this.batchSize, offset += this.batchSize) {\n          const startIterationTime2 = new Date().getTime();\n          const input = inputDataset.getBatch(offset, this.batchSize);\n          const output = outputDataset.getBatch(offset, this.batchSize);\n          const forward = this.network.forward(input);\n\n          this.network.backward(input, output, forward, this.regularization);\n\n          this.network.getLayers().forEach((layer) => {\n            if (this.optimizer) {\n              this.optimizer.setT(++t);\n              this.optimizer.optimize(layer);\n            }\n          });\n\n          if (this.verbose) {\n            const endIterationTime = new Date().getTime();\n            console.log(\n              `Batch: ${offset} / ${numberOfExamples} | Time: ${endIterationTime - startIterationTime2} ms | ${\n                (endIterationTime - startIterationTime) / 1000\n              } s.`\n            );\n          }\n        }\n\n        if (this.verbose) {\n          if ((i + 1) % this.verboseStep === 0) {\n            const endTime = new Date().getTime();\n            const currentResult = this.cost(inputDataset, outputDataset);\n\n            console.log(\n              `Iteration: ${i + 1} | Cost: ${currentResult.cost} | Accuracy: ${currentResult.accuracy}% | Time: ${\n                (endTime - startTime) / 100\n              } s.`\n            );\n          }\n        }\n\n        if (typeof this.stepCallback === \"function\") {\n          this.stepCallback.call(null, {\n            iteration: i,\n          });\n        }\n      }\n    }\n\n    return this;\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  apply(): Dataset {\n    for (let example = 0; example < this.dataset.getNumberOfExamples(); example += 1) {\n      this.applyToExample(example);\n    }\n\n    return this.dataset;\n  }\n\n  abstract applyToExample(example: number): void;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../math/Matrix\";\n\nexport class CallbackDatabaseModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  applyToExample(example: number): void {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatabaseModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../math/Matrix\";\n\nimport { GPU } from \"gpu.js\";\n\nexport const gpu = new GPU({ mode: \"gpu\" });\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] / this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const softmaxActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.exp(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  const data = new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n  const divider = new Matrix(1, m.cols, data.colwiseSum().data).replicate(m.rows, 1);\n  return new Matrix(m.rows, m.cols, elementWiseDivide(data, divider).data);\n};\n\nexport const softmaxLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n  return new Matrix(\n    output.rows,\n    output.cols,\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(predictions.data) as number[][])).data\n  ).sum();\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 / (1.0 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * (1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel2 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - a[this.thread.x][this.thread.y];\n    })\n    .setOutput([output.rows, output.cols]);\n  const kernel3 = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1.0 - a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([predictions.rows, predictions.cols]);\n\n  return add(\n    elementWiseMultiply(output, new Matrix(output.rows, output.cols, kernel(output.data) as number[][])),\n    elementWiseMultiply(\n      new Matrix(output.rows, output.cols, kernel2(output.data) as number[][]),\n      new Matrix(predictions.rows, predictions.cols, kernel3(predictions.data) as number[][])\n    )\n  ).sum();\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const tanhDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1.0 - Math.pow(2.0 / (1.0 + Math.exp(-2.0 * a[this.thread.x][this.thread.y])) - 1.0, 2.0);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.max(0.0, a[this.thread.x][this.thread.y]);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const reluDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      if (a[this.thread.x][this.thread.y] > 0) {\n        return 1;\n      }\n      return 0;\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.log(1 + Math.exp(a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const softplusDerivative = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return 1 / (1 + Math.exp(-a[this.thread.x][this.thread.y]));\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return Math.sqrt(a[this.thread.x][this.thread.y] + 1e-8);\n    })\n    .setOutput([m.rows, m.cols]);\n  return new Matrix(m.rows, m.cols, kernel(m.data) as number[][]);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return b[this.thread.x][this.thread.y] - Math.pow(a[this.thread.x][this.thread.y], 2);\n    })\n    .setOutput([output.rows, output.cols]);\n  return new Matrix(output.rows, output.cols, kernel(output.data) as number[][]).sum();\n};\n\nexport const multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.cols} !== m2.rows ${m2.rows}.`);\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      let sum = 0;\n      for (let i = 0; i < this.constants.cols; i++) {\n        // @ts-ignore\n        sum += a[this.thread.x][i] * b[i][this.thread.y];\n      }\n      return sum;\n    })\n    .setOutput([m1.rows, m2.cols])\n    .setConstants({\n      cols: m1.rows,\n    });\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] + b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] - b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return Math.random() - 0.5;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      parameter,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 0.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function () {\n      return 1.0;\n    })\n    .setOutput([m1.rows, m1.cols]);\n  return new Matrix(m1.rows, m1.cols, kernel() as number[][]);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const kernel = gpu\n    .createKernel(function (a, b) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * b[this.thread.x][this.thread.y];\n    })\n    .setOutput([m1.rows, m2.cols]);\n\n  return new Matrix(m1.rows, m2.cols, kernel(m1.data, m2.data) as number[][]);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.x][this.thread.y] * this.constants.number;\n    })\n    .setOutput([m1.rows, m1.cols])\n    .setConstants({\n      number: num,\n    });\n\n  return new Matrix(m1.rows, m1.cols, kernel(m1.data) as number[][]);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const kernel = gpu\n    .createKernel(function (a) {\n      // @ts-ignore\n      return a[this.thread.y][this.thread.x];\n    })\n    .setOutput([m.cols, m.rows]);\n\n  return new Matrix(m.cols, m.rows, kernel(m.data) as number[][]);\n};\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticDerivative\", logisticDerivative);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"tanhDerivative\", tanhDerivative);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluDerivative\", reluDerivative);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"softplusDerivative\", softplusDerivative);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"gpu.js\");","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\n\nexport class MissingDataScalingDatabaseModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  applyToExample(example: number): void {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      if (example && example.data) {\n        for (let row = 0; row < example.rows; row += 1) {\n          if (isNaN(example.data[row][0])) {\n            rowsToFill.push({\n              row,\n              col: example,\n            });\n          } else {\n            sum += example.data[row][0];\n            correctExamplesCount++;\n          }\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      if (this.dataset && this.dataset.data && this.dataset.data.data) {\n        this.dataset.data.data[row][col] = valueToFill;\n      }\n    });\n  }\n\n  setModificationType(type: string): MissingDataScalingDatabaseModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { NetworkBuilder1D, NetworkBuilder3D } from \"./network-builder\";\nimport {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  FullyConnectedLayer,\n  MaxPoolLayer,\n} from \"./layer\";\nimport { Matrix } from \"./math/Matrix\";\nimport { DatasetBuilder as DatasetBuilderBuilder, Dataset as DatasetDataset } from \"./dataset\";\nimport { OptimizerAdam, OptimizerGradientDescent, OptimizerAdadelta } from \"./trainer/optimizer\";\nimport { MiniBatchTrainer } from \"./trainer\";\nimport {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n} from \"./dataset/datasetmodifier\";\nimport { ComputationCPU, ComputationGPU, setComputation } from \"./computation\";\n\nconst NetworkBuilder = { NetworkBuilder1D, NetworkBuilder3D };\nconst Math = {\n  Matrix,\n};\nconst Layer = {\n  SoftmaxLayer,\n  LogisticLayer,\n  ReluLayer,\n  SoftplusLayer,\n  TanhLayer,\n  ConvLayer,\n  MaxPoolLayer,\n  FullyConnectedLayer,\n};\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n};\nconst Optimizer = {\n  OptimizerAdam,\n  OptimizerGradientDescent,\n  OptimizerAdadelta,\n};\nconst Trainer = {\n  MiniBatchTrainer,\n};\nconst DatasetModifier = {\n  CallbackDatabaseModifier,\n  MinMaxScalingDatabaseModifier,\n  MissingDataScalingDatabaseModifier,\n};\nconst Computation = {\n  ComputationCPU,\n  ComputationGPU,\n  setComputation,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\n\nexport { NetworkBuilder, Math, Layer, Dataset, DatasetBuilder, Optimizer, Trainer, DatasetModifier, Computation };\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { gpu } from \"../../computation/ComputationGPU\";\n\nexport class MinMaxScalingDatabaseModifier extends AbstractDatasetModifier {\n  applyToExample(example: number): void {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (example && example.data) {\n          min = Math.min(example.data[row][0]);\n          max = Math.max(example.data[row][0]);\n        }\n      }\n    }\n\n    const kernel = gpu\n      .createKernel(function (a) {\n        // @ts-ignore\n        return (a[this.thread.x][this.thread.y] - this.constants.min) / (this.constants.max - this.constants.min);\n      })\n      .setOutput([this.dataset.data.rows, this.dataset.data.cols])\n      .setConstants({\n        min,\n        max,\n      });\n    this.dataset.data.data = kernel(this.dataset.data.data) as number[][];\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","AbstractComputation","name","func","this","kernels","args","apply","Matrix","rows","cols","data","resize","generateData","row","Array","arr","col","Float32Array","sum","oldData","newData","result","getComputation","execute","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","_row","elementWiseDivide","m1","m2","Error","divideNumber","num","softmaxActivation","m","Math","exp","calculated","divider","colwiseSum","replicate","softmaxLoss","output","predictions","log","elementWiseMultiply","logisticActivation","logisticDerivative","logisticLoss","logMatrix","sub","subMatrix","logSubMatrix","add","tanhActivation","tanhDerivative","pow","reluActivation","reluDerivative","softplusActivation","softplusDerivative","penalty","sqrt","purelinLoss","multiply","i","subtract","fillRandom","parameter","random","fillZeros","multiplyNumber","transpose","ComputationCPU","addKernel","currentComputation","Network","dimensions","layer","size","layers","push","input","forEach","forward","X","Y","regularization","delta","length","backPropagation","getBackPropagation","propagate","loss","error","path","resultJSON","type","getType","getSize","weights","W","b","JSON","stringify","Promise","resolve","reject","fs","err","console","LayerType","AbstractBackPropagation","previousLayer","Backpropagation1Dto1D","numberOfExamples","sigma","previousActivations","A","conjugate","gW","gb","rowwiseSum","derivative","Backpropagation3Dto1D","BackpropagationToMaxPool","prevLayer","Z","filterSize","getFilterSize","stride","getStride","inputWidth","getWidth","inputHeight","getHeight","outputWidth","getDepth","getOutputWidth","outputHeight","getOutputHeight","outputDepth","getOutputDepth","c","h","w","horizStart","_max","inputOffset","outputOffset","maxX","maxY","y","vStart","x","hStart","BackpropagationToConv","padding","getPadding","inputDepth","tmpResult","vertStart","d","vertical","verticalPad","horizontal","horizontalPad","z","BackpropagationFactory","is1D","conv","maxpool","fullyconnected","AbstractNetworkBuilder","dimension","network","layerClass","callback","lastLayer","firstLayerTransition","transition","configure","setBackPropagation","create","addLayer","AbstractLayer","vW","cW","vb","cb","activation","width","height","depth","AbstractLayer1D","setWidth","is3D","setHeight","SoftmaxLayer","softmax","LogisticLayer","logistic","TanhLayer","tanh","ReluLayer","relu","SoftplusLayer","softplus","im2col","channels","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultCol","boundingY","boundingX","currentResultRow","channel","resultWidth","resultHeight","resultDepth","AbstractLayer3D","setSize","setDepth","ConvLayer","numFilters","rollToColMatrix","setCol","FullyConnectedLayer","MaxPoolLayer","pool","NetworkBuilder1D","jsonPath","json","parse","toString","builder","layerData","createLayer","getNetwork","getLayers","NetworkBuilder3D","setFilterSize","setStride","setNumFilters","setPadding","Dataset","exampleSize","example","dataIndex","Number","NaN","index","offset","batchSize","block","DatasetBuilder","csvPath","csvtojson","noheader","fromFile","then","dataset","AbstractOptimizer","t","learningRate","OptimizerAdam","adam","beta1","beta2","wCorrected","sCorrected","wCorrected2","sCorrected2","OptimizerGradientDescent","gradientDescent","OptimizerAdadelta","adadelta","gamma","deltaParameters","deltaParameters2","AbstractTrainer","optimizer","iterations","verbose","verboseStep","stepCallback","inputDataset","outputDataset","getNumberOfExamples","numBatches","ceil","cost","accuracy","batch","inputBatch","getBatch","outputBatch","predictedOutput","correctOutput","miniBatchSize","colMaxCoeffIndex","MiniBatchTrainer","startTime","Date","getTime","setBatchSize","startIterationTime","startIterationTime2","backward","setT","optimize","endIterationTime","endTime","currentResult","iteration","AbstractDatasetModifier","applyToExample","CallbackDatabaseModifier","exampleIndex","exampleAt","gpu","GPU","mode","kernel","createKernel","a","thread","setOutput","constants","number","setConstants","kernel2","kernel3","ComputationGPU","NetworkBuilder","Layer","DatasetBuilderBuilder","Optimizer","Trainer","DatasetModifier","MinMaxScalingDatabaseModifier","min","Infinity","MissingDataScalingDatabaseModifier","rowsToFill","correctExamplesCount","valueToFill","isNaN","modificationType","Computation","setComputation","DatasetDataset"],"sourceRoot":""}